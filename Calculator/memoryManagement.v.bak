// The following module works as a memory management module that alters a signal and a register based on a memoryFlag that is set in the FSM.
// The function has 2 important data output lines, bcdOutput, the new display register that is sent to the display manager, and bcdOutputMemory
// the output for the memory register. 
module memoryManagement(memoryFlag, bcdInput, bcdOutput, bcdMemory, bcdOutputMemory);
	
	input [1:0] memoryFlag; // Flag that indicates how to treat the inputs
	input [31:0] bcdInput; // origional display
	input [11:0] bcdMemory; // memory we have stored that is in a BCD format
	
	output reg [31:0] bcdOutput; // new display
	output reg [11:0] bcdOutputMemory; // new memory that we may/may not have updated.
	
	parameter Store = 2'b01, Retrieve = 2'b10, Clear = 2'b11;
	
	always @(memoryFlag)
	begin
	
		// in every case there are 2 streams of data we have to keep in mind. The output display (bcdOutput) and the output memory (bcdMemory)
	
		case (memoryFlag)
			// Case 01 in memoryFlag represents that the user wants to store the least significant 3 bit variables in the bcdInput
			Store: begin
			
				bcdOutput <= bcdInput;
				bcdOutputMemory <= bcdInput[11:0];
			
			end
			// Case 10 in memoryFlag represents that the user wants to retrieve some memory and display it
			Retrieve: begin
				bcdOutput <= {bcdMemory, 20'b0}; // pad the output
				bcdOutputMemory <= bcdMemory;
		
		
			end
			// Case 11 indicates that the user wishes to clear the memory. 
			Clear: begin
				bcdOutput <= bcdInput;
				bcdOutputMemory <= 11'b0;
	
	 
	
			end
			// Default state with any unknown state
			default: begin
				bcdOutput <= bcdInput;
				bcdOutputMemory <= bcdMemory;
			
			end
		endcase
	end

endmodule