TimeQuest Timing Analyzer report for Mecheng371P2
Mon Oct 15 09:34:35 2018
Quartus II 64-Bit Version 12.0 Build 178 05/31/2012 SJ Full Version


---------------------
; Table of Contents ;
---------------------
  1. Legal Notice
  2. TimeQuest Timing Analyzer Summary
  3. Parallel Compilation
  4. Clocks
  5. Slow Model Fmax Summary
  6. Slow Model Setup Summary
  7. Slow Model Hold Summary
  8. Slow Model Recovery Summary
  9. Slow Model Removal Summary
 10. Slow Model Minimum Pulse Width Summary
 11. Slow Model Setup: 'FSM:fsm1|state.S2'
 12. Slow Model Setup: 'inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]'
 13. Slow Model Setup: 'CLOCK_50'
 14. Slow Model Setup: 'inputManager:iM1|clockDivider:clock500Hz|newClock'
 15. Slow Model Setup: 'FSM:fsm1|state.S3'
 16. Slow Model Setup: 'FSM:fsm1|state.S1'
 17. Slow Model Setup: 'inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4]'
 18. Slow Model Setup: 'ROW[0]'
 19. Slow Model Hold: 'inputManager:iM1|clockDivider:clock500Hz|newClock'
 20. Slow Model Hold: 'ROW[0]'
 21. Slow Model Hold: 'CLOCK_50'
 22. Slow Model Hold: 'FSM:fsm1|state.S2'
 23. Slow Model Hold: 'inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4]'
 24. Slow Model Hold: 'FSM:fsm1|state.S3'
 25. Slow Model Hold: 'FSM:fsm1|state.S1'
 26. Slow Model Hold: 'inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]'
 27. Slow Model Recovery: 'inputManager:iM1|clockDivider:clock500Hz|newClock'
 28. Slow Model Removal: 'inputManager:iM1|clockDivider:clock500Hz|newClock'
 29. Slow Model Minimum Pulse Width: 'CLOCK_50'
 30. Slow Model Minimum Pulse Width: 'ROW[0]'
 31. Slow Model Minimum Pulse Width: 'inputManager:iM1|clockDivider:clock500Hz|newClock'
 32. Slow Model Minimum Pulse Width: 'inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]'
 33. Slow Model Minimum Pulse Width: 'inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4]'
 34. Slow Model Minimum Pulse Width: 'FSM:fsm1|state.S1'
 35. Slow Model Minimum Pulse Width: 'FSM:fsm1|state.S2'
 36. Slow Model Minimum Pulse Width: 'FSM:fsm1|state.S3'
 37. Setup Times
 38. Hold Times
 39. Clock to Output Times
 40. Minimum Clock to Output Times
 41. Fast Model Setup Summary
 42. Fast Model Hold Summary
 43. Fast Model Recovery Summary
 44. Fast Model Removal Summary
 45. Fast Model Minimum Pulse Width Summary
 46. Fast Model Setup: 'FSM:fsm1|state.S2'
 47. Fast Model Setup: 'inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]'
 48. Fast Model Setup: 'CLOCK_50'
 49. Fast Model Setup: 'inputManager:iM1|clockDivider:clock500Hz|newClock'
 50. Fast Model Setup: 'FSM:fsm1|state.S3'
 51. Fast Model Setup: 'FSM:fsm1|state.S1'
 52. Fast Model Setup: 'ROW[0]'
 53. Fast Model Setup: 'inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4]'
 54. Fast Model Hold: 'inputManager:iM1|clockDivider:clock500Hz|newClock'
 55. Fast Model Hold: 'CLOCK_50'
 56. Fast Model Hold: 'ROW[0]'
 57. Fast Model Hold: 'FSM:fsm1|state.S2'
 58. Fast Model Hold: 'inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4]'
 59. Fast Model Hold: 'FSM:fsm1|state.S3'
 60. Fast Model Hold: 'inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]'
 61. Fast Model Hold: 'FSM:fsm1|state.S1'
 62. Fast Model Recovery: 'inputManager:iM1|clockDivider:clock500Hz|newClock'
 63. Fast Model Removal: 'inputManager:iM1|clockDivider:clock500Hz|newClock'
 64. Fast Model Minimum Pulse Width: 'CLOCK_50'
 65. Fast Model Minimum Pulse Width: 'ROW[0]'
 66. Fast Model Minimum Pulse Width: 'inputManager:iM1|clockDivider:clock500Hz|newClock'
 67. Fast Model Minimum Pulse Width: 'inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]'
 68. Fast Model Minimum Pulse Width: 'inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4]'
 69. Fast Model Minimum Pulse Width: 'FSM:fsm1|state.S1'
 70. Fast Model Minimum Pulse Width: 'FSM:fsm1|state.S2'
 71. Fast Model Minimum Pulse Width: 'FSM:fsm1|state.S3'
 72. Setup Times
 73. Hold Times
 74. Clock to Output Times
 75. Minimum Clock to Output Times
 76. Multicorner Timing Analysis Summary
 77. Setup Times
 78. Hold Times
 79. Clock to Output Times
 80. Minimum Clock to Output Times
 81. Setup Transfers
 82. Hold Transfers
 83. Recovery Transfers
 84. Removal Transfers
 85. Report TCCS
 86. Report RSKM
 87. Unconstrained Paths
 88. TimeQuest Timing Analyzer Messages



----------------
; Legal Notice ;
----------------
Copyright (C) 1991-2012 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.



+------------------------------------------------------------------------+
; TimeQuest Timing Analyzer Summary                                      ;
+--------------------+---------------------------------------------------+
; Quartus II Version ; Version 12.0 Build 178 05/31/2012 SJ Full Version ;
; Revision Name      ; Mecheng371P2                                      ;
; Device Family      ; Cyclone II                                        ;
; Device Name        ; EP2C35F672C6                                      ;
; Timing Models      ; Final                                             ;
; Delay Model        ; Combined                                          ;
; Rise/Fall Delays   ; Unavailable                                       ;
+--------------------+---------------------------------------------------+


+------------------------------------------+
; Parallel Compilation                     ;
+----------------------------+-------------+
; Processors                 ; Number      ;
+----------------------------+-------------+
; Number detected on machine ; 4           ;
; Maximum allowed            ; 4           ;
;                            ;             ;
; Average used               ; 4.00        ;
; Maximum used               ; 4           ;
;                            ;             ;
; Usage by Processor         ; % Time Used ;
;     1-4 processors         ; 100.0%      ;
+----------------------------+-------------+


+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Clocks                                                                                                                                                                                                                                                                           ;
+---------------------------------------------------------+------+--------+------------+-------+-------+------------+-----------+-------------+-------+--------+-----------+------------+----------+--------+--------+-------------------------------------------------------------+
; Clock Name                                              ; Type ; Period ; Frequency  ; Rise  ; Fall  ; Duty Cycle ; Divide by ; Multiply by ; Phase ; Offset ; Edge List ; Edge Shift ; Inverted ; Master ; Source ; Targets                                                     ;
+---------------------------------------------------------+------+--------+------------+-------+-------+------------+-----------+-------------+-------+--------+-----------+------------+----------+--------+--------+-------------------------------------------------------------+
; CLOCK_50                                                ; Base ; 1.000  ; 1000.0 MHz ; 0.000 ; 0.500 ;            ;           ;             ;       ;        ;           ;            ;          ;        ;        ; { CLOCK_50 }                                                ;
; FSM:fsm1|state.S1                                       ; Base ; 1.000  ; 1000.0 MHz ; 0.000 ; 0.500 ;            ;           ;             ;       ;        ;           ;            ;          ;        ;        ; { FSM:fsm1|state.S1 }                                       ;
; FSM:fsm1|state.S2                                       ; Base ; 1.000  ; 1000.0 MHz ; 0.000 ; 0.500 ;            ;           ;             ;       ;        ;           ;            ;          ;        ;        ; { FSM:fsm1|state.S2 }                                       ;
; FSM:fsm1|state.S3                                       ; Base ; 1.000  ; 1000.0 MHz ; 0.000 ; 0.500 ;            ;           ;             ;       ;        ;           ;            ;          ;        ;        ; { FSM:fsm1|state.S3 }                                       ;
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; Base ; 1.000  ; 1000.0 MHz ; 0.000 ; 0.500 ;            ;           ;             ;       ;        ;           ;            ;          ;        ;        ; { inputManager:iM1|clockDivider:clock500Hz|newClock }       ;
; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; Base ; 1.000  ; 1000.0 MHz ; 0.000 ; 0.500 ;            ;           ;             ;       ;        ;           ;            ;          ;        ;        ; { inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] }    ;
; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Base ; 1.000  ; 1000.0 MHz ; 0.000 ; 0.500 ;            ;           ;             ;       ;        ;           ;            ;          ;        ;        ; { inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] } ;
; ROW[0]                                                  ; Base ; 1.000  ; 1000.0 MHz ; 0.000 ; 0.500 ;            ;           ;             ;       ;        ;           ;            ;          ;        ;        ; { ROW[0] }                                                  ;
+---------------------------------------------------------+------+--------+------------+-------+-------+------------+-----------+-------------+-------+--------+-----------+------------+----------+--------+--------+-------------------------------------------------------------+


+-------------------------------------------------------------------------------------------------------------+
; Slow Model Fmax Summary                                                                                     ;
+-------------+-----------------+---------------------------------------------------+-------------------------+
; Fmax        ; Restricted Fmax ; Clock Name                                        ; Note                    ;
+-------------+-----------------+---------------------------------------------------+-------------------------+
; 178.19 MHz  ; 178.19 MHz      ; CLOCK_50                                          ;                         ;
; 251.57 MHz  ; 251.57 MHz      ; inputManager:iM1|clockDivider:clock500Hz|newClock ;                         ;
; 2293.58 MHz ; 232.88 MHz      ; ROW[0]                                            ; limit due to hold check ;
+-------------+-----------------+---------------------------------------------------+-------------------------+
This panel reports FMAX for every clock in the design, regardless of the user-specified clock periods.  FMAX is only computed for paths where the source and destination registers or ports are driven by the same clock.  Paths of different clocks, including generated clocks, are ignored.  For paths between a clock and its inversion, FMAX is computed as if the rising and falling edges are scaled along with FMAX, such that the duty cycle (in terms of a percentage) is maintained. Altera recommends that you always use clock constraints and other slack reports for sign-off analysis.


+-----------------------------------------------------------------------------------+
; Slow Model Setup Summary                                                          ;
+---------------------------------------------------------+---------+---------------+
; Clock                                                   ; Slack   ; End Point TNS ;
+---------------------------------------------------------+---------+---------------+
; FSM:fsm1|state.S2                                       ; -46.853 ; -893.936      ;
; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; -10.573 ; -206.299      ;
; CLOCK_50                                                ; -4.612  ; -58.599       ;
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; -3.327  ; -140.382      ;
; FSM:fsm1|state.S3                                       ; -2.034  ; -22.974       ;
; FSM:fsm1|state.S1                                       ; -1.215  ; -15.344       ;
; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; -0.155  ; -0.218        ;
; ROW[0]                                                  ; 0.243   ; 0.000         ;
+---------------------------------------------------------+---------+---------------+


+----------------------------------------------------------------------------------+
; Slow Model Hold Summary                                                          ;
+---------------------------------------------------------+--------+---------------+
; Clock                                                   ; Slack  ; End Point TNS ;
+---------------------------------------------------------+--------+---------------+
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; -3.156 ; -35.016       ;
; ROW[0]                                                  ; -2.641 ; -24.061       ;
; CLOCK_50                                                ; -2.519 ; -2.519        ;
; FSM:fsm1|state.S2                                       ; -1.202 ; -11.202       ;
; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; 0.787  ; 0.000         ;
; FSM:fsm1|state.S3                                       ; 0.957  ; 0.000         ;
; FSM:fsm1|state.S1                                       ; 1.179  ; 0.000         ;
; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; 1.732  ; 0.000         ;
+---------------------------------------------------------+--------+---------------+


+----------------------------------------------------------------------------+
; Slow Model Recovery Summary                                                ;
+---------------------------------------------------+--------+---------------+
; Clock                                             ; Slack  ; End Point TNS ;
+---------------------------------------------------+--------+---------------+
; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.266 ; -1.330        ;
+---------------------------------------------------+--------+---------------+


+---------------------------------------------------------------------------+
; Slow Model Removal Summary                                                ;
+---------------------------------------------------+-------+---------------+
; Clock                                             ; Slack ; End Point TNS ;
+---------------------------------------------------+-------+---------------+
; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.036 ; 0.000         ;
+---------------------------------------------------+-------+---------------+


+----------------------------------------------------------------------------------+
; Slow Model Minimum Pulse Width Summary                                           ;
+---------------------------------------------------------+--------+---------------+
; Clock                                                   ; Slack  ; End Point TNS ;
+---------------------------------------------------------+--------+---------------+
; CLOCK_50                                                ; -1.380 ; -28.380       ;
; ROW[0]                                                  ; -1.222 ; -13.540       ;
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; -0.500 ; -91.000       ;
; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; -0.500 ; -21.000       ;
; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; -0.500 ; -3.000        ;
; FSM:fsm1|state.S1                                       ; 0.500  ; 0.000         ;
; FSM:fsm1|state.S2                                       ; 0.500  ; 0.000         ;
; FSM:fsm1|state.S3                                       ; 0.500  ; 0.000         ;
+---------------------------------------------------------+--------+---------------+


+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Setup: 'FSM:fsm1|state.S2'                                                                                                                                             ;
+---------+---------------------+-------------------------------+------------------------------------------------------+-------------------+--------------+------------+------------+
; Slack   ; From Node           ; To Node                       ; Launch Clock                                         ; Latch Clock       ; Relationship ; Clock Skew ; Data Delay ;
+---------+---------------------+-------------------------------+------------------------------------------------------+-------------------+--------------+------------+------------+
; -46.853 ; ALU:ALU1|answer[0]  ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.567      ; 47.466     ;
; -46.823 ; ALU:ALU1|answer[1]  ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.567      ; 47.436     ;
; -46.664 ; ALU:ALU1|answer[2]  ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.567      ; 47.277     ;
; -46.628 ; ALU:ALU1|answer[4]  ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.568      ; 47.242     ;
; -46.558 ; ALU:ALU1|answer[3]  ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.567      ; 47.171     ;
; -46.556 ; ALU:ALU1|answer[12] ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.566      ; 47.168     ;
; -46.528 ; ALU:ALU1|answer[10] ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.568      ; 47.142     ;
; -46.521 ; ALU:ALU1|answer[6]  ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.568      ; 47.135     ;
; -46.520 ; ALU:ALU1|answer[0]  ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.553      ; 47.105     ;
; -46.490 ; ALU:ALU1|answer[1]  ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.553      ; 47.075     ;
; -46.451 ; ALU:ALU1|answer[0]  ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.553      ; 47.037     ;
; -46.421 ; ALU:ALU1|answer[1]  ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.553      ; 47.007     ;
; -46.413 ; ALU:ALU1|answer[7]  ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.568      ; 47.027     ;
; -46.412 ; ALU:ALU1|answer[5]  ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.567      ; 47.025     ;
; -46.393 ; ALU:ALU1|answer[11] ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.568      ; 47.007     ;
; -46.334 ; ALU:ALU1|answer[9]  ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.568      ; 46.948     ;
; -46.331 ; ALU:ALU1|answer[2]  ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.553      ; 46.916     ;
; -46.311 ; ALU:ALU1|answer[0]  ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.559      ; 46.910     ;
; -46.295 ; ALU:ALU1|answer[4]  ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.554      ; 46.881     ;
; -46.281 ; ALU:ALU1|answer[1]  ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.559      ; 46.880     ;
; -46.262 ; ALU:ALU1|answer[2]  ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.553      ; 46.848     ;
; -46.232 ; ALU:ALU1|answer[14] ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.568      ; 46.846     ;
; -46.226 ; ALU:ALU1|answer[4]  ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.554      ; 46.813     ;
; -46.225 ; ALU:ALU1|answer[13] ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.568      ; 46.839     ;
; -46.225 ; ALU:ALU1|answer[3]  ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.553      ; 46.810     ;
; -46.223 ; ALU:ALU1|answer[12] ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.552      ; 46.807     ;
; -46.202 ; ALU:ALU1|answer[8]  ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.567      ; 46.815     ;
; -46.195 ; ALU:ALU1|answer[10] ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.554      ; 46.781     ;
; -46.188 ; ALU:ALU1|answer[6]  ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.554      ; 46.774     ;
; -46.156 ; ALU:ALU1|answer[3]  ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.553      ; 46.742     ;
; -46.154 ; ALU:ALU1|answer[12] ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.552      ; 46.739     ;
; -46.147 ; ALU:ALU1|answer[15] ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.568      ; 46.761     ;
; -46.134 ; ALU:ALU1|answer[0]  ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.538      ; 46.721     ;
; -46.126 ; ALU:ALU1|answer[10] ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.554      ; 46.713     ;
; -46.122 ; ALU:ALU1|answer[2]  ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.559      ; 46.721     ;
; -46.120 ; ALU:ALU1|answer[0]  ; displayMUX:dMUX1|register[5]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.557      ; 46.688     ;
; -46.119 ; ALU:ALU1|answer[6]  ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.554      ; 46.706     ;
; -46.104 ; ALU:ALU1|answer[1]  ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.538      ; 46.691     ;
; -46.090 ; ALU:ALU1|answer[1]  ; displayMUX:dMUX1|register[5]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.557      ; 46.658     ;
; -46.086 ; ALU:ALU1|answer[4]  ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.560      ; 46.686     ;
; -46.083 ; ALU:ALU1|answer[0]  ; displayMUX:dMUX1|register[6]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.556      ; 46.684     ;
; -46.080 ; ALU:ALU1|answer[7]  ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.554      ; 46.666     ;
; -46.079 ; ALU:ALU1|answer[5]  ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.553      ; 46.664     ;
; -46.074 ; ALU:ALU1|answer[16] ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.568      ; 46.688     ;
; -46.060 ; ALU:ALU1|answer[11] ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.554      ; 46.646     ;
; -46.053 ; ALU:ALU1|answer[1]  ; displayMUX:dMUX1|register[6]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.556      ; 46.654     ;
; -46.016 ; ALU:ALU1|answer[3]  ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.559      ; 46.615     ;
; -46.014 ; ALU:ALU1|answer[12] ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.558      ; 46.612     ;
; -46.011 ; ALU:ALU1|answer[7]  ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.554      ; 46.598     ;
; -46.010 ; ALU:ALU1|answer[5]  ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.553      ; 46.596     ;
; -46.003 ; ALU:ALU1|answer[0]  ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.559      ; 46.611     ;
; -46.001 ; ALU:ALU1|answer[9]  ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.554      ; 46.587     ;
; -45.997 ; ALU:ALU1|answer[17] ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.568      ; 46.611     ;
; -45.991 ; ALU:ALU1|answer[11] ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.554      ; 46.578     ;
; -45.986 ; ALU:ALU1|answer[10] ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.560      ; 46.586     ;
; -45.979 ; ALU:ALU1|answer[6]  ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.560      ; 46.579     ;
; -45.973 ; ALU:ALU1|answer[1]  ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.559      ; 46.581     ;
; -45.945 ; ALU:ALU1|answer[2]  ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.538      ; 46.532     ;
; -45.932 ; ALU:ALU1|answer[9]  ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.554      ; 46.519     ;
; -45.931 ; ALU:ALU1|answer[2]  ; displayMUX:dMUX1|register[5]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.557      ; 46.499     ;
; -45.909 ; ALU:ALU1|answer[4]  ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.539      ; 46.497     ;
; -45.899 ; ALU:ALU1|answer[14] ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.554      ; 46.485     ;
; -45.895 ; ALU:ALU1|answer[4]  ; displayMUX:dMUX1|register[5]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.558      ; 46.464     ;
; -45.894 ; ALU:ALU1|answer[2]  ; displayMUX:dMUX1|register[6]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.556      ; 46.495     ;
; -45.892 ; ALU:ALU1|answer[13] ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.554      ; 46.478     ;
; -45.871 ; ALU:ALU1|answer[7]  ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.560      ; 46.471     ;
; -45.870 ; ALU:ALU1|answer[5]  ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.559      ; 46.469     ;
; -45.869 ; ALU:ALU1|answer[8]  ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.553      ; 46.454     ;
; -45.858 ; ALU:ALU1|answer[4]  ; displayMUX:dMUX1|register[6]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.557      ; 46.460     ;
; -45.851 ; ALU:ALU1|answer[11] ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.560      ; 46.451     ;
; -45.839 ; ALU:ALU1|answer[3]  ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.538      ; 46.426     ;
; -45.837 ; ALU:ALU1|answer[12] ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.537      ; 46.423     ;
; -45.830 ; ALU:ALU1|answer[14] ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.554      ; 46.417     ;
; -45.825 ; ALU:ALU1|answer[3]  ; displayMUX:dMUX1|register[5]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.557      ; 46.393     ;
; -45.823 ; ALU:ALU1|answer[13] ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.554      ; 46.410     ;
; -45.823 ; ALU:ALU1|answer[12] ; displayMUX:dMUX1|register[5]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.556      ; 46.390     ;
; -45.820 ; ALU:ALU1|answer[18] ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.566      ; 46.432     ;
; -45.814 ; ALU:ALU1|answer[15] ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.554      ; 46.400     ;
; -45.814 ; ALU:ALU1|answer[2]  ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.559      ; 46.422     ;
; -45.809 ; ALU:ALU1|answer[10] ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.539      ; 46.397     ;
; -45.802 ; ALU:ALU1|answer[6]  ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.539      ; 46.390     ;
; -45.800 ; ALU:ALU1|answer[8]  ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.553      ; 46.386     ;
; -45.795 ; ALU:ALU1|answer[10] ; displayMUX:dMUX1|register[5]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.558      ; 46.364     ;
; -45.792 ; ALU:ALU1|answer[9]  ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.560      ; 46.392     ;
; -45.788 ; ALU:ALU1|answer[6]  ; displayMUX:dMUX1|register[5]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.558      ; 46.357     ;
; -45.788 ; ALU:ALU1|answer[3]  ; displayMUX:dMUX1|register[6]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.556      ; 46.389     ;
; -45.786 ; ALU:ALU1|answer[12] ; displayMUX:dMUX1|register[6]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.555      ; 46.386     ;
; -45.778 ; ALU:ALU1|answer[4]  ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.560      ; 46.387     ;
; -45.758 ; ALU:ALU1|answer[10] ; displayMUX:dMUX1|register[6]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.557      ; 46.360     ;
; -45.751 ; ALU:ALU1|answer[6]  ; displayMUX:dMUX1|register[6]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.557      ; 46.353     ;
; -45.749 ; ALU:ALU1|answer[0]  ; displayMUX:dMUX1|register[1]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.540      ; 46.300     ;
; -45.745 ; ALU:ALU1|answer[15] ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.554      ; 46.332     ;
; -45.741 ; ALU:ALU1|answer[16] ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.554      ; 46.327     ;
; -45.719 ; ALU:ALU1|answer[1]  ; displayMUX:dMUX1|register[1]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.540      ; 46.270     ;
; -45.708 ; ALU:ALU1|answer[3]  ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.559      ; 46.316     ;
; -45.706 ; ALU:ALU1|answer[12] ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.558      ; 46.313     ;
; -45.694 ; ALU:ALU1|answer[7]  ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.539      ; 46.282     ;
; -45.693 ; ALU:ALU1|answer[5]  ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.538      ; 46.280     ;
; -45.690 ; ALU:ALU1|answer[14] ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.560      ; 46.290     ;
; -45.683 ; ALU:ALU1|answer[13] ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.560      ; 46.283     ;
+---------+---------------------+-------------------------------+------------------------------------------------------+-------------------+--------------+------------+------------+


+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Setup: 'inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]'                                                                                                           ;
+---------+--------------------------------+---------------------+-------------------+------------------------------------------------------+--------------+------------+------------+
; Slack   ; From Node                      ; To Node             ; Launch Clock      ; Latch Clock                                          ; Relationship ; Clock Skew ; Data Delay ;
+---------+--------------------------------+---------------------+-------------------+------------------------------------------------------+--------------+------------+------------+
; -10.573 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.532     ; 10.577     ;
; -10.451 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.563     ; 10.424     ;
; -10.360 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.563     ; 10.333     ;
; -10.348 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.958     ; 9.926      ;
; -10.334 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[19] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.563     ; 10.307     ;
; -10.323 ; registerTransfer:rT1|storeA[6] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.528     ; 10.331     ;
; -10.319 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[9]  ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.563     ; 10.292     ;
; -10.315 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[15] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.563     ; 10.288     ;
; -10.314 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[10] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.563     ; 10.287     ;
; -10.309 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[17] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.563     ; 10.282     ;
; -10.305 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[16] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.563     ; 10.278     ;
; -10.300 ; registerTransfer:rT1|storeB[5] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.869     ; 9.967      ;
; -10.294 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[13] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.563     ; 10.267     ;
; -10.259 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.844     ; 9.951      ;
; -10.241 ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.868     ; 9.909      ;
; -10.239 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[18] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.561     ; 10.214     ;
; -10.232 ; registerTransfer:rT1|storeA[1] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.509     ; 10.259     ;
; -10.226 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.989     ; 9.773      ;
; -10.201 ; registerTransfer:rT1|storeA[6] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.559     ; 10.178     ;
; -10.178 ; registerTransfer:rT1|storeB[5] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.900     ; 9.814      ;
; -10.165 ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.840     ; 9.861      ;
; -10.162 ; registerTransfer:rT1|storeA[5] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.530     ; 10.168     ;
; -10.137 ; registerTransfer:rT1|storeA[4] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.530     ; 10.143     ;
; -10.137 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.875     ; 9.798      ;
; -10.135 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.989     ; 9.682      ;
; -10.119 ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.899     ; 9.756      ;
; -10.110 ; registerTransfer:rT1|storeA[6] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.559     ; 10.087     ;
; -10.110 ; registerTransfer:rT1|storeA[1] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.540     ; 10.106     ;
; -10.109 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[19] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.989     ; 9.656      ;
; -10.099 ; registerTransfer:rT1|storeB[4] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.870     ; 9.765      ;
; -10.090 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[15] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.989     ; 9.637      ;
; -10.089 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[10] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.989     ; 9.636      ;
; -10.087 ; registerTransfer:rT1|storeB[5] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.900     ; 9.723      ;
; -10.084 ; registerTransfer:rT1|storeA[6] ; ALU:ALU1|answer[19] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.559     ; 10.061     ;
; -10.084 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[17] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.989     ; 9.631      ;
; -10.082 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[12] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.561     ; 10.057     ;
; -10.080 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[16] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.989     ; 9.627      ;
; -10.069 ; registerTransfer:rT1|storeA[6] ; ALU:ALU1|answer[9]  ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.559     ; 10.046     ;
; -10.069 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[13] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.989     ; 9.616      ;
; -10.065 ; registerTransfer:rT1|storeA[6] ; ALU:ALU1|answer[15] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.559     ; 10.042     ;
; -10.064 ; registerTransfer:rT1|storeA[3] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.531     ; 10.069     ;
; -10.064 ; registerTransfer:rT1|storeA[6] ; ALU:ALU1|answer[10] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.559     ; 10.041     ;
; -10.061 ; registerTransfer:rT1|storeB[5] ; ALU:ALU1|answer[19] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.900     ; 9.697      ;
; -10.059 ; registerTransfer:rT1|storeA[6] ; ALU:ALU1|answer[17] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.559     ; 10.036     ;
; -10.055 ; registerTransfer:rT1|storeA[6] ; ALU:ALU1|answer[16] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.559     ; 10.032     ;
; -10.054 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[8]  ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.562     ; 10.028     ;
; -10.046 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.875     ; 9.707      ;
; -10.044 ; registerTransfer:rT1|storeA[6] ; ALU:ALU1|answer[13] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.559     ; 10.021     ;
; -10.043 ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.871     ; 9.708      ;
; -10.042 ; registerTransfer:rT1|storeB[5] ; ALU:ALU1|answer[15] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.900     ; 9.678      ;
; -10.041 ; registerTransfer:rT1|storeB[5] ; ALU:ALU1|answer[10] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.900     ; 9.677      ;
; -10.040 ; registerTransfer:rT1|storeA[5] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.561     ; 10.015     ;
; -10.036 ; registerTransfer:rT1|storeB[5] ; ALU:ALU1|answer[17] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.900     ; 9.672      ;
; -10.032 ; registerTransfer:rT1|storeB[5] ; ALU:ALU1|answer[16] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.900     ; 9.668      ;
; -10.028 ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.899     ; 9.665      ;
; -10.026 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[9]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.989     ; 9.573      ;
; -10.021 ; registerTransfer:rT1|storeB[5] ; ALU:ALU1|answer[13] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.900     ; 9.657      ;
; -10.020 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[19] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.875     ; 9.681      ;
; -10.019 ; registerTransfer:rT1|storeA[1] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.540     ; 10.015     ;
; -10.015 ; registerTransfer:rT1|storeA[4] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.561     ; 9.990      ;
; -10.014 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[18] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.987     ; 9.563      ;
; -10.002 ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[19] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.899     ; 9.639      ;
; -10.001 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[15] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.875     ; 9.662      ;
; -10.000 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[10] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.875     ; 9.661      ;
; -9.995  ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[17] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.875     ; 9.656      ;
; -9.993  ; registerTransfer:rT1|storeA[1] ; ALU:ALU1|answer[19] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.540     ; 9.989      ;
; -9.991  ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[16] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.875     ; 9.652      ;
; -9.989  ; registerTransfer:rT1|storeA[6] ; ALU:ALU1|answer[18] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.557     ; 9.968      ;
; -9.983  ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[15] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.899     ; 9.620      ;
; -9.982  ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[10] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.899     ; 9.619      ;
; -9.980  ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[13] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.875     ; 9.641      ;
; -9.978  ; registerTransfer:rT1|storeA[1] ; ALU:ALU1|answer[9]  ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.540     ; 9.974      ;
; -9.978  ; registerTransfer:rT1|storeB[5] ; ALU:ALU1|answer[9]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.900     ; 9.614      ;
; -9.977  ; registerTransfer:rT1|storeB[4] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.901     ; 9.612      ;
; -9.977  ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[17] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.899     ; 9.614      ;
; -9.974  ; registerTransfer:rT1|storeA[1] ; ALU:ALU1|answer[15] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.540     ; 9.970      ;
; -9.973  ; registerTransfer:rT1|storeA[1] ; ALU:ALU1|answer[10] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.540     ; 9.969      ;
; -9.973  ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[8]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.988     ; 9.521      ;
; -9.973  ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[16] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.899     ; 9.610      ;
; -9.968  ; registerTransfer:rT1|storeA[1] ; ALU:ALU1|answer[17] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.540     ; 9.964      ;
; -9.966  ; registerTransfer:rT1|storeB[5] ; ALU:ALU1|answer[18] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.898     ; 9.604      ;
; -9.964  ; registerTransfer:rT1|storeA[1] ; ALU:ALU1|answer[16] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.540     ; 9.960      ;
; -9.962  ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[13] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.899     ; 9.599      ;
; -9.953  ; registerTransfer:rT1|storeA[1] ; ALU:ALU1|answer[13] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.540     ; 9.949      ;
; -9.952  ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.871     ; 9.617      ;
; -9.949  ; registerTransfer:rT1|storeA[5] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.561     ; 9.924      ;
; -9.947  ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[7]  ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.563     ; 9.920      ;
; -9.942  ; registerTransfer:rT1|storeA[3] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.562     ; 9.916      ;
; -9.937  ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[9]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.875     ; 9.598      ;
; -9.926  ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[19] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.871     ; 9.591      ;
; -9.925  ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[18] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.873     ; 9.588      ;
; -9.925  ; registerTransfer:rT1|storeB[5] ; ALU:ALU1|answer[8]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.899     ; 9.562      ;
; -9.924  ; registerTransfer:rT1|storeA[4] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.561     ; 9.899      ;
; -9.923  ; registerTransfer:rT1|storeA[5] ; ALU:ALU1|answer[19] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.561     ; 9.898      ;
; -9.919  ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[9]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.899     ; 9.556      ;
; -9.908  ; registerTransfer:rT1|storeA[5] ; ALU:ALU1|answer[9]  ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.561     ; 9.883      ;
; -9.907  ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[18] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.897     ; 9.546      ;
; -9.907  ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[15] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.871     ; 9.572      ;
; -9.906  ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[10] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.871     ; 9.571      ;
; -9.904  ; registerTransfer:rT1|storeA[5] ; ALU:ALU1|answer[15] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.561     ; 9.879      ;
+---------+--------------------------------+---------------------+-------------------+------------------------------------------------------+--------------+------------+------------+


+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Setup: 'CLOCK_50'                                                                                                                                                               ;
+--------+------------------------------------------------------+------------------------------------------------------+--------------+-------------+--------------+------------+------------+
; Slack  ; From Node                                            ; To Node                                              ; Launch Clock ; Latch Clock ; Relationship ; Clock Skew ; Data Delay ;
+--------+------------------------------------------------------+------------------------------------------------------+--------------+-------------+--------------+------------+------------+
; -4.612 ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 5.648      ;
; -4.502 ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 5.538      ;
; -4.471 ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 5.507      ;
; -4.464 ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.493      ;
; -4.400 ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 5.436      ;
; -4.380 ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.007      ; 5.423      ;
; -4.354 ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.383      ;
; -4.323 ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.352      ;
; -4.294 ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.007      ; 5.337      ;
; -4.293 ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 5.329      ;
; -4.252 ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.281      ;
; -4.232 ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 5.268      ;
; -4.225 ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.007      ; 5.268      ;
; -4.196 ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.225      ;
; -4.196 ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.225      ;
; -4.194 ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.223      ;
; -4.194 ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.223      ;
; -4.192 ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.221      ;
; -4.146 ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 5.182      ;
; -4.145 ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.174      ;
; -4.129 ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 5.165      ;
; -4.086 ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.115      ;
; -4.086 ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.115      ;
; -4.084 ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.113      ;
; -4.084 ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.113      ;
; -4.082 ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.111      ;
; -4.077 ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 5.113      ;
; -4.058 ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 5.094      ;
; -4.055 ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.084      ;
; -4.055 ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.084      ;
; -4.053 ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.082      ;
; -4.053 ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.082      ;
; -4.051 ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.080      ;
; -3.984 ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.013      ;
; -3.984 ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.013      ;
; -3.982 ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.011      ;
; -3.982 ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.011      ;
; -3.981 ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.010      ;
; -3.980 ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 5.009      ;
; -3.964 ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 5.000      ;
; -3.964 ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 5.000      ;
; -3.962 ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 4.998      ;
; -3.962 ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 4.998      ;
; -3.960 ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 4.996      ;
; -3.917 ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 4.953      ;
; -3.916 ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 4.952      ;
; -3.910 ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.939      ;
; -3.878 ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 4.914      ;
; -3.878 ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 4.914      ;
; -3.877 ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.906      ;
; -3.877 ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.906      ;
; -3.876 ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 4.912      ;
; -3.876 ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 4.912      ;
; -3.875 ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.904      ;
; -3.875 ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.904      ;
; -3.874 ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 4.910      ;
; -3.873 ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.902      ;
; -3.817 ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 4.853      ;
; -3.809 ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 4.845      ;
; -3.809 ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 4.845      ;
; -3.807 ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 4.843      ;
; -3.807 ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 4.843      ;
; -3.805 ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 4.841      ;
; -3.769 ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.798      ;
; -3.768 ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.797      ;
; -3.713 ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.742      ;
; -3.713 ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.742      ;
; -3.711 ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.740      ;
; -3.711 ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.740      ;
; -3.709 ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.738      ;
; -3.669 ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.698      ;
; -3.642 ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.671      ;
; -3.642 ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.671      ;
; -3.640 ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.669      ;
; -3.640 ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.669      ;
; -3.638 ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.667      ;
; -3.501 ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.530      ;
; -3.501 ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.530      ;
; -3.500 ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.529      ;
; -3.500 ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.529      ;
; -3.499 ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.528      ;
; -3.499 ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.528      ;
; -3.498 ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.527      ;
; -3.498 ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.527      ;
; -3.497 ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.526      ;
; -3.496 ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.525      ;
; -3.481 ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.007      ; 4.524      ;
; -3.472 ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.008      ; 4.516      ;
; -3.418 ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.007      ; 4.461      ;
; -3.411 ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.008      ; 4.455      ;
; -3.401 ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.430      ;
; -3.401 ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.430      ;
; -3.399 ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.428      ;
; -3.399 ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.428      ;
; -3.397 ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.007     ; 4.426      ;
; -3.333 ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 4.369      ;
; -3.324 ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.001      ; 4.361      ;
; -3.303 ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.008      ; 4.347      ;
; -3.270 ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 4.306      ;
; -3.263 ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.001      ; 4.300      ;
+--------+------------------------------------------------------+------------------------------------------------------+--------------+-------------+--------------+------------+------------+


+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Setup: 'inputManager:iM1|clockDivider:clock500Hz|newClock'                                                                                                                                                                                                     ;
+--------+-------------------------------------------------------+---------------------------------------------------------+---------------------------------------------------+---------------------------------------------------+--------------+------------+------------+
; Slack  ; From Node                                             ; To Node                                                 ; Launch Clock                                      ; Latch Clock                                       ; Relationship ; Clock Skew ; Data Delay ;
+--------+-------------------------------------------------------+---------------------------------------------------------+---------------------------------------------------+---------------------------------------------------+--------------+------------+------------+
; -3.327 ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[1] ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -2.659     ; 1.704      ;
; -3.225 ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4]    ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.500        ; -1.745     ; 2.016      ;
; -3.197 ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4]    ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -2.217     ; 2.016      ;
; -3.100 ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[0] ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -2.524     ; 1.612      ;
; -2.975 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 4.023      ;
; -2.972 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 4.020      ;
; -2.808 ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -2.640     ; 1.204      ;
; -2.808 ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[2] ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -2.640     ; 1.204      ;
; -2.770 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.818      ;
; -2.728 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[10]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.027      ; 3.791      ;
; -2.728 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[9]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.027      ; 3.791      ;
; -2.728 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[8]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.027      ; 3.791      ;
; -2.718 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[11]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.030      ; 3.784      ;
; -2.718 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[3]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.030      ; 3.784      ;
; -2.718 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[7]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.030      ; 3.784      ;
; -2.718 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[1]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.030      ; 3.784      ;
; -2.718 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[0]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.030      ; 3.784      ;
; -2.703 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[10]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.015      ; 3.754      ;
; -2.703 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[9]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.015      ; 3.754      ;
; -2.703 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[8]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.015      ; 3.754      ;
; -2.700 ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]    ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -1.607     ; 2.129      ;
; -2.695 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; FSM:fsm1|state.S4                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.743      ;
; -2.693 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[11]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.018      ; 3.747      ;
; -2.693 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[3]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.018      ; 3.747      ;
; -2.693 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[7]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.018      ; 3.747      ;
; -2.693 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[1]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.018      ; 3.747      ;
; -2.693 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[0]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.018      ; 3.747      ;
; -2.642 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[0] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.006     ; 3.672      ;
; -2.639 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[0] ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.006     ; 3.669      ;
; -2.576 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[2]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.624      ;
; -2.566 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[2]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.614      ;
; -2.550 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[10]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.009      ; 3.595      ;
; -2.550 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[9]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.009      ; 3.595      ;
; -2.550 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[8]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.009      ; 3.595      ;
; -2.543 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[0] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.006     ; 3.573      ;
; -2.540 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[11]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.588      ;
; -2.540 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[3]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.588      ;
; -2.540 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[7]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.588      ;
; -2.540 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[1]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.588      ;
; -2.540 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[0]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.588      ;
; -2.524 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[1] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.006     ; 3.554      ;
; -2.521 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[1] ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.006     ; 3.551      ;
; -2.491 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[2]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.030      ; 3.557      ;
; -2.491 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[6]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.030      ; 3.557      ;
; -2.491 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[5]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.030      ; 3.557      ;
; -2.491 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[4]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.030      ; 3.557      ;
; -2.477 ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[2]   ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -2.728     ; 0.785      ;
; -2.466 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[2]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.018      ; 3.520      ;
; -2.466 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[6]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.018      ; 3.520      ;
; -2.466 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[5]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.018      ; 3.520      ;
; -2.466 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[4]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.018      ; 3.520      ;
; -2.458 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[4] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.004     ; 3.490      ;
; -2.455 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[4] ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.004     ; 3.487      ;
; -2.440 ; twoClockPulse:tC1|doublePulse[1]                      ; storeBCD:sB1|register[2]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.488      ;
; -2.430 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[6]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.478      ;
; -2.425 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[1] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.006     ; 3.455      ;
; -2.420 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[6]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.468      ;
; -2.408 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[10]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.009      ; 3.453      ;
; -2.408 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[9]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.009      ; 3.453      ;
; -2.408 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[8]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.009      ; 3.453      ;
; -2.398 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[11]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.446      ;
; -2.398 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[3]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.446      ;
; -2.398 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[7]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.446      ;
; -2.398 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[1]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.446      ;
; -2.398 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[0]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.446      ;
; -2.362 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[0] ; FSM:fsm1|state.S4                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.006     ; 3.392      ;
; -2.359 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[4] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.004     ; 3.391      ;
; -2.354 ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[0] ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -2.640     ; 0.750      ;
; -2.349 ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[1] ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -2.640     ; 0.745      ;
; -2.340 ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[1]   ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -2.728     ; 0.648      ;
; -2.339 ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[0]   ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -2.728     ; 0.647      ;
; -2.338 ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4]   ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -2.728     ; 0.646      ;
; -2.331 ; FSM:fsm1|state.S0                                     ; storeBCD:sB1|register[10]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.015      ; 3.382      ;
; -2.331 ; FSM:fsm1|state.S0                                     ; storeBCD:sB1|register[9]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.015      ; 3.382      ;
; -2.331 ; FSM:fsm1|state.S0                                     ; storeBCD:sB1|register[8]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.015      ; 3.382      ;
; -2.321 ; FSM:fsm1|state.S0                                     ; storeBCD:sB1|register[11]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.018      ; 3.375      ;
; -2.321 ; FSM:fsm1|state.S0                                     ; storeBCD:sB1|register[3]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.018      ; 3.375      ;
; -2.321 ; FSM:fsm1|state.S0                                     ; storeBCD:sB1|register[7]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.018      ; 3.375      ;
; -2.321 ; FSM:fsm1|state.S0                                     ; storeBCD:sB1|register[1]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.018      ; 3.375      ;
; -2.321 ; FSM:fsm1|state.S0                                     ; storeBCD:sB1|register[0]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.018      ; 3.375      ;
; -2.314 ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[3]   ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -2.727     ; 0.623      ;
; -2.313 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[5]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.361      ;
; -2.313 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[4]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.361      ;
; -2.313 ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[2]   ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -2.729     ; 0.620      ;
; -2.294 ; twoClockPulse:tC1|doublePulse[1]                      ; storeBCD:sB1|register[6]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.342      ;
; -2.291 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.000      ; 3.327      ;
; -2.288 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.000      ; 3.324      ;
; -2.276 ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[3]   ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -2.698     ; 0.614      ;
; -2.244 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[1] ; FSM:fsm1|state.S4                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.006     ; 3.274      ;
; -2.227 ; twoClockPulse:tC1|doublePulse[1]                      ; storeBCD:sB1|register[3]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.275      ;
; -2.218 ; twoClockPulse:tC1|doublePulse[1]                      ; storeBCD:sB1|register[1]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.266      ;
; -2.214 ; twoClockPulse:tC1|doublePulse[1]                      ; storeBCD:sB1|register[11]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.262      ;
; -2.208 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[12]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.002      ; 3.246      ;
; -2.206 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[0] ; recall:r1|ld_m                                          ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.878     ; 2.364      ;
; -2.197 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[12]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.002      ; 3.235      ;
; -2.183 ; twoClockPulse:tC1|doublePulse[1]                      ; storeBCD:sB1|register[7]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.231      ;
; -2.182 ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[1]   ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -2.730     ; 0.488      ;
; -2.178 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[4] ; FSM:fsm1|state.S4                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.004     ; 3.210      ;
; -2.177 ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[0]   ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -2.727     ; 0.486      ;
; -2.171 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[5]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 3.219      ;
+--------+-------------------------------------------------------+---------------------------------------------------------+---------------------------------------------------+---------------------------------------------------+--------------+------------+------------+


+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Setup: 'FSM:fsm1|state.S3'                                                                                                                                                                            ;
+--------+------------------------------------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+
; Slack  ; From Node                                            ; To Node                         ; Launch Clock                                      ; Latch Clock       ; Relationship ; Clock Skew ; Data Delay ;
+--------+------------------------------------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+
; -2.034 ; memoryManagement:calcultorMemory|bcdOutputMemory[4]  ; registerTransfer:rT1|storeB[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.358      ; 2.042      ;
; -1.933 ; memoryManagement:calcultorMemory|bcdOutputMemory[7]  ; registerTransfer:rT1|storeB[7]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.446      ; 1.911      ;
; -1.918 ; storeBCD:sB1|register[5]                             ; registerTransfer:rT1|storeB[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.360      ; 1.896      ;
; -1.909 ; storeBCD:sB1|register[2]                             ; registerTransfer:rT1|storeB[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.331      ; 1.875      ;
; -1.842 ; storeBCD:sB1|register[12]                            ; registerTransfer:rT1|storeB[12] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.343      ; 1.824      ;
; -1.839 ; memoryManagement:calcultorMemory|bcdOutputMemory[11] ; registerTransfer:rT1|storeB[11] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.473      ; 1.819      ;
; -1.826 ; storeBCD:sB1|register[7]                             ; registerTransfer:rT1|storeB[7]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.449      ; 1.807      ;
; -1.791 ; storeBCD:sB1|register[6]                             ; registerTransfer:rT1|storeB[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.359      ; 1.754      ;
; -1.778 ; storeBCD:sB1|register[4]                             ; registerTransfer:rT1|storeB[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.361      ; 1.789      ;
; -1.734 ; storeBCD:sB1|register[3]                             ; registerTransfer:rT1|storeB[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.340      ; 1.741      ;
; -1.727 ; memoryManagement:calcultorMemory|bcdOutputMemory[0]  ; registerTransfer:rT1|storeB[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.312      ; 1.699      ;
; -1.699 ; storeBCD:sB1|register[9]                             ; registerTransfer:rT1|storeB[9]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.336      ; 1.693      ;
; -1.637 ; memoryManagement:calcultorMemory|bcdOutputMemory[9]  ; registerTransfer:rT1|storeB[9]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.335      ; 1.630      ;
; -1.614 ; memoryManagement:calcultorMemory|bcdOutputMemory[3]  ; registerTransfer:rT1|storeB[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.340      ; 1.621      ;
; -1.574 ; storeBCD:sB1|register[10]                            ; registerTransfer:rT1|storeB[10] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.325      ; 1.549      ;
; -1.571 ; memoryManagement:calcultorMemory|bcdOutputMemory[6]  ; registerTransfer:rT1|storeB[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.356      ; 1.531      ;
; -1.566 ; storeBCD:sB1|register[0]                             ; registerTransfer:rT1|storeB[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.341      ; 1.567      ;
; -1.563 ; memoryManagement:calcultorMemory|bcdOutputMemory[5]  ; registerTransfer:rT1|storeB[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.357      ; 1.538      ;
; -1.540 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[8]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 1.223      ; 2.550      ;
; -1.536 ; memoryManagement:calcultorMemory|bcdOutputMemory[2]  ; registerTransfer:rT1|storeB[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.348      ; 1.519      ;
; -1.505 ; memoryManagement:calcultorMemory|bcdOutputMemory[10] ; registerTransfer:rT1|storeB[10] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.324      ; 1.479      ;
; -1.492 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 1.221      ; 2.348      ;
; -1.490 ; storeBCD:sB1|register[8]                             ; registerTransfer:rT1|storeB[8]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.336      ; 1.613      ;
; -1.448 ; memoryManagement:calcultorMemory|bcdOutputMemory[8]  ; registerTransfer:rT1|storeB[8]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.334      ; 1.569      ;
; -1.444 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 1.230      ; 2.341      ;
; -1.434 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 1.225      ; 2.466      ;
; -1.434 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[9]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 1.223      ; 2.315      ;
; -1.410 ; storeBCD:sB1|register[11]                            ; registerTransfer:rT1|storeB[11] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.479      ; 1.396      ;
; -1.367 ; memoryManagement:calcultorMemory|bcdOutputMemory[1]  ; registerTransfer:rT1|storeB[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.335      ; 1.509      ;
; -1.344 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 1.250      ; 2.212      ;
; -1.342 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[12] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 1.223      ; 2.204      ;
; -1.295 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[10] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 1.212      ; 2.157      ;
; -1.270 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 1.231      ; 2.161      ;
; -1.259 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 1.251      ; 2.160      ;
; -1.256 ; memoryManagement:calcultorMemory|bcdOutputMemory[12] ; registerTransfer:rT1|storeB[12] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.350      ; 1.245      ;
; -1.240 ; storeBCD:sB1|register[1]                             ; registerTransfer:rT1|storeB[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.335      ; 1.382      ;
; -1.157 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[11] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 1.369      ; 2.033      ;
; -1.073 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 1.249      ; 1.926      ;
; -0.925 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[7]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 1.339      ; 1.796      ;
+--------+------------------------------------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+


+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Setup: 'FSM:fsm1|state.S1'                                                                                                                                                 ;
+--------+---------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+
; Slack  ; From Node                 ; To Node                         ; Launch Clock                                      ; Latch Clock       ; Relationship ; Clock Skew ; Data Delay ;
+--------+---------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+
; -1.215 ; storeBCD:sB1|register[6]  ; registerTransfer:rT1|storeA[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; 0.019      ; 0.725      ;
; -1.214 ; storeBCD:sB1|register[8]  ; registerTransfer:rT1|storeA[8]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; 0.029      ; 0.730      ;
; -1.206 ; storeBCD:sB1|register[1]  ; registerTransfer:rT1|storeA[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; 0.000      ; 0.718      ;
; -1.203 ; storeBCD:sB1|register[11] ; registerTransfer:rT1|storeA[11] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; 0.021      ; 0.722      ;
; -1.196 ; storeBCD:sB1|register[5]  ; registerTransfer:rT1|storeA[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; 0.021      ; 0.713      ;
; -1.181 ; storeBCD:sB1|register[4]  ; registerTransfer:rT1|storeA[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; 0.021      ; 0.722      ;
; -1.176 ; storeBCD:sB1|register[12] ; registerTransfer:rT1|storeA[12] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; 0.004      ; 0.723      ;
; -1.171 ; storeBCD:sB1|register[10] ; registerTransfer:rT1|storeA[10] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; 0.027      ; 0.734      ;
; -1.170 ; storeBCD:sB1|register[9]  ; registerTransfer:rT1|storeA[9]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; 0.026      ; 0.713      ;
; -1.168 ; storeBCD:sB1|register[0]  ; registerTransfer:rT1|storeA[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; 0.021      ; 0.728      ;
; -1.161 ; storeBCD:sB1|register[3]  ; registerTransfer:rT1|storeA[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; 0.022      ; 0.726      ;
; -1.157 ; storeBCD:sB1|register[2]  ; registerTransfer:rT1|storeA[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; 0.019      ; 0.729      ;
; -1.126 ; storeBCD:sB1|register[7]  ; registerTransfer:rT1|storeA[7]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; 0.023      ; 0.702      ;
+--------+---------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+


+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Setup: 'inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4]'                                                                                                                                                                            ;
+--------+---------------------------------------------------------+------------------------------+---------------------------------------------------+---------------------------------------------------------+--------------+------------+------------+
; Slack  ; From Node                                               ; To Node                      ; Launch Clock                                      ; Latch Clock                                             ; Relationship ; Clock Skew ; Data Delay ;
+--------+---------------------------------------------------------+------------------------------+---------------------------------------------------+---------------------------------------------------------+--------------+------------+------------+
; -0.155 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[2] ; storeOperator:sO1|storeOp[2] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; 1.000        ; -0.267     ; 0.924      ;
; -0.046 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[1] ; storeOperator:sO1|storeOp[1] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; 1.000        ; -0.267     ; 0.815      ;
; -0.017 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[0] ; storeOperator:sO1|storeOp[0] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; 1.000        ; -0.267     ; 0.786      ;
+--------+---------------------------------------------------------+------------------------------+---------------------------------------------------+---------------------------------------------------------+--------------+------------+------------+


+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Setup: 'ROW[0]'                                                                                                                                                                                                                   ;
+-------+-------------------------------------------------------------------+-------------------------------------------------------+---------------------------------------------------+-------------+--------------+------------+------------+
; Slack ; From Node                                                         ; To Node                                               ; Launch Clock                                      ; Latch Clock ; Relationship ; Clock Skew ; Data Delay ;
+-------+-------------------------------------------------------------------+-------------------------------------------------------+---------------------------------------------------+-------------+--------------+------------+------------+
; 0.243 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.684      ; 2.453      ;
; 0.282 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 4.044      ; 3.274      ;
; 0.416 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 5.508      ; 4.884      ;
; 0.417 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 5.500      ; 4.618      ;
; 0.438 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 4.135      ; 3.361      ;
; 0.490 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.684      ; 2.206      ;
; 0.501 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 4.195      ; 3.367      ;
; 0.598 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.775      ; 2.341      ;
; 0.661 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.835      ; 2.347      ;
; 0.661 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 5.507      ; 4.521      ;
; 0.700 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.684      ; 1.996      ;
; 0.764 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.148      ; 3.676      ;
; 0.778 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.775      ; 2.161      ;
; 0.782 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 4.044      ; 3.274      ;
; 0.823 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.140      ; 3.352      ;
; 0.831 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.147      ; 3.491      ;
; 0.871 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 5.510      ; 4.316      ;
; 0.916 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 5.508      ; 4.884      ;
; 0.917 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 5.500      ; 4.618      ;
; 0.930 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 5.479      ; 4.375      ;
; 0.938 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 4.135      ; 3.361      ;
; 0.948 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 5.519      ; 4.406      ;
; 0.986 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 5.509      ; 4.345      ;
; 1.001 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 4.195      ; 3.367      ;
; 1.004 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 5.384      ; 4.208      ;
; 1.008 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.500        ; 3.682      ; 2.347      ;
; 1.024 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.775      ; 1.915      ;
; 1.030 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.684      ; 1.666      ;
; 1.047 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.140      ; 3.128      ;
; 1.070 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.140      ; 3.105      ;
; 1.076 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.147      ; 3.246      ;
; 1.126 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.149      ; 3.345      ;
; 1.142 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.148      ; 3.298      ;
; 1.161 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 5.507      ; 4.521      ;
; 1.199 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.149      ; 3.272      ;
; 1.225 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.140      ; 2.950      ;
; 1.228 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.148      ; 3.212      ;
; 1.264 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.775      ; 1.675      ;
; 1.290 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.500        ; 3.967      ; 2.341      ;
; 1.296 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.150      ; 3.031      ;
; 1.313 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.835      ; 1.695      ;
; 1.318 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.835      ; 1.690      ;
; 1.331 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.835      ; 1.677      ;
; 1.348 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 5.042      ; 3.367      ;
; 1.371 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 5.510      ; 4.316      ;
; 1.377 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.149      ; 3.094      ;
; 1.408 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.119      ; 3.037      ;
; 1.430 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 5.479      ; 4.375      ;
; 1.448 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 5.519      ; 4.406      ;
; 1.455 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.119      ; 2.990      ;
; 1.470 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.500        ; 3.967      ; 2.161      ;
; 1.486 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 5.509      ; 4.345      ;
; 1.493 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.150      ; 2.834      ;
; 1.495 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.147      ; 2.827      ;
; 1.502 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.149      ; 2.969      ;
; 1.504 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 5.384      ; 4.208      ;
; 1.579 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.119      ; 2.866      ;
; 1.630 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 5.327      ; 3.361      ;
; 1.656 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.150      ; 2.671      ;
; 1.660 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.500        ; 3.682      ; 1.695      ;
; 1.665 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.500        ; 3.682      ; 1.690      ;
; 1.678 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.500        ; 3.682      ; 1.677      ;
; 1.716 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.500        ; 3.967      ; 1.915      ;
; 1.732 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.024      ; 2.620      ;
; 1.756 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.150      ; 2.571      ;
; 1.848 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 5.042      ; 3.367      ;
; 1.859 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.024      ; 2.493      ;
; 1.905 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.147      ; 2.417      ;
; 1.956 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.500        ; 3.967      ; 1.675      ;
; 1.979 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.024      ; 2.373      ;
; 2.000 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.159      ; 2.494      ;
; 2.062 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.119      ; 2.383      ;
; 2.105 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.148      ; 2.335      ;
; 2.130 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 5.327      ; 3.361      ;
; 2.132 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.024      ; 2.220      ;
; 2.247 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.159      ; 2.247      ;
; 2.404 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.159      ; 2.090      ;
; 2.544 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 4.159      ; 1.950      ;
+-------+-------------------------------------------------------------------+-------------------------------------------------------+---------------------------------------------------+-------------+--------------+------------+------------+


+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Hold: 'inputManager:iM1|clockDivider:clock500Hz|newClock'                                                                                                                                                                                ;
+--------+---------------------------------------------------------+---------------------------+---------------------------------------------------------+---------------------------------------------------+--------------+------------+------------+
; Slack  ; From Node                                               ; To Node                   ; Launch Clock                                            ; Latch Clock                                       ; Relationship ; Clock Skew ; Data Delay ;
+--------+---------------------------------------------------------+---------------------------+---------------------------------------------------------+---------------------------------------------------+--------------+------------+------------+
; -3.156 ; FSM:fsm1|state.S3                                       ; FSM:fsm1|state.S3         ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.297      ; 0.657      ;
; -3.156 ; FSM:fsm1|state.S2                                       ; FSM:fsm1|state.S2         ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.297      ; 0.657      ;
; -3.156 ; FSM:fsm1|state.S1                                       ; FSM:fsm1|state.S1         ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.297      ; 0.657      ;
; -2.656 ; FSM:fsm1|state.S3                                       ; FSM:fsm1|state.S3         ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.297      ; 0.657      ;
; -2.656 ; FSM:fsm1|state.S2                                       ; FSM:fsm1|state.S2         ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.297      ; 0.657      ;
; -2.656 ; FSM:fsm1|state.S1                                       ; FSM:fsm1|state.S1         ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.297      ; 0.657      ;
; -2.124 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[12] ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.305      ; 1.697      ;
; -2.018 ; FSM:fsm1|state.S1                                       ; toggle:t1|toggledOutputB  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.305      ; 1.803      ;
; -2.014 ; FSM:fsm1|state.S1                                       ; toggle:t1|toggledOutputA  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.305      ; 1.807      ;
; -1.870 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[6]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 1.961      ;
; -1.867 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[2]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 1.964      ;
; -1.865 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[5]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 1.966      ;
; -1.865 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[4]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 1.966      ;
; -1.709 ; FSM:fsm1|state.S2                                       ; FSM:fsm1|state.S1         ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.297      ; 2.104      ;
; -1.664 ; FSM:fsm1|state.S3                                       ; FSM:fsm1|state.S4         ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.297      ; 2.149      ;
; -1.624 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[12] ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.305      ; 1.697      ;
; -1.547 ; FSM:fsm1|state.S3                                       ; FSM:fsm1|state.S1         ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.297      ; 2.266      ;
; -1.518 ; FSM:fsm1|state.S1                                       ; toggle:t1|toggledOutputB  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.305      ; 1.803      ;
; -1.514 ; FSM:fsm1|state.S1                                       ; toggle:t1|toggledOutputA  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.305      ; 1.807      ;
; -1.492 ; FSM:fsm1|state.S2                                       ; FSM:fsm1|state.S3         ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.297      ; 2.321      ;
; -1.433 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[3]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 2.398      ;
; -1.433 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[0]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 2.398      ;
; -1.432 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[7]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 2.399      ;
; -1.387 ; FSM:fsm1|state.S3                                       ; FSM:fsm1|state.S2         ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.297      ; 2.426      ;
; -1.379 ; FSM:fsm1|state.S2                                       ; FSM:fsm1|state.S4         ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.297      ; 2.434      ;
; -1.370 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[6]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.315      ; 1.961      ;
; -1.367 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[2]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.315      ; 1.964      ;
; -1.365 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[5]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.315      ; 1.966      ;
; -1.365 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[4]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.315      ; 1.966      ;
; -1.363 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; FSM:fsm1|state.S1         ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.297      ; 2.450      ;
; -1.354 ; FSM:fsm1|state.S1                                       ; FSM:fsm1|state.S2         ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.297      ; 2.459      ;
; -1.311 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[1]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 2.520      ;
; -1.290 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[6]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 2.541      ;
; -1.287 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[2]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 2.544      ;
; -1.285 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[5]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 2.546      ;
; -1.285 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[4]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 2.546      ;
; -1.266 ; FSM:fsm1|state.S3                                       ; toggle:t1|toggledOutputB  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.305      ; 2.555      ;
; -1.239 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[10] ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.312      ; 2.589      ;
; -1.239 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[8]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.312      ; 2.589      ;
; -1.238 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[9]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.312      ; 2.590      ;
; -1.232 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[6]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 2.599      ;
; -1.229 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[2]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 2.602      ;
; -1.227 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[5]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 2.604      ;
; -1.227 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[4]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 2.604      ;
; -1.219 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[12] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.305      ; 2.602      ;
; -1.209 ; FSM:fsm1|state.S2                                       ; FSM:fsm1|state.S1         ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.297      ; 2.104      ;
; -1.202 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[12] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.305      ; 2.619      ;
; -1.168 ; FSM:fsm1|state.S1                                       ; FSM:fsm1|state.S3         ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.297      ; 2.645      ;
; -1.166 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[10] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.312      ; 2.662      ;
; -1.166 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[8]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.312      ; 2.662      ;
; -1.165 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[9]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.312      ; 2.663      ;
; -1.164 ; FSM:fsm1|state.S3                                       ; FSM:fsm1|state.S4         ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.297      ; 2.149      ;
; -1.160 ; FSM:fsm1|state.S1                                       ; FSM:fsm1|state.S4         ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.297      ; 2.653      ;
; -1.149 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; FSM:fsm1|state.S2         ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.297      ; 2.664      ;
; -1.108 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[10] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.312      ; 2.720      ;
; -1.108 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[8]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.312      ; 2.720      ;
; -1.107 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[9]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.312      ; 2.721      ;
; -1.097 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; FSM:fsm1|state.S4         ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.297      ; 2.716      ;
; -1.047 ; FSM:fsm1|state.S3                                       ; FSM:fsm1|state.S1         ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.297      ; 2.266      ;
; -0.992 ; FSM:fsm1|state.S2                                       ; FSM:fsm1|state.S3         ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.297      ; 2.321      ;
; -0.962 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; FSM:fsm1|state.S3         ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.297      ; 2.851      ;
; -0.933 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[3]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.315      ; 2.398      ;
; -0.933 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[0]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.315      ; 2.398      ;
; -0.932 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[7]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.315      ; 2.399      ;
; -0.887 ; FSM:fsm1|state.S3                                       ; FSM:fsm1|state.S2         ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.297      ; 2.426      ;
; -0.879 ; FSM:fsm1|state.S2                                       ; FSM:fsm1|state.S4         ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.297      ; 2.434      ;
; -0.863 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; FSM:fsm1|state.S1         ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.297      ; 2.450      ;
; -0.854 ; FSM:fsm1|state.S1                                       ; FSM:fsm1|state.S2         ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.297      ; 2.459      ;
; -0.853 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[3]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 2.978      ;
; -0.853 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[0]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 2.978      ;
; -0.852 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[7]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 2.979      ;
; -0.811 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[1]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.315      ; 2.520      ;
; -0.795 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[3]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 3.036      ;
; -0.795 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[0]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 3.036      ;
; -0.794 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[7]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 3.037      ;
; -0.790 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[6]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.315      ; 2.541      ;
; -0.787 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[2]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.315      ; 2.544      ;
; -0.785 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[5]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.315      ; 2.546      ;
; -0.785 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[4]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.315      ; 2.546      ;
; -0.775 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[11] ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 3.056      ;
; -0.766 ; FSM:fsm1|state.S3                                       ; toggle:t1|toggledOutputB  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.305      ; 2.555      ;
; -0.739 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[10] ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.312      ; 2.589      ;
; -0.739 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[8]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.312      ; 2.589      ;
; -0.738 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[9]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.312      ; 2.590      ;
; -0.732 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[6]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.315      ; 2.599      ;
; -0.731 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[1]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 3.100      ;
; -0.729 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[2]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.315      ; 2.602      ;
; -0.727 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[5]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.315      ; 2.604      ;
; -0.727 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[4]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.315      ; 2.604      ;
; -0.719 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[12] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.305      ; 2.602      ;
; -0.702 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[11] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 3.129      ;
; -0.702 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[12] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.305      ; 2.619      ;
; -0.673 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[1]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 3.158      ;
; -0.668 ; FSM:fsm1|state.S1                                       ; FSM:fsm1|state.S3         ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.297      ; 2.645      ;
; -0.666 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[10] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.312      ; 2.662      ;
; -0.666 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[8]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.312      ; 2.662      ;
; -0.665 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[9]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.312      ; 2.663      ;
; -0.660 ; FSM:fsm1|state.S1                                       ; FSM:fsm1|state.S4         ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.297      ; 2.653      ;
; -0.649 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; FSM:fsm1|state.S2         ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 3.297      ; 2.664      ;
; -0.644 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[11] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 3.315      ; 3.187      ;
+--------+---------------------------------------------------------+---------------------------+---------------------------------------------------------+---------------------------------------------------+--------------+------------+------------+


+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Hold: 'ROW[0]'                                                                                                                                                                                                                     ;
+--------+-------------------------------------------------------------------+-------------------------------------------------------+---------------------------------------------------+-------------+--------------+------------+------------+
; Slack  ; From Node                                                         ; To Node                                               ; Launch Clock                                      ; Latch Clock ; Relationship ; Clock Skew ; Data Delay ;
+--------+-------------------------------------------------------------------+-------------------------------------------------------+---------------------------------------------------+-------------+--------------+------------+------------+
; -2.641 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.591      ; 1.950      ;
; -2.501 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.591      ; 2.090      ;
; -2.477 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.154      ; 1.677      ;
; -2.464 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.154      ; 1.690      ;
; -2.459 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.154      ; 1.695      ;
; -2.358 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.654      ; 2.296      ;
; -2.344 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.591      ; 2.247      ;
; -2.318 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.653      ; 2.335      ;
; -2.241 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.624      ; 2.383      ;
; -2.236 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.456      ; 2.220      ;
; -2.235 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.652      ; 2.417      ;
; -2.147 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 5.514      ; 3.367      ;
; -2.098 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.652      ; 2.554      ;
; -2.097 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.591      ; 2.494      ;
; -2.084 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.655      ; 2.571      ;
; -2.083 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.456      ; 2.373      ;
; -1.984 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.655      ; 2.671      ;
; -1.971 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 3.646      ; 1.675      ;
; -1.966 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 5.327      ; 3.361      ;
; -1.963 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.456      ; 2.493      ;
; -1.878 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 3.544      ; 1.666      ;
; -1.836 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.456      ; 2.620      ;
; -1.821 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.655      ; 2.834      ;
; -1.807 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.154      ; 2.347      ;
; -1.792 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; -0.500       ; 3.967      ; 1.675      ;
; -1.788 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.653      ; 2.865      ;
; -1.779 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.654      ; 2.875      ;
; -1.769 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.652      ; 2.883      ;
; -1.758 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.624      ; 2.866      ;
; -1.731 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 3.646      ; 1.915      ;
; -1.728 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 6.015      ; 4.287      ;
; -1.711 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.653      ; 2.942      ;
; -1.675 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 5.042      ; 3.367      ;
; -1.671 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 6.012      ; 4.341      ;
; -1.669 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 6.014      ; 4.345      ;
; -1.656 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.653      ; 2.997      ;
; -1.653 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.655      ; 3.002      ;
; -1.647 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 5.514      ; 3.367      ;
; -1.645 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 5.006      ; 3.361      ;
; -1.634 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.624      ; 2.990      ;
; -1.630 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 4.904      ; 3.274      ;
; -1.629 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.654      ; 3.025      ;
; -1.622 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.572      ; 2.950      ;
; -1.609 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 5.984      ; 4.375      ;
; -1.608 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 5.816      ; 4.208      ;
; -1.587 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.624      ; 3.037      ;
; -1.552 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; -0.500       ; 3.967      ; 1.915      ;
; -1.548 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 3.544      ; 1.996      ;
; -1.545 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 5.951      ; 4.406      ;
; -1.522 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.652      ; 3.130      ;
; -1.505 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; -0.500       ; 3.682      ; 1.677      ;
; -1.492 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; -0.500       ; 3.682      ; 1.690      ;
; -1.487 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; -0.500       ; 3.682      ; 1.695      ;
; -1.485 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 3.646      ; 2.161      ;
; -1.467 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.572      ; 3.105      ;
; -1.466 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 5.327      ; 3.361      ;
; -1.444 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.572      ; 3.128      ;
; -1.431 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 6.013      ; 4.582      ;
; -1.338 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 3.544      ; 2.206      ;
; -1.314 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 5.932      ; 4.618      ;
; -1.309 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.654      ; 3.345      ;
; -1.306 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; -0.500       ; 3.967      ; 2.161      ;
; -1.305 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 3.646      ; 2.341      ;
; -1.228 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 6.015      ; 4.287      ;
; -1.220 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 4.572      ; 3.352      ;
; -1.175 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 5.042      ; 3.367      ;
; -1.171 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 6.012      ; 4.341      ;
; -1.169 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 6.014      ; 4.345      ;
; -1.145 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 5.006      ; 3.361      ;
; -1.130 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 4.904      ; 3.274      ;
; -1.126 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; -0.500       ; 3.967      ; 2.341      ;
; -1.109 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 5.984      ; 4.375      ;
; -1.108 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 5.816      ; 4.208      ;
; -1.091 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 3.544      ; 2.453      ;
; -1.045 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 5.951      ; 4.406      ;
; -0.931 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 6.013      ; 4.582      ;
; -0.835 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; -0.500       ; 3.682      ; 2.347      ;
; -0.814 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 5.932      ; 4.618      ;
+--------+-------------------------------------------------------------------+-------------------------------------------------------+---------------------------------------------------+-------------+--------------+------------+------------+


+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Hold: 'CLOCK_50'                                                                                                                                                                                                     ;
+--------+------------------------------------------------------+------------------------------------------------------+---------------------------------------------------+-------------+--------------+------------+------------+
; Slack  ; From Node                                            ; To Node                                              ; Launch Clock                                      ; Latch Clock ; Relationship ; Clock Skew ; Data Delay ;
+--------+------------------------------------------------------+------------------------------------------------------+---------------------------------------------------+-------------+--------------+------------+------------+
; -2.519 ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; CLOCK_50    ; 0.000        ; 2.660      ; 0.657      ;
; -2.019 ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; CLOCK_50    ; -0.500       ; 2.660      ; 0.657      ;
; 0.788  ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.054      ;
; 0.794  ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.060      ;
; 0.795  ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.061      ;
; 0.795  ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.061      ;
; 0.795  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.061      ;
; 0.798  ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.064      ;
; 0.799  ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.065      ;
; 0.799  ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.065      ;
; 0.799  ; inputManager:iM1|clockDivider:clock500Hz|counter[24] ; inputManager:iM1|clockDivider:clock500Hz|counter[24] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.065      ;
; 0.831  ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.097      ;
; 0.831  ; inputManager:iM1|clockDivider:clock500Hz|counter[23] ; inputManager:iM1|clockDivider:clock500Hz|counter[23] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.097      ;
; 0.831  ; inputManager:iM1|clockDivider:clock500Hz|counter[25] ; inputManager:iM1|clockDivider:clock500Hz|counter[25] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.097      ;
; 0.832  ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.098      ;
; 0.832  ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.098      ;
; 0.970  ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.236      ;
; 0.971  ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.237      ;
; 0.972  ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.238      ;
; 0.974  ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.240      ;
; 0.977  ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.243      ;
; 1.004  ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.270      ;
; 1.171  ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.437      ;
; 1.177  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.443      ;
; 1.178  ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.444      ;
; 1.182  ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ; inputManager:iM1|clockDivider:clock500Hz|counter[23] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.448      ;
; 1.182  ; inputManager:iM1|clockDivider:clock500Hz|counter[24] ; inputManager:iM1|clockDivider:clock500Hz|counter[25] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.448      ;
; 1.182  ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.448      ;
; 1.217  ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.483      ;
; 1.217  ; inputManager:iM1|clockDivider:clock500Hz|counter[23] ; inputManager:iM1|clockDivider:clock500Hz|counter[24] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.483      ;
; 1.218  ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.484      ;
; 1.218  ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.484      ;
; 1.248  ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.514      ;
; 1.249  ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.515      ;
; 1.253  ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.519      ;
; 1.253  ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ; inputManager:iM1|clockDivider:clock500Hz|counter[24] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.519      ;
; 1.288  ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.554      ;
; 1.288  ; inputManager:iM1|clockDivider:clock500Hz|counter[23] ; inputManager:iM1|clockDivider:clock500Hz|counter[25] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.554      ;
; 1.289  ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.555      ;
; 1.319  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.585      ;
; 1.320  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.586      ;
; 1.320  ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.586      ;
; 1.323  ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.589      ;
; 1.324  ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.590      ;
; 1.324  ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ; inputManager:iM1|clockDivider:clock500Hz|counter[25] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.590      ;
; 1.330  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; -0.001     ; 1.595      ;
; 1.339  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.605      ;
; 1.341  ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.607      ;
; 1.355  ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.621      ;
; 1.357  ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.623      ;
; 1.359  ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.625      ;
; 1.360  ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.626      ;
; 1.384  ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.650      ;
; 1.390  ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.656      ;
; 1.391  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.657      ;
; 1.393  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; -0.001     ; 1.658      ;
; 1.394  ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.660      ;
; 1.401  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; -0.001     ; 1.666      ;
; 1.428  ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.694      ;
; 1.430  ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.696      ;
; 1.431  ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ; inputManager:iM1|clockDivider:clock500Hz|counter[23] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.697      ;
; 1.445  ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; -0.008     ; 1.703      ;
; 1.447  ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.713      ;
; 1.448  ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.714      ;
; 1.455  ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.721      ;
; 1.461  ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.727      ;
; 1.464  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; -0.001     ; 1.729      ;
; 1.465  ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.731      ;
; 1.472  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; -0.001     ; 1.737      ;
; 1.483  ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.749      ;
; 1.483  ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.749      ;
; 1.502  ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ; inputManager:iM1|clockDivider:clock500Hz|counter[24] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.768      ;
; 1.514  ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.780      ;
; 1.516  ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; -0.008     ; 1.774      ;
; 1.518  ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.784      ;
; 1.519  ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.785      ;
; 1.526  ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.792      ;
; 1.532  ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.798      ;
; 1.532  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.798      ;
; 1.535  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; -0.001     ; 1.800      ;
; 1.536  ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.802      ;
; 1.543  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; -0.001     ; 1.808      ;
; 1.544  ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; -0.008     ; 1.802      ;
; 1.545  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; -0.008     ; 1.803      ;
; 1.550  ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.816      ;
; 1.554  ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.820      ;
; 1.570  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.007      ; 1.843      ;
; 1.573  ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ; inputManager:iM1|clockDivider:clock500Hz|counter[25] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.839      ;
; 1.585  ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.851      ;
; 1.587  ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.853      ;
; 1.589  ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; inputManager:iM1|clockDivider:clock500Hz|counter[23] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.855      ;
; 1.590  ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.856      ;
; 1.597  ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.863      ;
; 1.603  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.869      ;
; 1.606  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; -0.001     ; 1.871      ;
; 1.615  ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; -0.008     ; 1.873      ;
; 1.616  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; -0.008     ; 1.874      ;
; 1.625  ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; inputManager:iM1|clockDivider:clock500Hz|counter[23] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.891      ;
; 1.628  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.007      ; 1.901      ;
; 1.656  ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; inputManager:iM1|clockDivider:clock500Hz|counter[23] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 1.922      ;
+--------+------------------------------------------------------+------------------------------------------------------+---------------------------------------------------+-------------+--------------+------------+------------+


+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Hold: 'FSM:fsm1|state.S2'                                                                                                                                                         ;
+--------+---------------------------------+-------------------------------+------------------------------------------------------+-------------------+--------------+------------+------------+
; Slack  ; From Node                       ; To Node                       ; Launch Clock                                         ; Latch Clock       ; Relationship ; Clock Skew ; Data Delay ;
+--------+---------------------------------+-------------------------------+------------------------------------------------------+-------------------+--------------+------------+------------+
; -1.202 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[11] ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 3.343      ; 2.391      ;
; -1.187 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[10] ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 3.329      ; 2.392      ;
; -1.161 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[9]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 3.329      ; 2.418      ;
; -1.062 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[4]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 3.335      ; 2.523      ;
; -1.002 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[7]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 3.335      ; 2.583      ;
; -0.990 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[2]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 3.299      ; 2.559      ;
; -0.959 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[1]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 3.316      ; 2.607      ;
; -0.947 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[8]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 3.314      ; 2.617      ;
; -0.852 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[3]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 3.315      ; 2.713      ;
; -0.702 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[11] ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 3.343      ; 2.391      ;
; -0.687 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[10] ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 3.329      ; 2.392      ;
; -0.661 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[9]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 3.329      ; 2.418      ;
; -0.574 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[0]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 3.332      ; 3.008      ;
; -0.562 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[4]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 3.335      ; 2.523      ;
; -0.513 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[28] ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 3.342      ; 3.079      ;
; -0.502 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[7]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 3.335      ; 2.583      ;
; -0.492 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[6]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 3.332      ; 3.090      ;
; -0.490 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[2]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 3.299      ; 2.559      ;
; -0.459 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[1]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 3.316      ; 2.607      ;
; -0.447 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[8]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 3.314      ; 2.617      ;
; -0.352 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[3]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 3.315      ; 2.713      ;
; -0.261 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[5]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 3.333      ; 3.322      ;
; -0.074 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[0]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 3.332      ; 3.008      ;
; -0.013 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[28] ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 3.342      ; 3.079      ;
; 0.008  ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[6]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 3.332      ; 3.090      ;
; 0.239  ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[5]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 3.333      ; 3.322      ;
; 1.482  ; registerTransfer:rT1|storeA[9]  ; displayMUX:dMUX1|register[9]  ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.009     ; 0.973      ;
; 1.586  ; registerTransfer:rT1|storeA[10] ; displayMUX:dMUX1|register[10] ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.010     ; 1.076      ;
; 1.712  ; registerTransfer:rT1|storeA[1]  ; displayMUX:dMUX1|register[1]  ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; 0.001      ; 1.213      ;
; 1.775  ; ALU:ALU1|answer[0]              ; displayMUX:dMUX1|register[0]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.556      ; 2.331      ;
; 1.851  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; 0.002      ; 1.853      ;
; 1.911  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; 0.038      ; 1.949      ;
; 1.929  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; 0.038      ; 1.967      ;
; 1.932  ; registerTransfer:rT1|storeA[8]  ; displayMUX:dMUX1|register[8]  ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.027     ; 1.405      ;
; 1.956  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; 0.035      ; 1.991      ;
; 1.958  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; 0.036      ; 1.994      ;
; 2.034  ; registerTransfer:rT1|storeA[3]  ; displayMUX:dMUX1|register[3]  ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.022     ; 1.512      ;
; 2.149  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; 0.018      ; 2.167      ;
; 2.181  ; registerTransfer:rT1|storeA[4]  ; displayMUX:dMUX1|register[4]  ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.001     ; 1.680      ;
; 2.199  ; registerTransfer:rT1|storeB[8]  ; displayMUX:dMUX1|register[8]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.334     ; 1.365      ;
; 2.243  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; 0.035      ; 2.278      ;
; 2.244  ; registerTransfer:rT1|storeA[2]  ; displayMUX:dMUX1|register[2]  ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.035     ; 1.709      ;
; 2.284  ; registerTransfer:rT1|storeA[0]  ; displayMUX:dMUX1|register[0]  ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.004     ; 1.780      ;
; 2.322  ; registerTransfer:rT1|storeB[1]  ; displayMUX:dMUX1|register[1]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.334     ; 1.488      ;
; 2.354  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[15] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; 0.028      ; 2.382      ;
; 2.360  ; registerTransfer:rT1|storeB[2]  ; displayMUX:dMUX1|register[2]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.347     ; 1.513      ;
; 2.407  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[28] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; 0.045      ; 2.452      ;
; 2.410  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[10] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; 0.032      ; 2.442      ;
; 2.421  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; 0.019      ; 2.440      ;
; 2.434  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; 0.032      ; 2.466      ;
; 2.471  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[11] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; 0.046      ; 2.517      ;
; 2.482  ; registerTransfer:rT1|storeB[10] ; displayMUX:dMUX1|register[10] ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.308     ; 1.674      ;
; 2.487  ; registerTransfer:rT1|storeA[11] ; displayMUX:dMUX1|register[11] ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; 0.007      ; 1.994      ;
; 2.533  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[22] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; 0.060      ; 2.593      ;
; 2.538  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[21] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; 0.060      ; 2.598      ;
; 2.582  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[23] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; 0.061      ; 2.643      ;
; 2.598  ; registerTransfer:rT1|storeA[7]  ; displayMUX:dMUX1|register[7]  ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.003     ; 2.095      ;
; 2.610  ; registerTransfer:rT1|storeA[6]  ; displayMUX:dMUX1|register[6]  ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.002     ; 2.108      ;
; 2.621  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[13] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.105     ; 2.516      ;
; 2.658  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[16] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; 0.020      ; 2.678      ;
; 2.723  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[14] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.120     ; 2.603      ;
; 2.730  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[12] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.123     ; 2.607      ;
; 2.745  ; registerTransfer:rT1|storeB[0]  ; displayMUX:dMUX1|register[0]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.324     ; 1.921      ;
; 2.767  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; 0.017      ; 2.784      ;
; 2.804  ; ALU:ALU1|answer[20]             ; displayMUX:dMUX1|register[28] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.536      ; 3.340      ;
; 2.808  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[18] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.092     ; 2.716      ;
; 2.810  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[17] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.091     ; 2.719      ;
; 2.810  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[19] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.093     ; 2.717      ;
; 2.816  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[20] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.089     ; 2.727      ;
; 2.835  ; registerTransfer:rT1|storeA[12] ; displayMUX:dMUX1|register[28] ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; 0.033      ; 2.368      ;
; 2.856  ; registerTransfer:rT1|storeB[9]  ; displayMUX:dMUX1|register[9]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.319     ; 2.037      ;
; 2.902  ; registerTransfer:rT1|storeB[3]  ; displayMUX:dMUX1|register[3]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.340     ; 2.062      ;
; 2.902  ; registerTransfer:rT1|storeA[5]  ; displayMUX:dMUX1|register[5]  ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.003     ; 2.399      ;
; 3.036  ; registerTransfer:rT1|storeB[4]  ; displayMUX:dMUX1|register[4]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.341     ; 2.195      ;
; 3.265  ; ALU:ALU1|answer[2]              ; displayMUX:dMUX1|register[2]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.523      ; 3.788      ;
; 3.297  ; registerTransfer:rT1|storeB[11] ; displayMUX:dMUX1|register[11] ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.451     ; 2.346      ;
; 3.367  ; ALU:ALU1|answer[1]              ; displayMUX:dMUX1|register[1]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.540      ; 3.907      ;
; 3.421  ; registerTransfer:rT1|storeB[6]  ; displayMUX:dMUX1|register[6]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.342     ; 2.579      ;
; 3.458  ; registerTransfer:rT1|storeB[12] ; displayMUX:dMUX1|register[28] ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.306     ; 2.652      ;
; 3.552  ; registerTransfer:rT1|storeB[7]  ; displayMUX:dMUX1|register[7]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.429     ; 2.623      ;
; 3.559  ; registerTransfer:rT1|storeB[5]  ; displayMUX:dMUX1|register[5]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.342     ; 2.717      ;
; 3.717  ; ALU:ALU1|answer[3]              ; displayMUX:dMUX1|register[3]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.539      ; 4.256      ;
; 3.770  ; ALU:ALU1|answer[20]             ; displayMUX:dMUX1|register[3]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.509      ; 4.279      ;
; 3.828  ; ALU:ALU1|answer[1]              ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.559      ; 4.387      ;
; 3.852  ; ALU:ALU1|answer[20]             ; displayMUX:dMUX1|register[2]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.493      ; 4.345      ;
; 3.875  ; ALU:ALU1|answer[20]             ; displayMUX:dMUX1|register[1]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.510      ; 4.385      ;
; 4.081  ; ALU:ALU1|answer[2]              ; displayMUX:dMUX1|register[3]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.539      ; 4.620      ;
; 4.221  ; ALU:ALU1|answer[2]              ; displayMUX:dMUX1|register[1]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.540      ; 4.761      ;
; 4.263  ; ALU:ALU1|answer[20]             ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.529      ; 4.792      ;
; 4.339  ; ALU:ALU1|answer[0]              ; displayMUX:dMUX1|register[1]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.540      ; 4.879      ;
; 4.376  ; ALU:ALU1|answer[1]              ; displayMUX:dMUX1|register[2]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.523      ; 4.899      ;
; 4.393  ; ALU:ALU1|answer[1]              ; displayMUX:dMUX1|register[3]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.539      ; 4.932      ;
; 4.650  ; ALU:ALU1|answer[2]              ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.559      ; 5.209      ;
; 4.824  ; ALU:ALU1|answer[20]             ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.508      ; 5.332      ;
; 4.848  ; ALU:ALU1|answer[0]              ; displayMUX:dMUX1|register[2]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.523      ; 5.371      ;
; 5.016  ; ALU:ALU1|answer[0]              ; displayMUX:dMUX1|register[3]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.539      ; 5.555      ;
; 5.039  ; ALU:ALU1|answer[2]              ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.538      ; 5.577      ;
; 5.077  ; ALU:ALU1|answer[0]              ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.559      ; 5.636      ;
; 5.369  ; ALU:ALU1|answer[3]              ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.559      ; 5.928      ;
; 5.435  ; ALU:ALU1|answer[20]             ; displayMUX:dMUX1|register[23] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.552      ; 5.987      ;
+--------+---------------------------------+-------------------------------+------------------------------------------------------+-------------------+--------------+------------+------------+


+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Hold: 'inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4]'                                                                                                                                                                            ;
+-------+---------------------------------------------------------+------------------------------+---------------------------------------------------+---------------------------------------------------------+--------------+------------+------------+
; Slack ; From Node                                               ; To Node                      ; Launch Clock                                      ; Latch Clock                                             ; Relationship ; Clock Skew ; Data Delay ;
+-------+---------------------------------------------------------+------------------------------+---------------------------------------------------+---------------------------------------------------------+--------------+------------+------------+
; 0.787 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[0] ; storeOperator:sO1|storeOp[0] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; 0.000        ; -0.267     ; 0.786      ;
; 0.816 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[1] ; storeOperator:sO1|storeOp[1] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; 0.000        ; -0.267     ; 0.815      ;
; 0.925 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[2] ; storeOperator:sO1|storeOp[2] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; 0.000        ; -0.267     ; 0.924      ;
+-------+---------------------------------------------------------+------------------------------+---------------------------------------------------+---------------------------------------------------------+--------------+------------+------------+


+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Hold: 'FSM:fsm1|state.S3'                                                                                                                                                                            ;
+-------+------------------------------------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+
; Slack ; From Node                                            ; To Node                         ; Launch Clock                                      ; Latch Clock       ; Relationship ; Clock Skew ; Data Delay ;
+-------+------------------------------------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+
; 0.957 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[7]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 1.339      ; 1.796      ;
; 1.164 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[11] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 1.369      ; 2.033      ;
; 1.177 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 1.249      ; 1.926      ;
; 1.395 ; memoryManagement:calcultorMemory|bcdOutputMemory[12] ; registerTransfer:rT1|storeB[12] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.350      ; 1.245      ;
; 1.409 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 1.251      ; 2.160      ;
; 1.417 ; storeBCD:sB1|register[11]                            ; registerTransfer:rT1|storeB[11] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.479      ; 1.396      ;
; 1.430 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 1.231      ; 2.161      ;
; 1.445 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[10] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 1.212      ; 2.157      ;
; 1.462 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 1.250      ; 2.212      ;
; 1.481 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[12] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 1.223      ; 2.204      ;
; 1.547 ; storeBCD:sB1|register[1]                             ; registerTransfer:rT1|storeB[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.335      ; 1.382      ;
; 1.592 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[9]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 1.223      ; 2.315      ;
; 1.611 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 1.230      ; 2.341      ;
; 1.627 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 1.221      ; 2.348      ;
; 1.655 ; memoryManagement:calcultorMemory|bcdOutputMemory[10] ; registerTransfer:rT1|storeB[10] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.324      ; 1.479      ;
; 1.671 ; memoryManagement:calcultorMemory|bcdOutputMemory[2]  ; registerTransfer:rT1|storeB[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.348      ; 1.519      ;
; 1.674 ; memoryManagement:calcultorMemory|bcdOutputMemory[1]  ; registerTransfer:rT1|storeB[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.335      ; 1.509      ;
; 1.675 ; memoryManagement:calcultorMemory|bcdOutputMemory[6]  ; registerTransfer:rT1|storeB[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.356      ; 1.531      ;
; 1.681 ; memoryManagement:calcultorMemory|bcdOutputMemory[5]  ; registerTransfer:rT1|storeB[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.357      ; 1.538      ;
; 1.724 ; storeBCD:sB1|register[10]                            ; registerTransfer:rT1|storeB[10] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.325      ; 1.549      ;
; 1.726 ; storeBCD:sB1|register[0]                             ; registerTransfer:rT1|storeB[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.341      ; 1.567      ;
; 1.735 ; memoryManagement:calcultorMemory|bcdOutputMemory[8]  ; registerTransfer:rT1|storeB[8]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.334      ; 1.569      ;
; 1.741 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 1.225      ; 2.466      ;
; 1.777 ; storeBCD:sB1|register[8]                             ; registerTransfer:rT1|storeB[8]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.336      ; 1.613      ;
; 1.781 ; memoryManagement:calcultorMemory|bcdOutputMemory[3]  ; registerTransfer:rT1|storeB[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.340      ; 1.621      ;
; 1.795 ; memoryManagement:calcultorMemory|bcdOutputMemory[9]  ; registerTransfer:rT1|storeB[9]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.335      ; 1.630      ;
; 1.827 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[8]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 1.223      ; 2.550      ;
; 1.846 ; memoryManagement:calcultorMemory|bcdOutputMemory[11] ; registerTransfer:rT1|storeB[11] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.473      ; 1.819      ;
; 1.857 ; storeBCD:sB1|register[9]                             ; registerTransfer:rT1|storeB[9]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.336      ; 1.693      ;
; 1.858 ; storeBCD:sB1|register[7]                             ; registerTransfer:rT1|storeB[7]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.449      ; 1.807      ;
; 1.887 ; memoryManagement:calcultorMemory|bcdOutputMemory[0]  ; registerTransfer:rT1|storeB[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.312      ; 1.699      ;
; 1.895 ; storeBCD:sB1|register[6]                             ; registerTransfer:rT1|storeB[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.359      ; 1.754      ;
; 1.901 ; storeBCD:sB1|register[3]                             ; registerTransfer:rT1|storeB[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.340      ; 1.741      ;
; 1.928 ; storeBCD:sB1|register[4]                             ; registerTransfer:rT1|storeB[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.361      ; 1.789      ;
; 1.965 ; memoryManagement:calcultorMemory|bcdOutputMemory[7]  ; registerTransfer:rT1|storeB[7]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.446      ; 1.911      ;
; 1.981 ; storeBCD:sB1|register[12]                            ; registerTransfer:rT1|storeB[12] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.343      ; 1.824      ;
; 2.036 ; storeBCD:sB1|register[5]                             ; registerTransfer:rT1|storeB[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.360      ; 1.896      ;
; 2.044 ; storeBCD:sB1|register[2]                             ; registerTransfer:rT1|storeB[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.331      ; 1.875      ;
; 2.184 ; memoryManagement:calcultorMemory|bcdOutputMemory[4]  ; registerTransfer:rT1|storeB[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.358      ; 2.042      ;
+-------+------------------------------------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+


+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Hold: 'FSM:fsm1|state.S1'                                                                                                                                                 ;
+-------+---------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+
; Slack ; From Node                 ; To Node                         ; Launch Clock                                      ; Latch Clock       ; Relationship ; Clock Skew ; Data Delay ;
+-------+---------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+
; 1.179 ; storeBCD:sB1|register[7]  ; registerTransfer:rT1|storeA[7]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; 0.023      ; 0.702      ;
; 1.187 ; storeBCD:sB1|register[9]  ; registerTransfer:rT1|storeA[9]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; 0.026      ; 0.713      ;
; 1.192 ; storeBCD:sB1|register[5]  ; registerTransfer:rT1|storeA[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; 0.021      ; 0.713      ;
; 1.201 ; storeBCD:sB1|register[8]  ; registerTransfer:rT1|storeA[8]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; 0.029      ; 0.730      ;
; 1.201 ; storeBCD:sB1|register[4]  ; registerTransfer:rT1|storeA[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; 0.021      ; 0.722      ;
; 1.201 ; storeBCD:sB1|register[11] ; registerTransfer:rT1|storeA[11] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; 0.021      ; 0.722      ;
; 1.204 ; storeBCD:sB1|register[3]  ; registerTransfer:rT1|storeA[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; 0.022      ; 0.726      ;
; 1.206 ; storeBCD:sB1|register[6]  ; registerTransfer:rT1|storeA[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; 0.019      ; 0.725      ;
; 1.207 ; storeBCD:sB1|register[10] ; registerTransfer:rT1|storeA[10] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; 0.027      ; 0.734      ;
; 1.207 ; storeBCD:sB1|register[0]  ; registerTransfer:rT1|storeA[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; 0.021      ; 0.728      ;
; 1.210 ; storeBCD:sB1|register[2]  ; registerTransfer:rT1|storeA[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; 0.019      ; 0.729      ;
; 1.218 ; storeBCD:sB1|register[1]  ; registerTransfer:rT1|storeA[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; 0.000      ; 0.718      ;
; 1.219 ; storeBCD:sB1|register[12] ; registerTransfer:rT1|storeA[12] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; 0.004      ; 0.723      ;
+-------+---------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+


+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Hold: 'inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]'                                                                                                                                                 ;
+-------+---------------------------------+---------------------+---------------------------------------------------------+------------------------------------------------------+--------------+------------+------------+
; Slack ; From Node                       ; To Node             ; Launch Clock                                            ; Latch Clock                                          ; Relationship ; Clock Skew ; Data Delay ;
+-------+---------------------------------+---------------------+---------------------------------------------------------+------------------------------------------------------+--------------+------------+------------+
; 1.732 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[20] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.219     ; 1.779      ;
; 1.811 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[14] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 1.827      ;
; 1.909 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[12] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.248     ; 1.927      ;
; 1.952 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[10] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 1.968      ;
; 1.952 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[9]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 1.968      ;
; 2.075 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[1]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.249     ; 2.092      ;
; 2.080 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[11] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.096      ;
; 2.085 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[4]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.101      ;
; 2.086 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[13] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.102      ;
; 2.087 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[6]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.103      ;
; 2.087 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[18] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.248     ; 2.105      ;
; 2.099 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[8]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.249     ; 2.116      ;
; 2.099 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[2]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.249     ; 2.116      ;
; 2.101 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[5]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.249     ; 2.118      ;
; 2.101 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[3]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.249     ; 2.118      ;
; 2.101 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[0]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.249     ; 2.118      ;
; 2.126 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[17] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.142      ;
; 2.127 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[7]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.143      ;
; 2.127 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[19] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.143      ;
; 2.130 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[15] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.146      ;
; 2.130 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[16] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.146      ;
; 2.155 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[12] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.248     ; 2.173      ;
; 2.155 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[18] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.248     ; 2.173      ;
; 2.160 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[20] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.219     ; 2.207      ;
; 2.170 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[8]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.249     ; 2.187      ;
; 2.170 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[5]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.249     ; 2.187      ;
; 2.170 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[2]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.249     ; 2.187      ;
; 2.170 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[3]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.249     ; 2.187      ;
; 2.170 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[1]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.249     ; 2.187      ;
; 2.170 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[0]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.249     ; 2.187      ;
; 2.331 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[12] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.248     ; 2.349      ;
; 2.331 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[18] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.248     ; 2.349      ;
; 2.336 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[20] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.219     ; 2.383      ;
; 2.346 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[8]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.249     ; 2.363      ;
; 2.346 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[5]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.249     ; 2.363      ;
; 2.346 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[2]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.249     ; 2.363      ;
; 2.346 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[3]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.249     ; 2.363      ;
; 2.346 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[1]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.249     ; 2.363      ;
; 2.346 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[0]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.249     ; 2.363      ;
; 2.496 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[7]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.512      ;
; 2.496 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[15] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.512      ;
; 2.496 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[16] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.512      ;
; 2.496 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[17] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.512      ;
; 2.496 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[19] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.512      ;
; 2.496 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[14] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.512      ;
; 2.496 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[13] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.512      ;
; 2.496 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[10] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.512      ;
; 2.496 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[9]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.512      ;
; 2.496 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[6]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.512      ;
; 2.496 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[11] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.512      ;
; 2.496 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[4]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.512      ;
; 2.669 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[17] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.685      ;
; 2.670 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[19] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.686      ;
; 2.671 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[11] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.687      ;
; 2.671 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[13] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.687      ;
; 2.671 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[16] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.687      ;
; 2.672 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[7]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.688      ;
; 2.672 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[15] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.688      ;
; 2.672 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[14] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.688      ;
; 2.672 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[10] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.688      ;
; 2.672 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[9]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.688      ;
; 2.672 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[6]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.688      ;
; 2.672 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[4]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.250     ; 2.688      ;
; 3.869 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[12] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.532     ; 3.103      ;
; 3.873 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[18] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.532     ; 3.107      ;
; 3.978 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[17] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.534     ; 3.210      ;
; 3.979 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[19] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.534     ; 3.211      ;
; 3.980 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[16] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.534     ; 3.212      ;
; 3.980 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[13] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.534     ; 3.212      ;
; 3.980 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.534     ; 3.212      ;
; 3.982 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[15] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.534     ; 3.214      ;
; 4.020 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[1]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.533     ; 3.253      ;
; 4.051 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[10] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.534     ; 3.283      ;
; 4.142 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[3]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.533     ; 3.375      ;
; 4.156 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.534     ; 3.388      ;
; 4.198 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[12] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.871     ; 3.093      ;
; 4.202 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[18] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.871     ; 3.097      ;
; 4.239 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[4]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.534     ; 3.471      ;
; 4.307 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[17] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.873     ; 3.200      ;
; 4.308 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[19] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.873     ; 3.201      ;
; 4.309 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[16] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.873     ; 3.202      ;
; 4.309 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[13] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.873     ; 3.202      ;
; 4.309 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.873     ; 3.202      ;
; 4.311 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[15] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.873     ; 3.204      ;
; 4.413 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[8]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.533     ; 3.646      ;
; 4.414 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.503     ; 3.677      ;
; 4.446 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[7]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.534     ; 3.678      ;
; 4.475 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[0]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.533     ; 3.708      ;
; 4.485 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.873     ; 3.378      ;
; 4.506 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[5]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.533     ; 3.739      ;
; 4.529 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[9]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.534     ; 3.761      ;
; 4.549 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[2]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.533     ; 3.782      ;
; 4.656 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[10] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.873     ; 3.549      ;
; 4.743 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.842     ; 3.667      ;
; 4.890 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[4]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.873     ; 3.783      ;
; 4.958 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[6]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.534     ; 4.190      ;
; 5.033 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[8]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.872     ; 3.927      ;
; 5.198 ; registerTransfer:rT1|storeA[4]  ; ALU:ALU1|answer[1]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.560     ; 4.404      ;
; 5.345 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[7]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.873     ; 4.238      ;
; 5.391 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[9]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.873     ; 4.284      ;
+-------+---------------------------------+---------------------+---------------------------------------------------------+------------------------------------------------------+--------------+------------+------------+


+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Recovery: 'inputManager:iM1|clockDivider:clock500Hz|newClock'                                                                                                                                                           ;
+--------+------------------------------------------------------+-------------------+---------------------------------------------------+---------------------------------------------------+--------------+------------+------------+
; Slack  ; From Node                                            ; To Node           ; Launch Clock                                      ; Latch Clock                                       ; Relationship ; Clock Skew ; Data Delay ;
+--------+------------------------------------------------------+-------------------+---------------------------------------------------+---------------------------------------------------+--------------+------------+------------+
; -0.266 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4] ; FSM:fsm1|state.S0 ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.000      ; 1.302      ;
; -0.266 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4] ; FSM:fsm1|state.S4 ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.000      ; 1.302      ;
; -0.266 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.000      ; 1.302      ;
; -0.266 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4] ; FSM:fsm1|state.S1 ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.000      ; 1.302      ;
; -0.266 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4] ; FSM:fsm1|state.S3 ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.000      ; 1.302      ;
+--------+------------------------------------------------------+-------------------+---------------------------------------------------+---------------------------------------------------+--------------+------------+------------+


+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Removal: 'inputManager:iM1|clockDivider:clock500Hz|newClock'                                                                                                                                                           ;
+-------+------------------------------------------------------+-------------------+---------------------------------------------------+---------------------------------------------------+--------------+------------+------------+
; Slack ; From Node                                            ; To Node           ; Launch Clock                                      ; Latch Clock                                       ; Relationship ; Clock Skew ; Data Delay ;
+-------+------------------------------------------------------+-------------------+---------------------------------------------------+---------------------------------------------------+--------------+------------+------------+
; 1.036 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4] ; FSM:fsm1|state.S0 ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 0.000      ; 1.302      ;
; 1.036 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4] ; FSM:fsm1|state.S4 ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 0.000      ; 1.302      ;
; 1.036 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 0.000      ; 1.302      ;
; 1.036 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4] ; FSM:fsm1|state.S1 ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 0.000      ; 1.302      ;
; 1.036 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4] ; FSM:fsm1|state.S3 ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 0.000      ; 1.302      ;
+-------+------------------------------------------------------+-------------------+---------------------------------------------------+---------------------------------------------------+--------------+------------+------------+


+------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Minimum Pulse Width: 'CLOCK_50'                                                                                               ;
+--------+--------------+----------------+------------------+----------+------------+------------------------------------------------------+
; Slack  ; Actual Width ; Required Width ; Type             ; Clock    ; Clock Edge ; Target                                               ;
+--------+--------------+----------------+------------------+----------+------------+------------------------------------------------------+
; -1.380 ; 1.000        ; 2.380          ; Port Rate        ; CLOCK_50 ; Rise       ; CLOCK_50                                             ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[23] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[23] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[24] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[24] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[25] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[25] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock    ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; CLOCK_50|combout                                     ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; CLOCK_50|combout                                     ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; CLOCK_50~clkctrl|inclk[0]                            ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; CLOCK_50~clkctrl|inclk[0]                            ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; CLOCK_50~clkctrl|outclk                              ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; CLOCK_50~clkctrl|outclk                              ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[0]|clk                        ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[0]|clk                        ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[10]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[10]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[11]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[11]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[12]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[12]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[13]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[13]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[14]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[14]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[15]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[15]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[16]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[16]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[17]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[17]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[18]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[18]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[19]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[19]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[1]|clk                        ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[1]|clk                        ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[20]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[20]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[21]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[21]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[22]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[22]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[23]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[23]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[24]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[24]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[25]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[25]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[2]|clk                        ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[2]|clk                        ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[3]|clk                        ;
+--------+--------------+----------------+------------------+----------+------------+------------------------------------------------------+


+-----------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Minimum Pulse Width: 'ROW[0]'                                                                                                ;
+--------+--------------+----------------+------------------+--------+------------+-------------------------------------------------------+
; Slack  ; Actual Width ; Required Width ; Type             ; Clock  ; Clock Edge ; Target                                                ;
+--------+--------------+----------------+------------------+--------+------------+-------------------------------------------------------+
; -1.222 ; 1.000        ; 2.222          ; Port Rate        ; ROW[0] ; Rise       ; ROW[0]                                                ;
; -0.819 ; -0.819       ; 0.000          ; High Pulse Width ; ROW[0] ; Fall       ; iM1|matrixDecoder|WideOr6~6|combout                   ;
; -0.819 ; -0.819       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Fall       ; iM1|matrixDecoder|WideOr6~6|combout                   ;
; -0.819 ; -0.819       ; 0.000          ; High Pulse Width ; ROW[0] ; Fall       ; iM1|matrixDecoder|resetKey[4]|datad                   ;
; -0.819 ; -0.819       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Fall       ; iM1|matrixDecoder|resetKey[4]|datad                   ;
; -0.819 ; -0.819       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ;
; -0.819 ; -0.819       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ;
; -0.371 ; -0.371       ; 0.000          ; High Pulse Width ; ROW[0] ; Fall       ; iM1|matrixDecoder|WideOr4~3|combout                   ;
; -0.371 ; -0.371       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Fall       ; iM1|matrixDecoder|WideOr4~3|combout                   ;
; -0.371 ; -0.371       ; 0.000          ; High Pulse Width ; ROW[0] ; Fall       ; iM1|matrixDecoder|equalKey[4]|datad                   ;
; -0.371 ; -0.371       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Fall       ; iM1|matrixDecoder|equalKey[4]|datad                   ;
; -0.371 ; -0.371       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ;
; -0.371 ; -0.371       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ;
; -0.360 ; -0.360       ; 0.000          ; High Pulse Width ; ROW[0] ; Fall       ; iM1|matrixDecoder|WideOr5~5|combout                   ;
; -0.360 ; -0.360       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Fall       ; iM1|matrixDecoder|WideOr5~5|combout                   ;
; -0.360 ; -0.360       ; 0.000          ; High Pulse Width ; ROW[0] ; Fall       ; iM1|matrixDecoder|clearKey[4]|datac                   ;
; -0.360 ; -0.360       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Fall       ; iM1|matrixDecoder|clearKey[4]|datac                   ;
; -0.360 ; -0.360       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ;
; -0.360 ; -0.360       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ;
; -0.347 ; -0.347       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr6~5|combout                   ;
; -0.347 ; -0.347       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr6~5|combout                   ;
; -0.347 ; -0.347       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr6~6|dataa                     ;
; -0.347 ; -0.347       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr6~6|dataa                     ;
; -0.345 ; -0.345       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr4~2|combout                   ;
; -0.345 ; -0.345       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr4~2|combout                   ;
; -0.345 ; -0.345       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr4~3|datac                     ;
; -0.345 ; -0.345       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr4~3|datac                     ;
; -0.026 ; -0.026       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr4~1|combout                   ;
; -0.026 ; -0.026       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr4~1|combout                   ;
; -0.026 ; -0.026       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr4~3|dataa                     ;
; -0.026 ; -0.026       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr4~3|dataa                     ;
; -0.005 ; -0.005       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr8~4clkctrl|inclk[0]           ;
; -0.005 ; -0.005       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr8~4clkctrl|inclk[0]           ;
; -0.005 ; -0.005       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr8~4clkctrl|outclk             ;
; -0.005 ; -0.005       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr8~4clkctrl|outclk             ;
; -0.005 ; -0.005       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr8~4|combout                   ;
; -0.005 ; -0.005       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr8~4|combout                   ;
; -0.005 ; -0.005       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|numberKey[0]|datad                  ;
; -0.005 ; -0.005       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|numberKey[0]|datad                  ;
; -0.005 ; -0.005       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|numberKey[1]|datad                  ;
; -0.005 ; -0.005       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|numberKey[1]|datad                  ;
; -0.005 ; -0.005       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|numberKey[2]|datad                  ;
; -0.005 ; -0.005       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|numberKey[2]|datad                  ;
; -0.005 ; -0.005       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|numberKey[3]|datad                  ;
; -0.005 ; -0.005       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|numberKey[3]|datad                  ;
; -0.005 ; -0.005       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|numberKey[4]|datad                  ;
; -0.005 ; -0.005       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|numberKey[4]|datad                  ;
; -0.005 ; -0.005       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ;
; -0.005 ; -0.005       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ;
; -0.005 ; -0.005       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ;
; -0.005 ; -0.005       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ;
; -0.005 ; -0.005       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ;
; -0.005 ; -0.005       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ;
; -0.005 ; -0.005       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ;
; -0.005 ; -0.005       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ;
; -0.005 ; -0.005       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ;
; -0.005 ; -0.005       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ;
; -0.004 ; -0.004       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr6~4|combout                   ;
; -0.004 ; -0.004       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr6~4|combout                   ;
; -0.004 ; -0.004       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr6~6|datad                     ;
; -0.004 ; -0.004       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr6~6|datad                     ;
; 0.068  ; 0.068        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~3clkctrl|inclk[0]           ;
; 0.068  ; 0.068        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~3clkctrl|inclk[0]           ;
; 0.068  ; 0.068        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~3clkctrl|outclk             ;
; 0.068  ; 0.068        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~3clkctrl|outclk             ;
; 0.068  ; 0.068        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~3|combout                   ;
; 0.068  ; 0.068        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~3|combout                   ;
; 0.068  ; 0.068        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|operatorKey[0]|datad                ;
; 0.068  ; 0.068        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|operatorKey[0]|datad                ;
; 0.068  ; 0.068        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|operatorKey[1]|datac                ;
; 0.068  ; 0.068        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|operatorKey[1]|datac                ;
; 0.068  ; 0.068        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|operatorKey[4]|datac                ;
; 0.068  ; 0.068        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|operatorKey[4]|datac                ;
; 0.068  ; 0.068        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ;
; 0.068  ; 0.068        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ;
; 0.068  ; 0.068        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ;
; 0.068  ; 0.068        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ;
; 0.068  ; 0.068        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ;
; 0.068  ; 0.068        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ;
; 0.341  ; 0.341        ; 0.000          ; High Pulse Width ; ROW[0] ; Fall       ; iM1|matrixDecoder|WideOr5~5|datab                     ;
; 0.341  ; 0.341        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Fall       ; iM1|matrixDecoder|WideOr5~5|datab                     ;
; 0.341  ; 0.341        ; 0.000          ; High Pulse Width ; ROW[0] ; Fall       ; iM1|matrixDecoder|WideOr9~3|combout                   ;
; 0.341  ; 0.341        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Fall       ; iM1|matrixDecoder|WideOr9~3|combout                   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; ROW[0]|combout                                        ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; ROW[0]|combout                                        ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|keypadMatrixRingCounter|always0~1|combout         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|keypadMatrixRingCounter|always0~1|combout         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|keypadMatrixRingCounter|always0~1|datad           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|keypadMatrixRingCounter|always0~1|datad           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|Decoder0~0|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|Decoder0~0|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|Decoder0~0|datac                    ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|Decoder0~0|datac                    ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~0|combout                   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~0|combout                   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~0|datad                     ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~0|datad                     ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~2|combout                   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~2|combout                   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~2|datad                     ;
+--------+--------------+----------------+------------------+--------+------------+-------------------------------------------------------+


+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Minimum Pulse Width: 'inputManager:iM1|clockDivider:clock500Hz|newClock'                                                                                                            ;
+--------+--------------+----------------+------------------+---------------------------------------------------+------------+-------------------------------------------------------------------+
; Slack  ; Actual Width ; Required Width ; Type             ; Clock                                             ; Clock Edge ; Target                                                            ;
+--------+--------------+----------------+------------------+---------------------------------------------------+------------+-------------------------------------------------------------------+
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; FSM:fsm1|state.S0                                                 ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; FSM:fsm1|state.S0                                                 ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; FSM:fsm1|state.S1                                                 ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; FSM:fsm1|state.S1                                                 ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; FSM:fsm1|state.S2                                                 ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; FSM:fsm1|state.S2                                                 ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; FSM:fsm1|state.S3                                                 ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; FSM:fsm1|state.S3                                                 ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; FSM:fsm1|state.S4                                                 ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; FSM:fsm1|state.S4                                                 ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:buttonPulser|Q                       ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:buttonPulser|Q                       ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[0]             ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[0]             ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[1]             ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[1]             ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[4]             ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[4]             ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:clearPulser|Q                        ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:clearPulser|Q                        ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]              ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]              ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:equalPulser|Q                        ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:equalPulser|Q                        ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]              ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]              ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:negativePulser|Q                     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:negativePulser|Q                     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:negativePulser|keyPulse[4]           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:negativePulser|keyPulse[4]           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|Q                       ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|Q                       ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[0]             ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[0]             ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[1]             ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[1]             ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[2]             ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[2]             ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[3]             ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[3]             ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4]             ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4]             ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:operatorPulser|Q                     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:operatorPulser|Q                     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[0]           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[0]           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[1]           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[1]           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[2]           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[2]           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4]           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4]           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:resetPulser|Q                        ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:resetPulser|Q                        ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4]              ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4]              ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[0]               ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[0]               ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[10]              ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[10]              ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[11]              ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[11]              ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[12]              ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[12]              ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[1]               ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[1]               ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[2]               ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[2]               ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[3]               ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[3]               ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[4]               ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[4]               ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[5]               ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[5]               ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[6]               ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[6]               ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[7]               ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[7]               ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[8]               ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[8]               ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[9]               ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[9]               ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutput[0]                     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutput[0]                     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutput[10]                    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutput[10]                    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutput[11]                    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutput[11]                    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutput[12]                    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutput[12]                    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutput[13]                    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutput[13]                    ;
+--------+--------------+----------------+------------------+---------------------------------------------------+------------+-------------------------------------------------------------------+


+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Minimum Pulse Width: 'inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]'                                                                                       ;
+--------+--------------+----------------+------------------+------------------------------------------------------+------------+----------------------------------------------+
; Slack  ; Actual Width ; Required Width ; Type             ; Clock                                                ; Clock Edge ; Target                                       ;
+--------+--------------+----------------+------------------+------------------------------------------------------+------------+----------------------------------------------+
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[0]                           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[0]                           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[10]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[10]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[11]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[11]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[12]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[12]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[13]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[13]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[14]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[14]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[15]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[15]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[16]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[16]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[17]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[17]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[18]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[18]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[19]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[19]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[1]                           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[1]                           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[20]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[20]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[2]                           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[2]                           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[3]                           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[3]                           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[4]                           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[4]                           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[5]                           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[5]                           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[6]                           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[6]                           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[7]                           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[7]                           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[8]                           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[8]                           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[9]                           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[9]                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[0]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[0]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[10]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[10]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[11]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[11]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[12]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[12]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[13]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[13]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[14]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[14]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[15]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[15]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[16]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[16]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[17]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[17]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[18]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[18]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[19]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[19]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[1]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[1]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[20]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[20]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[2]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[2]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[3]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[3]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[4]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[4]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[5]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[5]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[6]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[6]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[7]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[7]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[8]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[8]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[9]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[9]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; iM1|equalPulser|keyPulse[4]|regout           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; iM1|equalPulser|keyPulse[4]|regout           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; iM1|equalPulser|keyPulse[4]~clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; iM1|equalPulser|keyPulse[4]~clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; iM1|equalPulser|keyPulse[4]~clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; iM1|equalPulser|keyPulse[4]~clkctrl|outclk   ;
+--------+--------------+----------------+------------------+------------------------------------------------------+------------+----------------------------------------------+


+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Minimum Pulse Width: 'inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4]'                                                                                          ;
+--------+--------------+----------------+------------------+---------------------------------------------------------+------------+-------------------------------------------------+
; Slack  ; Actual Width ; Required Width ; Type             ; Clock                                                   ; Clock Edge ; Target                                          ;
+--------+--------------+----------------+------------------+---------------------------------------------------------+------------+-------------------------------------------------+
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; storeOperator:sO1|storeOp[0]                    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; storeOperator:sO1|storeOp[0]                    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; storeOperator:sO1|storeOp[1]                    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; storeOperator:sO1|storeOp[1]                    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; storeOperator:sO1|storeOp[2]                    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; storeOperator:sO1|storeOp[2]                    ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; iM1|operatorPulser|keyPulse[4]|regout           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; iM1|operatorPulser|keyPulse[4]|regout           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; iM1|operatorPulser|keyPulse[4]~clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; iM1|operatorPulser|keyPulse[4]~clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; iM1|operatorPulser|keyPulse[4]~clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; iM1|operatorPulser|keyPulse[4]~clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; sO1|storeOp[0]|clk                              ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; sO1|storeOp[0]|clk                              ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; sO1|storeOp[1]|clk                              ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; sO1|storeOp[1]|clk                              ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; sO1|storeOp[2]|clk                              ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; sO1|storeOp[2]|clk                              ;
+--------+--------------+----------------+------------------+---------------------------------------------------------+------------+-------------------------------------------------+


+-----------------------------------------------------------------------------------------------------------------------------+
; Slow Model Minimum Pulse Width: 'FSM:fsm1|state.S1'                                                                         ;
+-------+--------------+----------------+------------------+-------------------+------------+---------------------------------+
; Slack ; Actual Width ; Required Width ; Type             ; Clock             ; Clock Edge ; Target                          ;
+-------+--------------+----------------+------------------+-------------------+------------+---------------------------------+
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; fsm1|state.S1|regout            ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; fsm1|state.S1|regout            ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; fsm1|state.S1~clkctrl|inclk[0]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; fsm1|state.S1~clkctrl|inclk[0]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; fsm1|state.S1~clkctrl|outclk    ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; fsm1|state.S1~clkctrl|outclk    ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[0]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[0]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[10]|datac            ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[10]|datac            ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[11]|datac            ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[11]|datac            ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[12]|datac            ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[12]|datac            ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[1]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[1]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[2]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[2]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[3]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[3]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[4]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[4]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[5]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[5]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[6]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[6]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[7]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[7]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[8]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[8]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[9]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[9]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[0]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[0]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[10] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[10] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[11] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[11] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[12] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[12] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[1]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[1]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[2]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[2]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[3]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[3]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[4]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[4]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[5]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[5]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[6]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[6]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[7]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[7]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[8]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[8]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[9]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[9]  ;
+-------+--------------+----------------+------------------+-------------------+------------+---------------------------------+


+---------------------------------------------------------------------------------------------------------------------------+
; Slow Model Minimum Pulse Width: 'FSM:fsm1|state.S2'                                                                       ;
+-------+--------------+----------------+------------------+-------------------+------------+-------------------------------+
; Slack ; Actual Width ; Required Width ; Type             ; Clock             ; Clock Edge ; Target                        ;
+-------+--------------+----------------+------------------+-------------------+------------+-------------------------------+
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[0]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[0]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[10]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[10]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[11]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[11]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[12]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[12]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[13]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[13]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[14]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[14]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[15]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[15]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[16]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[16]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[17]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[17]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[18]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[18]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[19]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[19]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[1]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[1]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[20]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[20]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[21]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[21]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[22]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[22]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[23]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[23]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[28]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[28]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[2]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[2]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[3]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[3]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[4]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[4]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[5]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[5]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[6]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[6]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[7]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[7]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[8]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[8]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[9]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[9]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[0]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[0]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[10] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[10] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[11] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[11] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[12] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[12] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[13] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[13] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[14] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[14] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[15] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[15] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[16] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[16] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[17] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[17] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[18] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[18] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[19] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[19] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[1]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[1]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[20] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[20] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[21] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[21] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[22] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[22] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[23] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[23] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[28] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[28] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[2]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[2]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[3]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[3]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[4]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[4]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[5]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[5]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[6]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[6]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[7]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[7]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[8]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[8]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[9]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[9]  ;
+-------+--------------+----------------+------------------+-------------------+------------+-------------------------------+


+------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Minimum Pulse Width: 'FSM:fsm1|state.S3'                                                                          ;
+-------+--------------+----------------+------------------+-------------------+------------+----------------------------------+
; Slack ; Actual Width ; Required Width ; Type             ; Clock             ; Clock Edge ; Target                           ;
+-------+--------------+----------------+------------------+-------------------+------------+----------------------------------+
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; fsm1|state.S3|regout             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; fsm1|state.S3|regout             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[0]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[0]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[10]|datad             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[10]|datad             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[11]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[11]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[12]|datad             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[12]|datad             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[12]~1clkctrl|inclk[0] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[12]~1clkctrl|inclk[0] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[12]~1clkctrl|outclk   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[12]~1clkctrl|outclk   ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[12]~1|combout         ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[12]~1|combout         ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[12]~1|datad           ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[12]~1|datad           ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[1]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[1]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[2]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[2]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[3]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[3]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[4]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[4]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[5]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[5]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[6]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[6]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[7]|datac              ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[7]|datac              ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[8]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[8]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[9]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[9]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[0]   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[0]   ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[10]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[10]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[11]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[11]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[12]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[12]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[1]   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[1]   ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[2]   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[2]   ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[3]   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[3]   ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[4]   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[4]   ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[5]   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[5]   ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[6]   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[6]   ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[7]   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[7]   ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[8]   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[8]   ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[9]   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[9]   ;
+-------+--------------+----------------+------------------+-------------------+------------+----------------------------------+


+--------------------------------------------------------------------------------------------------------------------------------------------------+
; Setup Times                                                                                                                                      ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+
; Data Port ; Clock Port                                        ; Rise   ; Fall   ; Clock Edge ; Clock Reference                                   ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+
; ROW[*]    ; ROW[0]                                            ; 4.812  ; 4.812  ; Rise       ; ROW[0]                                            ;
;  ROW[0]   ; ROW[0]                                            ; 0.218  ; 0.218  ; Rise       ; ROW[0]                                            ;
;  ROW[1]   ; ROW[0]                                            ; 4.139  ; 4.139  ; Rise       ; ROW[0]                                            ;
;  ROW[2]   ; ROW[0]                                            ; 4.522  ; 4.522  ; Rise       ; ROW[0]                                            ;
;  ROW[3]   ; ROW[0]                                            ; 4.812  ; 4.812  ; Rise       ; ROW[0]                                            ;
; ROW[*]    ; ROW[0]                                            ; 3.746  ; 3.746  ; Fall       ; ROW[0]                                            ;
;  ROW[0]   ; ROW[0]                                            ; -0.848 ; -0.848 ; Fall       ; ROW[0]                                            ;
;  ROW[1]   ; ROW[0]                                            ; 3.073  ; 3.073  ; Fall       ; ROW[0]                                            ;
;  ROW[2]   ; ROW[0]                                            ; 3.456  ; 3.456  ; Fall       ; ROW[0]                                            ;
;  ROW[3]   ; ROW[0]                                            ; 3.746  ; 3.746  ; Fall       ; ROW[0]                                            ;
; KEY[*]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.350  ; 5.350  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.991  ; 4.991  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.821  ; 4.821  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.942  ; 4.942  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.350  ; 5.350  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; ROW[*]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.827  ; 5.827  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.470  ; 1.470  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.357  ; 5.357  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.624  ; 5.624  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.827  ; 5.827  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; SW[*]     ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 3.983  ; 3.983  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  SW[17]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 3.983  ; 3.983  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+


+--------------------------------------------------------------------------------------------------------------------------------------------------+
; Hold Times                                                                                                                                       ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+
; Data Port ; Clock Port                                        ; Rise   ; Fall   ; Clock Edge ; Clock Reference                                   ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+
; ROW[*]    ; ROW[0]                                            ; 2.147  ; 2.147  ; Rise       ; ROW[0]                                            ;
;  ROW[0]   ; ROW[0]                                            ; 2.147  ; 2.147  ; Rise       ; ROW[0]                                            ;
;  ROW[1]   ; ROW[0]                                            ; -1.439 ; -1.439 ; Rise       ; ROW[0]                                            ;
;  ROW[2]   ; ROW[0]                                            ; -1.614 ; -1.614 ; Rise       ; ROW[0]                                            ;
;  ROW[3]   ; ROW[0]                                            ; -0.810 ; -0.810 ; Rise       ; ROW[0]                                            ;
; ROW[*]    ; ROW[0]                                            ; 1.966  ; 1.966  ; Fall       ; ROW[0]                                            ;
;  ROW[0]   ; ROW[0]                                            ; 1.966  ; 1.966  ; Fall       ; ROW[0]                                            ;
;  ROW[1]   ; ROW[0]                                            ; -1.955 ; -1.955 ; Fall       ; ROW[0]                                            ;
;  ROW[2]   ; ROW[0]                                            ; -2.338 ; -2.338 ; Fall       ; ROW[0]                                            ;
;  ROW[3]   ; ROW[0]                                            ; -2.628 ; -2.628 ; Fall       ; ROW[0]                                            ;
; KEY[*]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -3.725 ; -3.725 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -3.895 ; -3.895 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -3.725 ; -3.725 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -3.846 ; -3.846 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -4.254 ; -4.254 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; ROW[*]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -1.240 ; -1.240 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -1.240 ; -1.240 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -5.127 ; -5.127 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -5.394 ; -5.394 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -5.597 ; -5.597 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; SW[*]     ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -3.745 ; -3.745 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  SW[17]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -3.745 ; -3.745 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+


+--------------------------------------------------------------------------------------------------------------------------------------------------+
; Clock to Output Times                                                                                                                            ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+
; Data Port ; Clock Port                                        ; Rise   ; Fall   ; Clock Edge ; Clock Reference                                   ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+
; LEDG[*]   ; FSM:fsm1|state.S1                                 ; 5.302  ;        ; Rise       ; FSM:fsm1|state.S1                                 ;
;  LEDG[1]  ; FSM:fsm1|state.S1                                 ; 5.302  ;        ; Rise       ; FSM:fsm1|state.S1                                 ;
; LEDG[*]   ; FSM:fsm1|state.S1                                 ;        ; 5.302  ; Fall       ; FSM:fsm1|state.S1                                 ;
;  LEDG[1]  ; FSM:fsm1|state.S1                                 ;        ; 5.302  ; Fall       ; FSM:fsm1|state.S1                                 ;
; LEDG[*]   ; FSM:fsm1|state.S2                                 ; 6.087  ;        ; Rise       ; FSM:fsm1|state.S2                                 ;
;  LEDG[2]  ; FSM:fsm1|state.S2                                 ; 6.087  ;        ; Rise       ; FSM:fsm1|state.S2                                 ;
; LEDG[*]   ; FSM:fsm1|state.S2                                 ;        ; 6.087  ; Fall       ; FSM:fsm1|state.S2                                 ;
;  LEDG[2]  ; FSM:fsm1|state.S2                                 ;        ; 6.087  ; Fall       ; FSM:fsm1|state.S2                                 ;
; LEDG[*]   ; FSM:fsm1|state.S3                                 ; 5.400  ;        ; Rise       ; FSM:fsm1|state.S3                                 ;
;  LEDG[3]  ; FSM:fsm1|state.S3                                 ; 5.400  ;        ; Rise       ; FSM:fsm1|state.S3                                 ;
; LEDG[*]   ; FSM:fsm1|state.S3                                 ;        ; 5.400  ; Fall       ; FSM:fsm1|state.S3                                 ;
;  LEDG[3]  ; FSM:fsm1|state.S3                                 ;        ; 5.400  ; Fall       ; FSM:fsm1|state.S3                                 ;
; COL[*]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.521  ; 5.521  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.261  ; 5.261  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.521  ; 5.521  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.465  ; 5.465  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.277  ; 5.277  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX0[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.963  ; 9.963  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.707  ; 9.707  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.963  ; 9.963  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.944  ; 9.944  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.667  ; 9.667  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.691  ; 9.691  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.416  ; 9.416  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.676  ; 9.676  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX1[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.822 ; 10.822 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.572 ; 10.572 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.822 ; 10.822 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.412 ; 10.412 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.371 ; 10.371 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.400 ; 10.400 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.707 ; 10.707 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.409 ; 10.409 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX2[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 11.846 ; 11.846 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.755 ; 10.755 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.868 ; 10.868 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.382 ; 10.382 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 11.541 ; 11.541 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.979 ; 10.979 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 11.393 ; 11.393 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 11.846 ; 11.846 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX3[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.361 ; 10.361 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.361 ; 10.361 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.072 ; 10.072 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.111 ; 10.111 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.075 ; 10.075 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.116 ; 10.116 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.324 ; 10.324 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.336 ; 10.336 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX4[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.723  ; 9.723  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.585  ; 9.585  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.711  ; 9.711  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.723  ; 9.723  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.426  ; 9.426  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.431  ; 9.431  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.444  ; 9.444  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.603  ; 9.603  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX5[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.393  ; 9.393  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.393  ; 9.393  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 8.859  ; 8.859  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.030  ; 9.030  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.094  ; 9.094  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.074  ; 9.074  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.088  ; 9.088  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 8.587  ; 8.587  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX7[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.052 ; 10.052 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.560  ; 9.560  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.222  ; 9.222  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.192  ; 9.192  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.530  ; 9.530  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.530  ; 9.530  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.549  ; 9.549  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.052 ; 10.052 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; LEDG[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.200  ; 9.200  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  LEDG[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 8.882  ; 8.882  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  LEDG[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.200  ; 9.200  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+


+--------------------------------------------------------------------------------------------------------------------------------------------------+
; Minimum Clock to Output Times                                                                                                                    ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+
; Data Port ; Clock Port                                        ; Rise   ; Fall   ; Clock Edge ; Clock Reference                                   ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+
; LEDG[*]   ; FSM:fsm1|state.S1                                 ; 5.302  ;        ; Rise       ; FSM:fsm1|state.S1                                 ;
;  LEDG[1]  ; FSM:fsm1|state.S1                                 ; 5.302  ;        ; Rise       ; FSM:fsm1|state.S1                                 ;
; LEDG[*]   ; FSM:fsm1|state.S1                                 ;        ; 5.302  ; Fall       ; FSM:fsm1|state.S1                                 ;
;  LEDG[1]  ; FSM:fsm1|state.S1                                 ;        ; 5.302  ; Fall       ; FSM:fsm1|state.S1                                 ;
; LEDG[*]   ; FSM:fsm1|state.S2                                 ; 6.087  ;        ; Rise       ; FSM:fsm1|state.S2                                 ;
;  LEDG[2]  ; FSM:fsm1|state.S2                                 ; 6.087  ;        ; Rise       ; FSM:fsm1|state.S2                                 ;
; LEDG[*]   ; FSM:fsm1|state.S2                                 ;        ; 6.087  ; Fall       ; FSM:fsm1|state.S2                                 ;
;  LEDG[2]  ; FSM:fsm1|state.S2                                 ;        ; 6.087  ; Fall       ; FSM:fsm1|state.S2                                 ;
; LEDG[*]   ; FSM:fsm1|state.S3                                 ; 5.400  ;        ; Rise       ; FSM:fsm1|state.S3                                 ;
;  LEDG[3]  ; FSM:fsm1|state.S3                                 ; 5.400  ;        ; Rise       ; FSM:fsm1|state.S3                                 ;
; LEDG[*]   ; FSM:fsm1|state.S3                                 ;        ; 5.400  ; Fall       ; FSM:fsm1|state.S3                                 ;
;  LEDG[3]  ; FSM:fsm1|state.S3                                 ;        ; 5.400  ; Fall       ; FSM:fsm1|state.S3                                 ;
; COL[*]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.261  ; 5.261  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.261  ; 5.261  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.521  ; 5.521  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.465  ; 5.465  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.277  ; 5.277  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX0[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 8.850  ; 8.850  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.138  ; 9.138  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.384  ; 9.384  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.360  ; 9.360  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.100  ; 9.100  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.090  ; 9.090  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 8.850  ; 8.850  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.110  ; 9.110  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX1[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.419  ; 9.419  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.618  ; 9.618  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.868  ; 9.868  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.460  ; 9.460  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.419  ; 9.419  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.446  ; 9.446  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.752  ; 9.752  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.459  ; 9.459  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX2[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.453  ; 9.453  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.827  ; 9.827  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.939  ; 9.939  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.453  ; 9.453  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.613 ; 10.613 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.055 ; 10.055 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.469 ; 10.469 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.923 ; 10.923 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX3[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.449  ; 9.449  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.760  ; 9.760  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.449  ; 9.449  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.484  ; 9.484  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.451  ; 9.451  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.491  ; 9.491  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.698  ; 9.698  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.713  ; 9.713  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX4[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.116  ; 9.116  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.285  ; 9.285  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.410  ; 9.410  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.413  ; 9.413  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.116  ; 9.116  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.123  ; 9.123  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.135  ; 9.135  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.289  ; 9.289  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX5[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 8.288  ; 8.288  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.083  ; 9.083  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 8.550  ; 8.550  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 8.733  ; 8.733  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 8.784  ; 8.784  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 8.772  ; 8.772  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 8.776  ; 8.776  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 8.288  ; 8.288  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX7[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.192  ; 9.192  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.448  ; 9.448  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.222  ; 9.222  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.192  ; 9.192  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.418  ; 9.418  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.418  ; 9.418  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.437  ; 9.437  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.912  ; 9.912  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; LEDG[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 8.882  ; 8.882  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  LEDG[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 8.882  ; 8.882  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  LEDG[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.200  ; 9.200  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+


+-----------------------------------------------------------------------------------+
; Fast Model Setup Summary                                                          ;
+---------------------------------------------------------+---------+---------------+
; Clock                                                   ; Slack   ; End Point TNS ;
+---------------------------------------------------------+---------+---------------+
; FSM:fsm1|state.S2                                       ; -19.981 ; -380.732      ;
; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; -3.589  ; -67.941       ;
; CLOCK_50                                                ; -1.579  ; -14.955       ;
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; -0.976  ; -26.716       ;
; FSM:fsm1|state.S3                                       ; -0.687  ; -7.342        ;
; FSM:fsm1|state.S1                                       ; -0.306  ; -3.795        ;
; ROW[0]                                                  ; 0.411   ; 0.000         ;
; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; 0.456   ; 0.000         ;
+---------------------------------------------------------+---------+---------------+


+----------------------------------------------------------------------------------+
; Fast Model Hold Summary                                                          ;
+---------------------------------------------------------+--------+---------------+
; Clock                                                   ; Slack  ; End Point TNS ;
+---------------------------------------------------------+--------+---------------+
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; -1.804 ; -23.916       ;
; CLOCK_50                                                ; -1.563 ; -1.563        ;
; ROW[0]                                                  ; -1.474 ; -12.588       ;
; FSM:fsm1|state.S2                                       ; -0.885 ; -9.740        ;
; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; 0.339  ; 0.000         ;
; FSM:fsm1|state.S3                                       ; 0.587  ; 0.000         ;
; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; 0.803  ; 0.000         ;
; FSM:fsm1|state.S1                                       ; 0.874  ; 0.000         ;
+---------------------------------------------------------+--------+---------------+


+---------------------------------------------------------------------------+
; Fast Model Recovery Summary                                               ;
+---------------------------------------------------+-------+---------------+
; Clock                                             ; Slack ; End Point TNS ;
+---------------------------------------------------+-------+---------------+
; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.295 ; 0.000         ;
+---------------------------------------------------+-------+---------------+


+---------------------------------------------------------------------------+
; Fast Model Removal Summary                                                ;
+---------------------------------------------------+-------+---------------+
; Clock                                             ; Slack ; End Point TNS ;
+---------------------------------------------------+-------+---------------+
; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.585 ; 0.000         ;
+---------------------------------------------------+-------+---------------+


+----------------------------------------------------------------------------------+
; Fast Model Minimum Pulse Width Summary                                           ;
+---------------------------------------------------------+--------+---------------+
; Clock                                                   ; Slack  ; End Point TNS ;
+---------------------------------------------------------+--------+---------------+
; CLOCK_50                                                ; -1.380 ; -28.380       ;
; ROW[0]                                                  ; -1.222 ; -1.594        ;
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; -0.500 ; -91.000       ;
; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; -0.500 ; -21.000       ;
; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; -0.500 ; -3.000        ;
; FSM:fsm1|state.S1                                       ; 0.500  ; 0.000         ;
; FSM:fsm1|state.S2                                       ; 0.500  ; 0.000         ;
; FSM:fsm1|state.S3                                       ; 0.500  ; 0.000         ;
+---------------------------------------------------------+--------+---------------+


+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Setup: 'FSM:fsm1|state.S2'                                                                                                                                             ;
+---------+---------------------+-------------------------------+------------------------------------------------------+-------------------+--------------+------------+------------+
; Slack   ; From Node           ; To Node                       ; Launch Clock                                         ; Latch Clock       ; Relationship ; Clock Skew ; Data Delay ;
+---------+---------------------+-------------------------------+------------------------------------------------------+-------------------+--------------+------------+------------+
; -19.981 ; ALU:ALU1|answer[0]  ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.218      ; 20.805     ;
; -19.956 ; ALU:ALU1|answer[1]  ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.218      ; 20.780     ;
; -19.869 ; ALU:ALU1|answer[2]  ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.218      ; 20.693     ;
; -19.855 ; ALU:ALU1|answer[4]  ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.218      ; 20.679     ;
; -19.837 ; ALU:ALU1|answer[0]  ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.206      ; 20.640     ;
; -19.821 ; ALU:ALU1|answer[3]  ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.218      ; 20.645     ;
; -19.812 ; ALU:ALU1|answer[1]  ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.206      ; 20.615     ;
; -19.810 ; ALU:ALU1|answer[0]  ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.207      ; 20.615     ;
; -19.794 ; ALU:ALU1|answer[6]  ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.218      ; 20.618     ;
; -19.785 ; ALU:ALU1|answer[1]  ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.207      ; 20.590     ;
; -19.774 ; ALU:ALU1|answer[12] ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.217      ; 20.597     ;
; -19.765 ; ALU:ALU1|answer[10] ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.218      ; 20.589     ;
; -19.750 ; ALU:ALU1|answer[7]  ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.218      ; 20.574     ;
; -19.749 ; ALU:ALU1|answer[5]  ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.218      ; 20.573     ;
; -19.725 ; ALU:ALU1|answer[2]  ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.206      ; 20.528     ;
; -19.711 ; ALU:ALU1|answer[4]  ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.206      ; 20.514     ;
; -19.702 ; ALU:ALU1|answer[11] ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.218      ; 20.526     ;
; -19.698 ; ALU:ALU1|answer[2]  ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.207      ; 20.503     ;
; -19.688 ; ALU:ALU1|answer[9]  ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.218      ; 20.512     ;
; -19.684 ; ALU:ALU1|answer[4]  ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.207      ; 20.489     ;
; -19.680 ; ALU:ALU1|answer[0]  ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.199      ; 20.486     ;
; -19.677 ; ALU:ALU1|answer[3]  ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.206      ; 20.480     ;
; -19.655 ; ALU:ALU1|answer[1]  ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.199      ; 20.461     ;
; -19.650 ; ALU:ALU1|answer[6]  ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.206      ; 20.453     ;
; -19.650 ; ALU:ALU1|answer[3]  ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.207      ; 20.455     ;
; -19.645 ; ALU:ALU1|answer[8]  ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.218      ; 20.469     ;
; -19.630 ; ALU:ALU1|answer[13] ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.218      ; 20.454     ;
; -19.630 ; ALU:ALU1|answer[12] ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.205      ; 20.432     ;
; -19.623 ; ALU:ALU1|answer[6]  ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.207      ; 20.428     ;
; -19.621 ; ALU:ALU1|answer[10] ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.206      ; 20.424     ;
; -19.619 ; ALU:ALU1|answer[14] ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.218      ; 20.443     ;
; -19.606 ; ALU:ALU1|answer[7]  ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.206      ; 20.409     ;
; -19.605 ; ALU:ALU1|answer[5]  ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.206      ; 20.408     ;
; -19.603 ; ALU:ALU1|answer[12] ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.206      ; 20.407     ;
; -19.594 ; ALU:ALU1|answer[10] ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.207      ; 20.399     ;
; -19.586 ; ALU:ALU1|answer[15] ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.218      ; 20.410     ;
; -19.579 ; ALU:ALU1|answer[7]  ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.207      ; 20.384     ;
; -19.578 ; ALU:ALU1|answer[5]  ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.207      ; 20.383     ;
; -19.568 ; ALU:ALU1|answer[2]  ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.199      ; 20.374     ;
; -19.566 ; ALU:ALU1|answer[0]  ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.214      ; 20.382     ;
; -19.558 ; ALU:ALU1|answer[11] ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.206      ; 20.361     ;
; -19.554 ; ALU:ALU1|answer[4]  ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.199      ; 20.360     ;
; -19.547 ; ALU:ALU1|answer[16] ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.218      ; 20.371     ;
; -19.544 ; ALU:ALU1|answer[9]  ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.206      ; 20.347     ;
; -19.541 ; ALU:ALU1|answer[1]  ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.214      ; 20.357     ;
; -19.531 ; ALU:ALU1|answer[11] ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.207      ; 20.336     ;
; -19.520 ; ALU:ALU1|answer[3]  ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.199      ; 20.326     ;
; -19.517 ; ALU:ALU1|answer[9]  ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.207      ; 20.322     ;
; -19.506 ; ALU:ALU1|answer[17] ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.218      ; 20.330     ;
; -19.501 ; ALU:ALU1|answer[8]  ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.206      ; 20.304     ;
; -19.493 ; ALU:ALU1|answer[6]  ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.199      ; 20.299     ;
; -19.486 ; ALU:ALU1|answer[13] ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.206      ; 20.289     ;
; -19.478 ; ALU:ALU1|answer[0]  ; displayMUX:dMUX1|register[5]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.214      ; 20.288     ;
; -19.475 ; ALU:ALU1|answer[14] ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.206      ; 20.278     ;
; -19.474 ; ALU:ALU1|answer[8]  ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.207      ; 20.279     ;
; -19.473 ; ALU:ALU1|answer[12] ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.198      ; 20.278     ;
; -19.466 ; ALU:ALU1|answer[0]  ; displayMUX:dMUX1|register[6]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.213      ; 20.286     ;
; -19.464 ; ALU:ALU1|answer[10] ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.199      ; 20.270     ;
; -19.461 ; ALU:ALU1|answer[0]  ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.213      ; 20.280     ;
; -19.459 ; ALU:ALU1|answer[13] ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.207      ; 20.264     ;
; -19.454 ; ALU:ALU1|answer[2]  ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.214      ; 20.270     ;
; -19.453 ; ALU:ALU1|answer[1]  ; displayMUX:dMUX1|register[5]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.214      ; 20.263     ;
; -19.449 ; ALU:ALU1|answer[7]  ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.199      ; 20.255     ;
; -19.448 ; ALU:ALU1|answer[14] ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.207      ; 20.253     ;
; -19.448 ; ALU:ALU1|answer[5]  ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.199      ; 20.254     ;
; -19.442 ; ALU:ALU1|answer[15] ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.206      ; 20.245     ;
; -19.441 ; ALU:ALU1|answer[1]  ; displayMUX:dMUX1|register[6]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.213      ; 20.261     ;
; -19.440 ; ALU:ALU1|answer[4]  ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.214      ; 20.256     ;
; -19.436 ; ALU:ALU1|answer[1]  ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.213      ; 20.255     ;
; -19.424 ; ALU:ALU1|answer[18] ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.217      ; 20.247     ;
; -19.415 ; ALU:ALU1|answer[15] ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.207      ; 20.220     ;
; -19.406 ; ALU:ALU1|answer[3]  ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.214      ; 20.222     ;
; -19.403 ; ALU:ALU1|answer[16] ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.206      ; 20.206     ;
; -19.401 ; ALU:ALU1|answer[11] ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.199      ; 20.207     ;
; -19.387 ; ALU:ALU1|answer[9]  ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.199      ; 20.193     ;
; -19.379 ; ALU:ALU1|answer[6]  ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.214      ; 20.195     ;
; -19.376 ; ALU:ALU1|answer[16] ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.207      ; 20.181     ;
; -19.366 ; ALU:ALU1|answer[2]  ; displayMUX:dMUX1|register[5]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.214      ; 20.176     ;
; -19.362 ; ALU:ALU1|answer[17] ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.206      ; 20.165     ;
; -19.359 ; ALU:ALU1|answer[12] ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.213      ; 20.174     ;
; -19.354 ; ALU:ALU1|answer[2]  ; displayMUX:dMUX1|register[6]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.213      ; 20.174     ;
; -19.352 ; ALU:ALU1|answer[4]  ; displayMUX:dMUX1|register[5]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.214      ; 20.162     ;
; -19.350 ; ALU:ALU1|answer[10] ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.214      ; 20.166     ;
; -19.349 ; ALU:ALU1|answer[2]  ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.213      ; 20.168     ;
; -19.344 ; ALU:ALU1|answer[8]  ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.199      ; 20.150     ;
; -19.340 ; ALU:ALU1|answer[4]  ; displayMUX:dMUX1|register[6]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.213      ; 20.160     ;
; -19.335 ; ALU:ALU1|answer[17] ; displayMUX:dMUX1|register[10] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.207      ; 20.140     ;
; -19.335 ; ALU:ALU1|answer[7]  ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.214      ; 20.151     ;
; -19.335 ; ALU:ALU1|answer[4]  ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.213      ; 20.154     ;
; -19.334 ; ALU:ALU1|answer[5]  ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.214      ; 20.150     ;
; -19.329 ; ALU:ALU1|answer[13] ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.199      ; 20.135     ;
; -19.319 ; ALU:ALU1|answer[19] ; displayMUX:dMUX1|register[11] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.218      ; 20.143     ;
; -19.318 ; ALU:ALU1|answer[14] ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.199      ; 20.124     ;
; -19.318 ; ALU:ALU1|answer[3]  ; displayMUX:dMUX1|register[5]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.214      ; 20.128     ;
; -19.306 ; ALU:ALU1|answer[3]  ; displayMUX:dMUX1|register[6]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.213      ; 20.126     ;
; -19.301 ; ALU:ALU1|answer[3]  ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.213      ; 20.120     ;
; -19.291 ; ALU:ALU1|answer[6]  ; displayMUX:dMUX1|register[5]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.214      ; 20.101     ;
; -19.287 ; ALU:ALU1|answer[11] ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.214      ; 20.103     ;
; -19.285 ; ALU:ALU1|answer[15] ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.199      ; 20.091     ;
; -19.280 ; ALU:ALU1|answer[18] ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 1.000        ; 0.205      ; 20.082     ;
+---------+---------------------+-------------------------------+------------------------------------------------------+-------------------+--------------+------------+------------+


+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Setup: 'inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]'                                                                                                          ;
+--------+--------------------------------+---------------------+-------------------+------------------------------------------------------+--------------+------------+------------+
; Slack  ; From Node                      ; To Node             ; Launch Clock      ; Latch Clock                                          ; Relationship ; Clock Skew ; Data Delay ;
+--------+--------------------------------+---------------------+-------------------+------------------------------------------------------+--------------+------------+------------+
; -3.589 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.313     ; 3.808      ;
; -3.546 ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.314     ; 3.764      ;
; -3.523 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[6]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.339     ; 3.716      ;
; -3.520 ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.331     ; 3.721      ;
; -3.502 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.339     ; 3.695      ;
; -3.499 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[9]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.339     ; 3.692      ;
; -3.494 ; registerTransfer:rT1|storeB[4] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.333     ; 3.693      ;
; -3.486 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.199     ; 3.819      ;
; -3.480 ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[6]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.340     ; 3.672      ;
; -3.459 ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.340     ; 3.651      ;
; -3.456 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.358     ; 3.630      ;
; -3.456 ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[9]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.340     ; 3.648      ;
; -3.454 ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[6]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.357     ; 3.629      ;
; -3.442 ; registerTransfer:rT1|storeB[5] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.331     ; 3.643      ;
; -3.435 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.225     ; 3.742      ;
; -3.433 ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.357     ; 3.608      ;
; -3.430 ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[9]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.357     ; 3.605      ;
; -3.428 ; registerTransfer:rT1|storeB[4] ; ALU:ALU1|answer[6]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.359     ; 3.601      ;
; -3.417 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[15] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.339     ; 3.610      ;
; -3.417 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[16] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.339     ; 3.610      ;
; -3.416 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[13] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.339     ; 3.609      ;
; -3.414 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.225     ; 3.721      ;
; -3.414 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.339     ; 3.607      ;
; -3.413 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[19] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.339     ; 3.606      ;
; -3.412 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[17] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.339     ; 3.605      ;
; -3.407 ; registerTransfer:rT1|storeB[4] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.359     ; 3.580      ;
; -3.404 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[10] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.339     ; 3.597      ;
; -3.404 ; registerTransfer:rT1|storeB[4] ; ALU:ALU1|answer[9]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.359     ; 3.577      ;
; -3.391 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[19] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.225     ; 3.698      ;
; -3.390 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[6]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.384     ; 3.538      ;
; -3.385 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[9]  ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.225     ; 3.692      ;
; -3.382 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[10] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.225     ; 3.689      ;
; -3.381 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[15] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.225     ; 3.688      ;
; -3.378 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[17] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.225     ; 3.685      ;
; -3.376 ; registerTransfer:rT1|storeB[5] ; ALU:ALU1|answer[6]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.357     ; 3.551      ;
; -3.375 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[16] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.225     ; 3.682      ;
; -3.374 ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[15] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.340     ; 3.566      ;
; -3.374 ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[16] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.340     ; 3.566      ;
; -3.373 ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[13] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.340     ; 3.565      ;
; -3.371 ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.340     ; 3.563      ;
; -3.370 ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[19] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.340     ; 3.562      ;
; -3.369 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.384     ; 3.517      ;
; -3.369 ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[17] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.340     ; 3.561      ;
; -3.368 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[13] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.225     ; 3.675      ;
; -3.367 ; registerTransfer:rT1|storeA[6] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.199     ; 3.700      ;
; -3.367 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[8]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.339     ; 3.560      ;
; -3.366 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[9]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.384     ; 3.514      ;
; -3.364 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[18] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.224     ; 3.672      ;
; -3.361 ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[10] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.340     ; 3.553      ;
; -3.358 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[18] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.338     ; 3.552      ;
; -3.355 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[12] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.338     ; 3.549      ;
; -3.355 ; registerTransfer:rT1|storeB[5] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.357     ; 3.530      ;
; -3.352 ; registerTransfer:rT1|storeB[5] ; ALU:ALU1|answer[9]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.357     ; 3.527      ;
; -3.349 ; registerTransfer:rT1|storeA[1] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.183     ; 3.698      ;
; -3.348 ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[15] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.357     ; 3.523      ;
; -3.348 ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[16] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.357     ; 3.523      ;
; -3.347 ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[13] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.357     ; 3.522      ;
; -3.345 ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.357     ; 3.520      ;
; -3.344 ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[19] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.357     ; 3.519      ;
; -3.343 ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[17] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.357     ; 3.518      ;
; -3.335 ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[10] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.357     ; 3.510      ;
; -3.325 ; registerTransfer:rT1|storeB[1] ; ALU:ALU1|answer[7]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.339     ; 3.518      ;
; -3.324 ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[8]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.340     ; 3.516      ;
; -3.322 ; registerTransfer:rT1|storeB[4] ; ALU:ALU1|answer[15] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.359     ; 3.495      ;
; -3.322 ; registerTransfer:rT1|storeB[4] ; ALU:ALU1|answer[16] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.359     ; 3.495      ;
; -3.321 ; registerTransfer:rT1|storeB[4] ; ALU:ALU1|answer[13] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.359     ; 3.494      ;
; -3.319 ; registerTransfer:rT1|storeB[4] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.359     ; 3.492      ;
; -3.318 ; registerTransfer:rT1|storeB[4] ; ALU:ALU1|answer[19] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.359     ; 3.491      ;
; -3.317 ; registerTransfer:rT1|storeB[4] ; ALU:ALU1|answer[17] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.359     ; 3.490      ;
; -3.316 ; registerTransfer:rT1|storeA[6] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.225     ; 3.623      ;
; -3.315 ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[18] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.339     ; 3.508      ;
; -3.312 ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[12] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.339     ; 3.505      ;
; -3.309 ; registerTransfer:rT1|storeB[4] ; ALU:ALU1|answer[10] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.359     ; 3.482      ;
; -3.298 ; registerTransfer:rT1|storeA[1] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.209     ; 3.621      ;
; -3.298 ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[8]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.357     ; 3.473      ;
; -3.297 ; registerTransfer:rT1|storeA[5] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.201     ; 3.628      ;
; -3.295 ; registerTransfer:rT1|storeA[6] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.225     ; 3.602      ;
; -3.289 ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[18] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.356     ; 3.465      ;
; -3.288 ; registerTransfer:rT1|storeA[4] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.201     ; 3.619      ;
; -3.286 ; registerTransfer:rT1|storeB[6] ; ALU:ALU1|answer[12] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.356     ; 3.462      ;
; -3.284 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[15] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.384     ; 3.432      ;
; -3.284 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[16] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.384     ; 3.432      ;
; -3.283 ; registerTransfer:rT1|storeA[1] ; ALU:ALU1|answer[6]  ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.209     ; 3.606      ;
; -3.283 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[13] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.384     ; 3.431      ;
; -3.282 ; registerTransfer:rT1|storeB[2] ; ALU:ALU1|answer[7]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.340     ; 3.474      ;
; -3.281 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.384     ; 3.429      ;
; -3.280 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[19] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.384     ; 3.428      ;
; -3.279 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[12] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.224     ; 3.587      ;
; -3.279 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[17] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.384     ; 3.427      ;
; -3.277 ; registerTransfer:rT1|storeA[1] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.209     ; 3.600      ;
; -3.272 ; registerTransfer:rT1|storeA[6] ; ALU:ALU1|answer[19] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.225     ; 3.579      ;
; -3.272 ; registerTransfer:rT1|storeB[4] ; ALU:ALU1|answer[8]  ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.359     ; 3.445      ;
; -3.271 ; registerTransfer:rT1|storeB[7] ; ALU:ALU1|answer[10] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.384     ; 3.419      ;
; -3.270 ; registerTransfer:rT1|storeB[3] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.316     ; 3.486      ;
; -3.270 ; registerTransfer:rT1|storeB[5] ; ALU:ALU1|answer[15] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.357     ; 3.445      ;
; -3.270 ; registerTransfer:rT1|storeB[5] ; ALU:ALU1|answer[16] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.357     ; 3.445      ;
; -3.269 ; registerTransfer:rT1|storeA[3] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.199     ; 3.602      ;
; -3.269 ; registerTransfer:rT1|storeB[5] ; ALU:ALU1|answer[13] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.357     ; 3.444      ;
; -3.267 ; registerTransfer:rT1|storeB[5] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S3 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.357     ; 3.442      ;
; -3.266 ; registerTransfer:rT1|storeA[7] ; ALU:ALU1|answer[8]  ; FSM:fsm1|state.S1 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.500        ; -0.225     ; 3.573      ;
+--------+--------------------------------+---------------------+-------------------+------------------------------------------------------+--------------+------------+------------+


+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Setup: 'CLOCK_50'                                                                                                                                                               ;
+--------+------------------------------------------------------+------------------------------------------------------+--------------+-------------+--------------+------------+------------+
; Slack  ; From Node                                            ; To Node                                              ; Launch Clock ; Latch Clock ; Relationship ; Clock Skew ; Data Delay ;
+--------+------------------------------------------------------+------------------------------------------------------+--------------+-------------+--------------+------------+------------+
; -1.579 ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.611      ;
; -1.529 ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.561      ;
; -1.522 ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.546      ;
; -1.510 ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.542      ;
; -1.475 ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.507      ;
; -1.472 ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.496      ;
; -1.453 ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.477      ;
; -1.427 ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.008      ; 2.467      ;
; -1.420 ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.452      ;
; -1.418 ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.442      ;
; -1.410 ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.434      ;
; -1.410 ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.434      ;
; -1.409 ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.433      ;
; -1.409 ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.433      ;
; -1.407 ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.431      ;
; -1.384 ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.008      ; 2.424      ;
; -1.370 ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.402      ;
; -1.363 ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.387      ;
; -1.360 ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.384      ;
; -1.360 ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.384      ;
; -1.359 ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.383      ;
; -1.359 ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.383      ;
; -1.357 ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.381      ;
; -1.350 ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.008      ; 2.390      ;
; -1.341 ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.365      ;
; -1.341 ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.365      ;
; -1.340 ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.364      ;
; -1.340 ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.364      ;
; -1.338 ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.362      ;
; -1.331 ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.363      ;
; -1.327 ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.359      ;
; -1.306 ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.330      ;
; -1.306 ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.330      ;
; -1.305 ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.329      ;
; -1.305 ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.329      ;
; -1.303 ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.327      ;
; -1.295 ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.327      ;
; -1.293 ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.325      ;
; -1.274 ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.298      ;
; -1.258 ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.290      ;
; -1.258 ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.290      ;
; -1.257 ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.289      ;
; -1.257 ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.289      ;
; -1.255 ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.287      ;
; -1.251 ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.275      ;
; -1.251 ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.275      ;
; -1.250 ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.274      ;
; -1.250 ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.274      ;
; -1.248 ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.272      ;
; -1.238 ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.262      ;
; -1.225 ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.257      ;
; -1.215 ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.247      ;
; -1.215 ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.247      ;
; -1.214 ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.246      ;
; -1.214 ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.246      ;
; -1.212 ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.244      ;
; -1.212 ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.244      ;
; -1.181 ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.213      ;
; -1.181 ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.213      ;
; -1.180 ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.212      ;
; -1.180 ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.212      ;
; -1.178 ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.210      ;
; -1.168 ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.192      ;
; -1.162 ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 2.194      ;
; -1.162 ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.186      ;
; -1.162 ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.186      ;
; -1.161 ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.185      ;
; -1.161 ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.185      ;
; -1.159 ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.183      ;
; -1.155 ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.179      ;
; -1.126 ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.150      ;
; -1.126 ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.150      ;
; -1.125 ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.149      ;
; -1.125 ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.149      ;
; -1.123 ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.147      ;
; -1.105 ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.129      ;
; -1.056 ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.080      ;
; -1.056 ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.080      ;
; -1.055 ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.079      ;
; -1.055 ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.079      ;
; -1.053 ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.077      ;
; -1.043 ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.067      ;
; -1.043 ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.067      ;
; -1.042 ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.066      ;
; -1.042 ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.066      ;
; -1.040 ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.064      ;
; -0.993 ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.017      ;
; -0.993 ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.017      ;
; -0.992 ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.016      ;
; -0.992 ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.016      ;
; -0.991 ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.008      ; 2.031      ;
; -0.990 ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; CLOCK_50     ; CLOCK_50    ; 1.000        ; -0.008     ; 2.014      ;
; -0.987 ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.008      ; 2.027      ;
; -0.960 ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.008      ; 2.000      ;
; -0.956 ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.008      ; 1.996      ;
; -0.934 ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 1.966      ;
; -0.930 ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 1.962      ;
; -0.903 ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 1.935      ;
; -0.899 ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.000      ; 1.931      ;
; -0.897 ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50     ; CLOCK_50    ; 1.000        ; 0.008      ; 1.937      ;
+--------+------------------------------------------------------+------------------------------------------------------+--------------+-------------+--------------+------------+------------+


+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Setup: 'inputManager:iM1|clockDivider:clock500Hz|newClock'                                                                                                                                                                                                     ;
+--------+-------------------------------------------------------+---------------------------------------------------------+---------------------------------------------------+---------------------------------------------------+--------------+------------+------------+
; Slack  ; From Node                                             ; To Node                                                 ; Launch Clock                                      ; Latch Clock                                       ; Relationship ; Clock Skew ; Data Delay ;
+--------+-------------------------------------------------------+---------------------------------------------------------+---------------------------------------------------+---------------------------------------------------+--------------+------------+------------+
; -0.976 ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[1] ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -1.198     ; 0.810      ;
; -0.875 ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[0] ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -1.152     ; 0.755      ;
; -0.870 ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4]    ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.500        ; -0.447     ; 0.955      ;
; -0.853 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[10]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.026      ; 1.911      ;
; -0.853 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[9]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.026      ; 1.911      ;
; -0.853 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[8]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.026      ; 1.911      ;
; -0.846 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[11]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.028      ; 1.906      ;
; -0.846 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[3]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.028      ; 1.906      ;
; -0.846 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[7]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.028      ; 1.906      ;
; -0.846 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[1]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.028      ; 1.906      ;
; -0.846 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[0]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.028      ; 1.906      ;
; -0.841 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.013      ; 1.886      ;
; -0.838 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.013      ; 1.883      ;
; -0.750 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.013      ; 1.795      ;
; -0.745 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[2]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.030      ; 1.807      ;
; -0.745 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[6]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.030      ; 1.807      ;
; -0.745 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[5]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.030      ; 1.807      ;
; -0.745 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[4]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.030      ; 1.807      ;
; -0.739 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[10]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.013      ; 1.784      ;
; -0.739 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[9]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.013      ; 1.784      ;
; -0.739 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[8]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.013      ; 1.784      ;
; -0.732 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[11]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.015      ; 1.779      ;
; -0.732 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[3]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.015      ; 1.779      ;
; -0.732 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[7]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.015      ; 1.779      ;
; -0.732 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[1]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.015      ; 1.779      ;
; -0.732 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[0]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.015      ; 1.779      ;
; -0.713 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; FSM:fsm1|state.S4                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.013      ; 1.758      ;
; -0.699 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[10]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.010      ; 1.741      ;
; -0.699 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[9]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.010      ; 1.741      ;
; -0.699 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[8]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.010      ; 1.741      ;
; -0.692 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[11]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 1.736      ;
; -0.692 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[3]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 1.736      ;
; -0.692 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[7]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 1.736      ;
; -0.692 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[1]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 1.736      ;
; -0.692 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[0]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 1.736      ;
; -0.685 ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -1.189     ; 0.528      ;
; -0.685 ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[2] ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -1.189     ; 0.528      ;
; -0.673 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[0] ; recall:r1|ld_m                                          ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.607     ; 1.098      ;
; -0.631 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[2]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.017      ; 1.680      ;
; -0.631 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[6]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.017      ; 1.680      ;
; -0.631 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[5]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.017      ; 1.680      ;
; -0.631 ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]  ; storeBCD:sB1|register[4]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.017      ; 1.680      ;
; -0.630 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[1] ; recall:r1|ld_m                                          ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.607     ; 1.055      ;
; -0.616 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[10]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.010      ; 1.658      ;
; -0.616 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[9]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.010      ; 1.658      ;
; -0.616 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[8]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.010      ; 1.658      ;
; -0.614 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[4] ; recall:r1|ld_m                                          ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.605     ; 1.041      ;
; -0.609 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[11]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 1.653      ;
; -0.609 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[3]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 1.653      ;
; -0.609 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[7]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 1.653      ;
; -0.609 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[1]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 1.653      ;
; -0.609 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[0]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 1.653      ;
; -0.606 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[2]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.014      ; 1.652      ;
; -0.606 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[2]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.014      ; 1.652      ;
; -0.600 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[0] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.003     ; 1.629      ;
; -0.597 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[0] ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.003     ; 1.626      ;
; -0.591 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[6]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.014      ; 1.637      ;
; -0.591 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[5]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.014      ; 1.637      ;
; -0.591 ; twoClockPulse:tC1|doublePulse[4]                      ; storeBCD:sB1|register[4]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.014      ; 1.637      ;
; -0.580 ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4]    ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.657     ; 0.955      ;
; -0.573 ; FSM:fsm1|state.S0                                     ; storeBCD:sB1|register[10]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.013      ; 1.618      ;
; -0.573 ; FSM:fsm1|state.S0                                     ; storeBCD:sB1|register[9]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.013      ; 1.618      ;
; -0.573 ; FSM:fsm1|state.S0                                     ; storeBCD:sB1|register[8]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.013      ; 1.618      ;
; -0.569 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[0] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.003     ; 1.598      ;
; -0.566 ; FSM:fsm1|state.S0                                     ; storeBCD:sB1|register[11]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.015      ; 1.613      ;
; -0.566 ; FSM:fsm1|state.S0                                     ; storeBCD:sB1|register[3]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.015      ; 1.613      ;
; -0.566 ; FSM:fsm1|state.S0                                     ; storeBCD:sB1|register[7]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.015      ; 1.613      ;
; -0.566 ; FSM:fsm1|state.S0                                     ; storeBCD:sB1|register[1]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.015      ; 1.613      ;
; -0.566 ; FSM:fsm1|state.S0                                     ; storeBCD:sB1|register[0]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.015      ; 1.613      ;
; -0.558 ; twoClockPulse:tC1|doublePulse[1]                      ; storeBCD:sB1|register[2]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.014      ; 1.604      ;
; -0.557 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[1] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.003     ; 1.586      ;
; -0.554 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[1] ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.003     ; 1.583      ;
; -0.541 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[4] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.001     ; 1.572      ;
; -0.538 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[4] ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.001     ; 1.569      ;
; -0.537 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[6]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.014      ; 1.583      ;
; -0.531 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4] ; storeBCD:sB1|register[12]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.017      ; 1.580      ;
; -0.531 ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[2]   ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -1.213     ; 0.350      ;
; -0.526 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[1] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.003     ; 1.555      ;
; -0.510 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[4] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.001     ; 1.541      ;
; -0.508 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[5]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.014      ; 1.554      ;
; -0.508 ; twoClockPulse:tC1|doublePulse[0]                      ; storeBCD:sB1|register[4]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.014      ; 1.554      ;
; -0.503 ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[0] ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -1.189     ; 0.346      ;
; -0.499 ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[1] ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -1.189     ; 0.342      ;
; -0.489 ; twoClockPulse:tC1|doublePulse[1]                      ; storeBCD:sB1|register[6]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.014      ; 1.535      ;
; -0.485 ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[1]   ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -1.213     ; 0.304      ;
; -0.484 ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4]   ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -1.213     ; 0.303      ;
; -0.483 ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[0]   ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -1.213     ; 0.302      ;
; -0.481 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.000      ; 1.513      ;
; -0.478 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.000      ; 1.510      ;
; -0.473 ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[0] ; storeBCD:sB1|register[0]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.028      ; 1.533      ;
; -0.472 ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[0] ; FSM:fsm1|state.S4                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -0.003     ; 1.501      ;
; -0.470 ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[2]   ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -1.214     ; 0.288      ;
; -0.465 ; FSM:fsm1|state.S0                                     ; storeBCD:sB1|register[2]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.017      ; 1.514      ;
; -0.465 ; FSM:fsm1|state.S0                                     ; storeBCD:sB1|register[6]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.017      ; 1.514      ;
; -0.465 ; FSM:fsm1|state.S0                                     ; storeBCD:sB1|register[5]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.017      ; 1.514      ;
; -0.465 ; FSM:fsm1|state.S0                                     ; storeBCD:sB1|register[4]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.017      ; 1.514      ;
; -0.464 ; twoClockPulse:tC1|doublePulse[1]                      ; storeBCD:sB1|register[3]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 1.508      ;
; -0.460 ; twoClockPulse:tC1|doublePulse[1]                      ; storeBCD:sB1|register[1]                                ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 1.504      ;
; -0.456 ; twoClockPulse:tC1|doublePulse[1]                      ; storeBCD:sB1|register[11]                               ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.012      ; 1.500      ;
; -0.455 ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[3]   ; ROW[0]                                            ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; -1.212     ; 0.275      ;
+--------+-------------------------------------------------------+---------------------------------------------------------+---------------------------------------------------+---------------------------------------------------+--------------+------------+------------+


+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Setup: 'FSM:fsm1|state.S3'                                                                                                                                                                            ;
+--------+------------------------------------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+
; Slack  ; From Node                                            ; To Node                         ; Launch Clock                                      ; Latch Clock       ; Relationship ; Clock Skew ; Data Delay ;
+--------+------------------------------------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+
; -0.687 ; memoryManagement:calcultorMemory|bcdOutputMemory[4]  ; registerTransfer:rT1|storeB[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.103      ; 0.936      ;
; -0.644 ; memoryManagement:calcultorMemory|bcdOutputMemory[7]  ; registerTransfer:rT1|storeB[7]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.128      ; 0.871      ;
; -0.638 ; storeBCD:sB1|register[5]                             ; registerTransfer:rT1|storeB[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.103      ; 0.876      ;
; -0.630 ; storeBCD:sB1|register[2]                             ; registerTransfer:rT1|storeB[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.086      ; 0.860      ;
; -0.603 ; storeBCD:sB1|register[12]                            ; registerTransfer:rT1|storeB[12] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.100      ; 0.848      ;
; -0.598 ; memoryManagement:calcultorMemory|bcdOutputMemory[11] ; registerTransfer:rT1|storeB[11] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.143      ; 0.835      ;
; -0.598 ; storeBCD:sB1|register[7]                             ; registerTransfer:rT1|storeB[7]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.132      ; 0.829      ;
; -0.578 ; storeBCD:sB1|register[6]                             ; registerTransfer:rT1|storeB[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.103      ; 0.808      ;
; -0.578 ; storeBCD:sB1|register[4]                             ; registerTransfer:rT1|storeB[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.105      ; 0.829      ;
; -0.569 ; memoryManagement:calcultorMemory|bcdOutputMemory[0]  ; registerTransfer:rT1|storeB[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.066      ; 0.785      ;
; -0.549 ; storeBCD:sB1|register[3]                             ; registerTransfer:rT1|storeB[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.090      ; 0.793      ;
; -0.530 ; storeBCD:sB1|register[9]                             ; registerTransfer:rT1|storeB[9]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.090      ; 0.769      ;
; -0.511 ; memoryManagement:calcultorMemory|bcdOutputMemory[9]  ; registerTransfer:rT1|storeB[9]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.090      ; 0.750      ;
; -0.502 ; memoryManagement:calcultorMemory|bcdOutputMemory[3]  ; registerTransfer:rT1|storeB[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.090      ; 0.746      ;
; -0.485 ; storeBCD:sB1|register[10]                            ; registerTransfer:rT1|storeB[10] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.082      ; 0.713      ;
; -0.475 ; memoryManagement:calcultorMemory|bcdOutputMemory[6]  ; registerTransfer:rT1|storeB[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.101      ; 0.703      ;
; -0.474 ; storeBCD:sB1|register[0]                             ; registerTransfer:rT1|storeB[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.091      ; 0.715      ;
; -0.472 ; memoryManagement:calcultorMemory|bcdOutputMemory[5]  ; registerTransfer:rT1|storeB[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.101      ; 0.708      ;
; -0.459 ; memoryManagement:calcultorMemory|bcdOutputMemory[10] ; registerTransfer:rT1|storeB[10] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.082      ; 0.687      ;
; -0.446 ; storeBCD:sB1|register[8]                             ; registerTransfer:rT1|storeB[8]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.091      ; 0.745      ;
; -0.445 ; memoryManagement:calcultorMemory|bcdOutputMemory[2]  ; registerTransfer:rT1|storeB[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.103      ; 0.692      ;
; -0.424 ; memoryManagement:calcultorMemory|bcdOutputMemory[8]  ; registerTransfer:rT1|storeB[8]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.089      ; 0.721      ;
; -0.402 ; storeBCD:sB1|register[11]                            ; registerTransfer:rT1|storeB[11] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.147      ; 0.643      ;
; -0.385 ; memoryManagement:calcultorMemory|bcdOutputMemory[1]  ; registerTransfer:rT1|storeB[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.087      ; 0.692      ;
; -0.336 ; storeBCD:sB1|register[1]                             ; registerTransfer:rT1|storeB[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.087      ; 0.643      ;
; -0.326 ; memoryManagement:calcultorMemory|bcdOutputMemory[12] ; registerTransfer:rT1|storeB[12] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.104      ; 0.575      ;
; -0.286 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[8]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.708      ; 1.202      ;
; -0.222 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.707      ; 1.073      ;
; -0.221 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.709      ; 1.084      ;
; -0.211 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.706      ; 1.137      ;
; -0.208 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[9]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.707      ; 1.064      ;
; -0.169 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.724      ; 1.028      ;
; -0.159 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[12] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.708      ; 1.012      ;
; -0.158 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[10] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.699      ; 1.003      ;
; -0.144 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.710      ; 1.004      ;
; -0.125 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.726      ; 0.997      ;
; -0.090 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[11] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.766      ; 0.950      ;
; -0.040 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.724      ; 0.891      ;
; 0.012  ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[7]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; 0.500        ; 0.751      ; 0.838      ;
+--------+------------------------------------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+


+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Setup: 'FSM:fsm1|state.S1'                                                                                                                                                 ;
+--------+---------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+
; Slack  ; From Node                 ; To Node                         ; Launch Clock                                      ; Latch Clock       ; Relationship ; Clock Skew ; Data Delay ;
+--------+---------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+
; -0.306 ; storeBCD:sB1|register[8]  ; registerTransfer:rT1|storeA[8]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; -0.024     ; 0.364      ;
; -0.306 ; storeBCD:sB1|register[6]  ; registerTransfer:rT1|storeA[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; -0.029     ; 0.361      ;
; -0.306 ; storeBCD:sB1|register[1]  ; registerTransfer:rT1|storeA[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; -0.043     ; 0.358      ;
; -0.299 ; storeBCD:sB1|register[11] ; registerTransfer:rT1|storeA[11] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; -0.028     ; 0.359      ;
; -0.296 ; storeBCD:sB1|register[5]  ; registerTransfer:rT1|storeA[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; -0.027     ; 0.354      ;
; -0.292 ; storeBCD:sB1|register[12] ; registerTransfer:rT1|storeA[12] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; -0.039     ; 0.360      ;
; -0.291 ; storeBCD:sB1|register[4]  ; registerTransfer:rT1|storeA[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; -0.027     ; 0.357      ;
; -0.290 ; storeBCD:sB1|register[10] ; registerTransfer:rT1|storeA[10] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; -0.026     ; 0.366      ;
; -0.289 ; storeBCD:sB1|register[9]  ; registerTransfer:rT1|storeA[9]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; -0.027     ; 0.353      ;
; -0.288 ; storeBCD:sB1|register[0]  ; registerTransfer:rT1|storeA[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; -0.028     ; 0.362      ;
; -0.286 ; storeBCD:sB1|register[3]  ; registerTransfer:rT1|storeA[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; -0.027     ; 0.363      ;
; -0.283 ; storeBCD:sB1|register[2]  ; registerTransfer:rT1|storeA[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; -0.029     ; 0.364      ;
; -0.263 ; storeBCD:sB1|register[7]  ; registerTransfer:rT1|storeA[7]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; 0.500        ; -0.027     ; 0.347      ;
+--------+---------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+


+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Setup: 'ROW[0]'                                                                                                                                                                                                                   ;
+-------+-------------------------------------------------------------------+-------------------------------------------------------+---------------------------------------------------+-------------+--------------+------------+------------+
; Slack ; From Node                                                         ; To Node                                               ; Launch Clock                                      ; Latch Clock ; Relationship ; Clock Skew ; Data Delay ;
+-------+-------------------------------------------------------------------+-------------------------------------------------------+---------------------------------------------------+-------------+--------------+------------+------------+
; 0.411 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 1.903      ; 1.587      ;
; 0.453 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 1.940      ; 1.636      ;
; 0.488 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 1.973      ; 1.643      ;
; 0.650 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 1.184      ; 1.129      ;
; 0.686 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 2.856      ; 2.270      ;
; 0.695 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.500        ; 1.606      ; 1.069      ;
; 0.766 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 1.184      ; 1.013      ;
; 0.800 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 2.877      ; 2.282      ;
; 0.808 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 1.221      ; 1.062      ;
; 0.814 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.500        ; 1.727      ; 1.062      ;
; 0.840 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 2.325      ; 1.643      ;
; 0.843 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 1.254      ; 1.069      ;
; 0.854 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 2.876      ; 2.173      ;
; 0.856 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 1.184      ; 0.923      ;
; 0.877 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 1.221      ; 0.993      ;
; 0.883 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.500        ; 1.727      ; 0.993      ;
; 0.911 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 1.903      ; 1.587      ;
; 0.953 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 1.940      ; 1.636      ;
; 0.958 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.500        ; 1.606      ; 0.806      ;
; 0.959 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 2.446      ; 1.636      ;
; 0.960 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 2.878      ; 2.071      ;
; 0.962 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.500        ; 1.606      ; 0.802      ;
; 0.982 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 1.221      ; 0.888      ;
; 0.988 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 1.973      ; 1.643      ;
; 0.988 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.500        ; 1.727      ; 0.888      ;
; 0.989 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.500        ; 1.606      ; 0.775      ;
; 1.003 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 2.865      ; 2.093      ;
; 1.007 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 2.878      ; 2.093      ;
; 1.018 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 2.859      ; 2.065      ;
; 1.021 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; ROW[0]                                            ; ROW[0]      ; 0.500        ; 2.819      ; 2.024      ;
; 1.024 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 1.184      ; 0.755      ;
; 1.097 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 1.221      ; 0.773      ;
; 1.103 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.500        ; 1.727      ; 0.773      ;
; 1.106 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 1.254      ; 0.806      ;
; 1.110 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 1.254      ; 0.802      ;
; 1.137 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.137      ; 1.600      ;
; 1.137 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 1.254      ; 0.775      ;
; 1.186 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 2.856      ; 2.270      ;
; 1.219 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.158      ; 1.644      ;
; 1.227 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.137      ; 1.510      ;
; 1.230 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.157      ; 1.578      ;
; 1.253 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.137      ; 1.484      ;
; 1.296 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.137      ; 1.441      ;
; 1.300 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 2.877      ; 2.282      ;
; 1.340 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 2.325      ; 1.643      ;
; 1.354 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 2.876      ; 2.173      ;
; 1.355 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.157      ; 1.453      ;
; 1.377 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.159      ; 1.504      ;
; 1.380 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.158      ; 1.483      ;
; 1.419 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.159      ; 1.462      ;
; 1.420 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.159      ; 1.392      ;
; 1.425 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.158      ; 1.438      ;
; 1.459 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 2.446      ; 1.636      ;
; 1.460 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 2.878      ; 2.071      ;
; 1.487 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.159      ; 1.394      ;
; 1.490 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.140      ; 1.374      ;
; 1.503 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 2.865      ; 2.093      ;
; 1.507 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 2.878      ; 2.093      ;
; 1.517 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.159      ; 1.295      ;
; 1.518 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 2.859      ; 2.065      ;
; 1.521 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; ROW[0]                                            ; ROW[0]      ; 1.000        ; 2.819      ; 2.024      ;
; 1.524 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.157      ; 1.284      ;
; 1.533 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.159      ; 1.348      ;
; 1.539 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.140      ; 1.325      ;
; 1.559 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.159      ; 1.253      ;
; 1.582 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.140      ; 1.282      ;
; 1.628 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.100      ; 1.198      ;
; 1.639 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.159      ; 1.173      ;
; 1.692 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.100      ; 1.134      ;
; 1.705 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.157      ; 1.103      ;
; 1.744 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.100      ; 1.082      ;
; 1.749 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.146      ; 1.128      ;
; 1.760 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.140      ; 1.104      ;
; 1.785 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.100      ; 1.041      ;
; 1.802 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.158      ; 1.061      ;
; 1.865 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.146      ; 1.012      ;
; 1.908 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.146      ; 0.969      ;
; 1.999 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 1.000        ; 2.146      ; 0.878      ;
+-------+-------------------------------------------------------------------+-------------------------------------------------------+---------------------------------------------------+-------------+--------------+------------+------------+


+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Setup: 'inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4]'                                                                                                                                                                           ;
+-------+---------------------------------------------------------+------------------------------+---------------------------------------------------+---------------------------------------------------------+--------------+------------+------------+
; Slack ; From Node                                               ; To Node                      ; Launch Clock                                      ; Latch Clock                                             ; Relationship ; Clock Skew ; Data Delay ;
+-------+---------------------------------------------------------+------------------------------+---------------------------------------------------+---------------------------------------------------------+--------------+------------+------------+
; 0.456 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[2] ; storeOperator:sO1|storeOp[2] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; 1.000        ; -0.099     ; 0.477      ;
; 0.522 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[1] ; storeOperator:sO1|storeOp[1] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; 1.000        ; -0.099     ; 0.411      ;
; 0.541 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[0] ; storeOperator:sO1|storeOp[0] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; 1.000        ; -0.099     ; 0.392      ;
+-------+---------------------------------------------------------+------------------------------+---------------------------------------------------+---------------------------------------------------------+--------------+------------+------------+


+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Hold: 'inputManager:iM1|clockDivider:clock500Hz|newClock'                                                                                                                                                                                ;
+--------+---------------------------------------------------------+---------------------------+---------------------------------------------------------+---------------------------------------------------+--------------+------------+------------+
; Slack  ; From Node                                               ; To Node                   ; Launch Clock                                            ; Latch Clock                                       ; Relationship ; Clock Skew ; Data Delay ;
+--------+---------------------------------------------------------+---------------------------+---------------------------------------------------------+---------------------------------------------------+--------------+------------+------------+
; -1.804 ; FSM:fsm1|state.S3                                       ; FSM:fsm1|state.S3         ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.878      ; 0.367      ;
; -1.804 ; FSM:fsm1|state.S2                                       ; FSM:fsm1|state.S2         ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.878      ; 0.367      ;
; -1.804 ; FSM:fsm1|state.S1                                       ; FSM:fsm1|state.S1         ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.878      ; 0.367      ;
; -1.379 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[12] ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.882      ; 0.796      ;
; -1.316 ; FSM:fsm1|state.S1                                       ; toggle:t1|toggledOutputB  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.882      ; 0.859      ;
; -1.313 ; FSM:fsm1|state.S1                                       ; toggle:t1|toggledOutputA  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.882      ; 0.862      ;
; -1.304 ; FSM:fsm1|state.S3                                       ; FSM:fsm1|state.S3         ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.878      ; 0.367      ;
; -1.304 ; FSM:fsm1|state.S2                                       ; FSM:fsm1|state.S2         ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.878      ; 0.367      ;
; -1.304 ; FSM:fsm1|state.S1                                       ; FSM:fsm1|state.S1         ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.878      ; 0.367      ;
; -1.250 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[6]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.895      ; 0.938      ;
; -1.247 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[2]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.895      ; 0.941      ;
; -1.246 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[4]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.895      ; 0.942      ;
; -1.245 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[5]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.895      ; 0.943      ;
; -1.186 ; FSM:fsm1|state.S2                                       ; FSM:fsm1|state.S1         ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.878      ; 0.985      ;
; -1.175 ; FSM:fsm1|state.S3                                       ; FSM:fsm1|state.S4         ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.878      ; 0.996      ;
; -1.131 ; FSM:fsm1|state.S3                                       ; FSM:fsm1|state.S1         ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.878      ; 1.040      ;
; -1.113 ; FSM:fsm1|state.S2                                       ; FSM:fsm1|state.S3         ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.878      ; 1.058      ;
; -1.071 ; FSM:fsm1|state.S1                                       ; FSM:fsm1|state.S2         ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.878      ; 1.100      ;
; -1.053 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[3]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.893      ; 1.133      ;
; -1.052 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[0]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.893      ; 1.134      ;
; -1.051 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[7]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.893      ; 1.135      ;
; -1.050 ; FSM:fsm1|state.S3                                       ; FSM:fsm1|state.S2         ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.878      ; 1.121      ;
; -1.049 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; FSM:fsm1|state.S1         ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.878      ; 1.122      ;
; -1.043 ; FSM:fsm1|state.S2                                       ; FSM:fsm1|state.S4         ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.878      ; 1.128      ;
; -1.028 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[6]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.895      ; 1.160      ;
; -1.025 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[2]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.895      ; 1.163      ;
; -1.024 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[4]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.895      ; 1.164      ;
; -1.023 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[5]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.895      ; 1.165      ;
; -1.007 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[1]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.893      ; 1.179      ;
; -1.002 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[12] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.882      ; 1.173      ;
; -0.999 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[12] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.882      ; 1.176      ;
; -0.992 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[6]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.895      ; 1.196      ;
; -0.989 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[2]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.895      ; 1.199      ;
; -0.988 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[10] ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.891      ; 1.196      ;
; -0.988 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[8]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.891      ; 1.196      ;
; -0.988 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[4]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.895      ; 1.200      ;
; -0.987 ; FSM:fsm1|state.S3                                       ; toggle:t1|toggledOutputB  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.882      ; 1.188      ;
; -0.987 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[9]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.891      ; 1.197      ;
; -0.987 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[5]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.895      ; 1.201      ;
; -0.975 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[10] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.891      ; 1.209      ;
; -0.975 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[8]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.891      ; 1.209      ;
; -0.974 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[9]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.891      ; 1.210      ;
; -0.974 ; FSM:fsm1|state.S1                                       ; FSM:fsm1|state.S3         ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.878      ; 1.197      ;
; -0.966 ; FSM:fsm1|state.S1                                       ; FSM:fsm1|state.S4         ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.878      ; 1.205      ;
; -0.943 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; FSM:fsm1|state.S2         ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.878      ; 1.228      ;
; -0.939 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[10] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.891      ; 1.245      ;
; -0.939 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[8]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.891      ; 1.245      ;
; -0.938 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; FSM:fsm1|state.S4         ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.878      ; 1.233      ;
; -0.938 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[9]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.891      ; 1.246      ;
; -0.888 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; FSM:fsm1|state.S3         ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.878      ; 1.283      ;
; -0.879 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[12] ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.882      ; 0.796      ;
; -0.831 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[3]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.893      ; 1.355      ;
; -0.830 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[0]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.893      ; 1.356      ;
; -0.829 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[7]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.893      ; 1.357      ;
; -0.816 ; FSM:fsm1|state.S1                                       ; toggle:t1|toggledOutputB  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.882      ; 0.859      ;
; -0.813 ; FSM:fsm1|state.S1                                       ; toggle:t1|toggledOutputA  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.882      ; 0.862      ;
; -0.795 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[3]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.893      ; 1.391      ;
; -0.794 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[0]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.893      ; 1.392      ;
; -0.793 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[7]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.893      ; 1.393      ;
; -0.787 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[11] ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.893      ; 1.399      ;
; -0.785 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[1]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.893      ; 1.401      ;
; -0.774 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[11] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.893      ; 1.412      ;
; -0.750 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[6]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.895      ; 0.938      ;
; -0.749 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[1]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.893      ; 1.437      ;
; -0.747 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[2]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.895      ; 0.941      ;
; -0.746 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[4]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.895      ; 0.942      ;
; -0.745 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[5]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.895      ; 0.943      ;
; -0.738 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[11] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.893      ; 1.448      ;
; -0.686 ; FSM:fsm1|state.S2                                       ; FSM:fsm1|state.S1         ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.878      ; 0.985      ;
; -0.675 ; FSM:fsm1|state.S3                                       ; FSM:fsm1|state.S4         ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.878      ; 0.996      ;
; -0.631 ; FSM:fsm1|state.S3                                       ; FSM:fsm1|state.S1         ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.878      ; 1.040      ;
; -0.613 ; FSM:fsm1|state.S2                                       ; FSM:fsm1|state.S3         ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.878      ; 1.058      ;
; -0.575 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; FSM:fsm1|state.S4         ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.878      ; 1.596      ;
; -0.571 ; FSM:fsm1|state.S1                                       ; FSM:fsm1|state.S2         ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.878      ; 1.100      ;
; -0.553 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[3]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.893      ; 1.133      ;
; -0.552 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[0]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.893      ; 1.134      ;
; -0.551 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[7]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.893      ; 1.135      ;
; -0.550 ; FSM:fsm1|state.S3                                       ; FSM:fsm1|state.S2         ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.878      ; 1.121      ;
; -0.549 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; FSM:fsm1|state.S1         ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.878      ; 1.122      ;
; -0.543 ; FSM:fsm1|state.S2                                       ; FSM:fsm1|state.S4         ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.878      ; 1.128      ;
; -0.540 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; FSM:fsm1|state.S3         ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.878      ; 1.631      ;
; -0.528 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[6]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.895      ; 1.160      ;
; -0.525 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[2]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.895      ; 1.163      ;
; -0.524 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[4]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.895      ; 1.164      ;
; -0.523 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[5]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.895      ; 1.165      ;
; -0.507 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[1]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.893      ; 1.179      ;
; -0.502 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[12] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.882      ; 1.173      ;
; -0.499 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[12] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.882      ; 1.176      ;
; -0.492 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[6]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.895      ; 1.196      ;
; -0.489 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[2]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.895      ; 1.199      ;
; -0.488 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[10] ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.891      ; 1.196      ;
; -0.488 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[8]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.891      ; 1.196      ;
; -0.488 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[4]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.895      ; 1.200      ;
; -0.487 ; FSM:fsm1|state.S3                                       ; toggle:t1|toggledOutputB  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.882      ; 1.188      ;
; -0.487 ; FSM:fsm1|state.S2                                       ; storeBCD:sB1|register[9]  ; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.891      ; 1.197      ;
; -0.487 ; FSM:fsm1|state.S1                                       ; storeBCD:sB1|register[5]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.895      ; 1.201      ;
; -0.485 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; FSM:fsm1|state.S2         ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.878      ; 1.686      ;
; -0.483 ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; FSM:fsm1|state.S1         ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 1.878      ; 1.688      ;
; -0.475 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[10] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.891      ; 1.209      ;
; -0.475 ; FSM:fsm1|state.S3                                       ; storeBCD:sB1|register[8]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.500       ; 1.891      ; 1.209      ;
+--------+---------------------------------------------------------+---------------------------+---------------------------------------------------------+---------------------------------------------------+--------------+------------+------------+


+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Hold: 'CLOCK_50'                                                                                                                                                                                                     ;
+--------+------------------------------------------------------+------------------------------------------------------+---------------------------------------------------+-------------+--------------+------------+------------+
; Slack  ; From Node                                            ; To Node                                              ; Launch Clock                                      ; Latch Clock ; Relationship ; Clock Skew ; Data Delay ;
+--------+------------------------------------------------------+------------------------------------------------------+---------------------------------------------------+-------------+--------------+------------+------------+
; -1.563 ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; CLOCK_50    ; 0.000        ; 1.637      ; 0.367      ;
; -1.063 ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; CLOCK_50    ; -0.500       ; 1.637      ; 0.367      ;
; 0.353  ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.505      ;
; 0.356  ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.508      ;
; 0.356  ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.508      ;
; 0.356  ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.508      ;
; 0.356  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.508      ;
; 0.357  ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.509      ;
; 0.358  ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.510      ;
; 0.358  ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.510      ;
; 0.358  ; inputManager:iM1|clockDivider:clock500Hz|counter[24] ; inputManager:iM1|clockDivider:clock500Hz|counter[24] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.510      ;
; 0.369  ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.521      ;
; 0.369  ; inputManager:iM1|clockDivider:clock500Hz|counter[23] ; inputManager:iM1|clockDivider:clock500Hz|counter[23] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.521      ;
; 0.370  ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.522      ;
; 0.370  ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.522      ;
; 0.370  ; inputManager:iM1|clockDivider:clock500Hz|counter[25] ; inputManager:iM1|clockDivider:clock500Hz|counter[25] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.522      ;
; 0.436  ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.588      ;
; 0.436  ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.588      ;
; 0.438  ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.590      ;
; 0.438  ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.590      ;
; 0.438  ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.590      ;
; 0.446  ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.598      ;
; 0.491  ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.643      ;
; 0.494  ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.646      ;
; 0.495  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.647      ;
; 0.496  ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ; inputManager:iM1|clockDivider:clock500Hz|counter[23] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.648      ;
; 0.496  ; inputManager:iM1|clockDivider:clock500Hz|counter[24] ; inputManager:iM1|clockDivider:clock500Hz|counter[25] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.648      ;
; 0.496  ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.648      ;
; 0.509  ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.661      ;
; 0.509  ; inputManager:iM1|clockDivider:clock500Hz|counter[23] ; inputManager:iM1|clockDivider:clock500Hz|counter[24] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.661      ;
; 0.510  ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.662      ;
; 0.510  ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.662      ;
; 0.529  ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.681      ;
; 0.529  ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.681      ;
; 0.531  ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.683      ;
; 0.531  ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ; inputManager:iM1|clockDivider:clock500Hz|counter[24] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.683      ;
; 0.544  ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.696      ;
; 0.544  ; inputManager:iM1|clockDivider:clock500Hz|counter[23] ; inputManager:iM1|clockDivider:clock500Hz|counter[25] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.696      ;
; 0.545  ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.697      ;
; 0.564  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.716      ;
; 0.564  ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.716      ;
; 0.565  ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.717      ;
; 0.565  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.717      ;
; 0.566  ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.718      ;
; 0.566  ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ; inputManager:iM1|clockDivider:clock500Hz|counter[25] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.718      ;
; 0.569  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.721      ;
; 0.574  ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.726      ;
; 0.574  ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.726      ;
; 0.576  ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.728      ;
; 0.579  ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.731      ;
; 0.584  ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.736      ;
; 0.586  ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.738      ;
; 0.596  ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.748      ;
; 0.599  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.751      ;
; 0.600  ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.752      ;
; 0.600  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.752      ;
; 0.604  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.756      ;
; 0.609  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.761      ;
; 0.609  ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ; inputManager:iM1|clockDivider:clock500Hz|counter[23] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.761      ;
; 0.611  ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.763      ;
; 0.614  ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.766      ;
; 0.631  ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; -0.008     ; 0.775      ;
; 0.631  ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.783      ;
; 0.632  ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.784      ;
; 0.634  ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.786      ;
; 0.635  ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.787      ;
; 0.635  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.787      ;
; 0.639  ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.791      ;
; 0.639  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.791      ;
; 0.644  ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ; inputManager:iM1|clockDivider:clock500Hz|counter[24] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.796      ;
; 0.654  ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.806      ;
; 0.660  ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.812      ;
; 0.661  ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.008      ; 0.821      ;
; 0.666  ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; -0.008     ; 0.810      ;
; 0.666  ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.818      ;
; 0.667  ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.819      ;
; 0.668  ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.820      ;
; 0.669  ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.821      ;
; 0.670  ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.822      ;
; 0.670  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.822      ;
; 0.670  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.822      ;
; 0.674  ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.826      ;
; 0.674  ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.826      ;
; 0.679  ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ; inputManager:iM1|clockDivider:clock500Hz|counter[25] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.831      ;
; 0.681  ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; -0.008     ; 0.825      ;
; 0.689  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.008      ; 0.849      ;
; 0.693  ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.845      ;
; 0.694  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; -0.008     ; 0.838      ;
; 0.695  ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.847      ;
; 0.701  ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.853      ;
; 0.702  ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; inputManager:iM1|clockDivider:clock500Hz|counter[23] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.854      ;
; 0.703  ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.855      ;
; 0.705  ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.857      ;
; 0.705  ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.857      ;
; 0.705  ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.857      ;
; 0.709  ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.000      ; 0.861      ;
; 0.716  ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; -0.008     ; 0.860      ;
; 0.723  ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.008      ; 0.883      ;
; 0.724  ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; 0.008      ; 0.884      ;
; 0.729  ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ; CLOCK_50                                          ; CLOCK_50    ; 0.000        ; -0.008     ; 0.873      ;
+--------+------------------------------------------------------+------------------------------------------------------+---------------------------------------------------+-------------+--------------+------------+------------+


+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Hold: 'ROW[0]'                                                                                                                                                                                                                     ;
+--------+-------------------------------------------------------------------+-------------------------------------------------------+---------------------------------------------------+-------------+--------------+------------+------------+
; Slack  ; From Node                                                         ; To Node                                               ; Launch Clock                                      ; Latch Clock ; Relationship ; Clock Skew ; Data Delay ;
+--------+-------------------------------------------------------------------+-------------------------------------------------------+---------------------------------------------------+-------------+--------------+------------+------------+
; -1.474 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.352      ; 0.878      ;
; -1.383 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.352      ; 0.969      ;
; -1.340 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.352      ; 1.012      ;
; -1.315 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.360      ; 1.045      ;
; -1.298 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.359      ; 1.061      ;
; -1.265 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.306      ; 1.041      ;
; -1.255 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.358      ; 1.103      ;
; -1.237 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.341      ; 1.104      ;
; -1.224 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.352      ; 1.128      ;
; -1.224 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.306      ; 1.082      ;
; -1.211 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.358      ; 1.147      ;
; -1.187 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.360      ; 1.173      ;
; -1.172 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.306      ; 1.134      ;
; -1.108 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.306      ; 1.198      ;
; -1.107 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.360      ; 1.253      ;
; -1.076 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.358      ; 1.282      ;
; -1.069 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.360      ; 1.291      ;
; -1.065 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.360      ; 1.295      ;
; -1.059 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.341      ; 1.282      ;
; -1.051 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.359      ; 1.308      ;
; -1.041 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 1.816      ; 0.775      ;
; -1.039 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 3.079      ; 2.040      ;
; -1.036 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.359      ; 1.323      ;
; -1.016 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.341      ; 1.325      ;
; -1.014 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.360      ; 1.346      ;
; -1.014 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 1.816      ; 0.802      ;
; -1.010 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 1.816      ; 0.806      ;
; -1.002 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.359      ; 1.357      ;
; -1.001 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 3.025      ; 2.024      ;
; -0.996 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.360      ; 1.364      ;
; -0.995 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 3.060      ; 2.065      ;
; -0.986 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 3.079      ; 2.093      ;
; -0.978 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 3.071      ; 2.093      ;
; -0.967 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.341      ; 1.374      ;
; -0.960 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.358      ; 1.398      ;
; -0.951 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 3.077      ; 2.126      ;
; -0.918 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 3.078      ; 2.160      ;
; -0.902 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.343      ; 1.441      ;
; -0.892 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 2.535      ; 1.643      ;
; -0.859 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.343      ; 1.484      ;
; -0.856 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.360      ; 1.504      ;
; -0.833 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.343      ; 1.510      ;
; -0.822 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 1.595      ; 0.773      ;
; -0.810 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 2.446      ; 1.636      ;
; -0.792 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 1.547      ; 0.755      ;
; -0.792 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 3.062      ; 2.270      ;
; -0.747 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 1.816      ; 1.069      ;
; -0.743 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 2.343      ; 1.600      ;
; -0.707 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 1.595      ; 0.888      ;
; -0.682 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 2.325      ; 1.643      ;
; -0.679 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 2.266      ; 1.587      ;
; -0.678 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; ROW[0]                                            ; ROW[0]      ; 0.000        ; 2.314      ; 1.636      ;
; -0.624 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 1.547      ; 0.923      ;
; -0.602 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 1.595      ; 0.993      ;
; -0.539 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 3.079      ; 2.040      ;
; -0.534 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 1.547      ; 1.013      ;
; -0.533 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 1.595      ; 1.062      ;
; -0.501 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 3.025      ; 2.024      ;
; -0.495 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 3.060      ; 2.065      ;
; -0.486 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 3.079      ; 2.093      ;
; -0.478 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 3.071      ; 2.093      ;
; -0.454 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; -0.500       ; 1.727      ; 0.773      ;
; -0.451 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 3.077      ; 2.126      ;
; -0.418 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; 0.000        ; 1.547      ; 1.129      ;
; -0.418 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 3.078      ; 2.160      ;
; -0.392 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 2.535      ; 1.643      ;
; -0.339 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; -0.500       ; 1.727      ; 0.888      ;
; -0.331 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; -0.500       ; 1.606      ; 0.775      ;
; -0.310 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 2.446      ; 1.636      ;
; -0.304 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; -0.500       ; 1.606      ; 0.802      ;
; -0.300 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; -0.500       ; 1.606      ; 0.806      ;
; -0.292 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 3.062      ; 2.270      ;
; -0.234 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; -0.500       ; 1.727      ; 0.993      ;
; -0.182 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 2.325      ; 1.643      ;
; -0.179 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 2.266      ; 1.587      ;
; -0.178 ; ROW[0]                                                            ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; ROW[0]                                            ; ROW[0]      ; -0.500       ; 2.314      ; 1.636      ;
; -0.165 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; -0.500       ; 1.727      ; 1.062      ;
; -0.037 ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; ROW[0]      ; -0.500       ; 1.606      ; 1.069      ;
+--------+-------------------------------------------------------------------+-------------------------------------------------------+---------------------------------------------------+-------------+--------------+------------+------------+


+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Hold: 'FSM:fsm1|state.S2'                                                                                                                                                         ;
+--------+---------------------------------+-------------------------------+------------------------------------------------------+-------------------+--------------+------------+------------+
; Slack  ; From Node                       ; To Node                       ; Launch Clock                                         ; Latch Clock       ; Relationship ; Clock Skew ; Data Delay ;
+--------+---------------------------------+-------------------------------+------------------------------------------------------+-------------------+--------------+------------+------------+
; -0.885 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[11] ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 1.859      ; 1.115      ;
; -0.866 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[10] ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 1.848      ; 1.123      ;
; -0.864 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[9]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 1.847      ; 1.124      ;
; -0.855 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[4]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 1.854      ; 1.140      ;
; -0.837 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[7]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 1.855      ; 1.159      ;
; -0.811 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[2]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 1.825      ; 1.155      ;
; -0.793 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[1]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 1.840      ; 1.188      ;
; -0.780 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[8]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 1.840      ; 1.201      ;
; -0.746 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[3]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 1.839      ; 1.234      ;
; -0.620 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[0]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 1.855      ; 1.376      ;
; -0.606 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[28] ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 1.858      ; 1.393      ;
; -0.599 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[6]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 1.854      ; 1.396      ;
; -0.478 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[5]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; 0.000        ; 1.855      ; 1.518      ;
; -0.385 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[11] ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 1.859      ; 1.115      ;
; -0.366 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[10] ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 1.848      ; 1.123      ;
; -0.364 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[9]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 1.847      ; 1.124      ;
; -0.355 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[4]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 1.854      ; 1.140      ;
; -0.337 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[7]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 1.855      ; 1.159      ;
; -0.311 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[2]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 1.825      ; 1.155      ;
; -0.293 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[1]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 1.840      ; 1.188      ;
; -0.280 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[8]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 1.840      ; 1.201      ;
; -0.246 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[3]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 1.839      ; 1.234      ;
; -0.120 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[0]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 1.855      ; 1.376      ;
; -0.106 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[28] ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 1.858      ; 1.393      ;
; -0.099 ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[6]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 1.854      ; 1.396      ;
; 0.022  ; FSM:fsm1|state.S3               ; displayMUX:dMUX1|register[5]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; 1.855      ; 1.518      ;
; 0.904  ; ALU:ALU1|answer[0]              ; displayMUX:dMUX1|register[0]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.214      ; 1.118      ;
; 0.905  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.053     ; 0.852      ;
; 0.933  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.024     ; 0.909      ;
; 0.934  ; registerTransfer:rT1|storeA[9]  ; displayMUX:dMUX1|register[9]  ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.017     ; 0.417      ;
; 0.942  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[7]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.023     ; 0.919      ;
; 0.950  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.024     ; 0.926      ;
; 0.951  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.023     ; 0.928      ;
; 0.970  ; registerTransfer:rT1|storeA[10] ; displayMUX:dMUX1|register[10] ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.017     ; 0.453      ;
; 1.021  ; registerTransfer:rT1|storeA[1]  ; displayMUX:dMUX1|register[1]  ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.010     ; 0.511      ;
; 1.042  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.039     ; 1.003      ;
; 1.084  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.023     ; 1.061      ;
; 1.121  ; registerTransfer:rT1|storeA[8]  ; displayMUX:dMUX1|register[8]  ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.027     ; 0.594      ;
; 1.136  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[15] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.030     ; 1.106      ;
; 1.144  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[28] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.020     ; 1.124      ;
; 1.152  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.038     ; 1.114      ;
; 1.162  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[10] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.030     ; 1.132      ;
; 1.164  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[9]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.031     ; 1.133      ;
; 1.170  ; registerTransfer:rT1|storeA[3]  ; displayMUX:dMUX1|register[3]  ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.027     ; 0.643      ;
; 1.181  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[11] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.019     ; 1.162      ;
; 1.213  ; registerTransfer:rT1|storeB[8]  ; displayMUX:dMUX1|register[8]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.142     ; 0.571      ;
; 1.214  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[22] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.010     ; 1.204      ;
; 1.216  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[21] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.010     ; 1.206      ;
; 1.230  ; registerTransfer:rT1|storeA[4]  ; displayMUX:dMUX1|register[4]  ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.014     ; 0.716      ;
; 1.238  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[13] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.081     ; 1.157      ;
; 1.269  ; registerTransfer:rT1|storeB[1]  ; displayMUX:dMUX1|register[1]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.140     ; 0.629      ;
; 1.273  ; registerTransfer:rT1|storeA[0]  ; displayMUX:dMUX1|register[0]  ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.010     ; 0.763      ;
; 1.279  ; registerTransfer:rT1|storeA[2]  ; displayMUX:dMUX1|register[2]  ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.041     ; 0.738      ;
; 1.290  ; registerTransfer:rT1|storeB[2]  ; displayMUX:dMUX1|register[2]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.156     ; 0.634      ;
; 1.294  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[23] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.010     ; 1.284      ;
; 1.305  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[14] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.090     ; 1.215      ;
; 1.313  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[12] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.092     ; 1.221      ;
; 1.325  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.038     ; 1.287      ;
; 1.326  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[17] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.079     ; 1.247      ;
; 1.326  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[19] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.080     ; 1.246      ;
; 1.326  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[20] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.071     ; 1.255      ;
; 1.328  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[18] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.080     ; 1.248      ;
; 1.332  ; FSM:fsm1|state.S4               ; displayMUX:dMUX1|register[16] ; inputManager:iM1|clockDivider:clock500Hz|newClock    ; FSM:fsm1|state.S2 ; 0.000        ; -0.043     ; 1.289      ;
; 1.339  ; registerTransfer:rT1|storeB[10] ; displayMUX:dMUX1|register[10] ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.125     ; 0.714      ;
; 1.363  ; ALU:ALU1|answer[20]             ; displayMUX:dMUX1|register[28] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.191      ; 1.554      ;
; 1.368  ; registerTransfer:rT1|storeA[11] ; displayMUX:dMUX1|register[11] ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.006     ; 0.862      ;
; 1.396  ; registerTransfer:rT1|storeA[7]  ; displayMUX:dMUX1|register[7]  ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.011     ; 0.885      ;
; 1.410  ; registerTransfer:rT1|storeA[6]  ; displayMUX:dMUX1|register[6]  ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.012     ; 0.898      ;
; 1.462  ; registerTransfer:rT1|storeB[0]  ; displayMUX:dMUX1|register[0]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.129     ; 0.833      ;
; 1.501  ; registerTransfer:rT1|storeB[9]  ; displayMUX:dMUX1|register[9]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.134     ; 0.867      ;
; 1.506  ; ALU:ALU1|answer[2]              ; displayMUX:dMUX1|register[2]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.184      ; 1.690      ;
; 1.516  ; registerTransfer:rT1|storeA[12] ; displayMUX:dMUX1|register[28] ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; 0.015      ; 1.031      ;
; 1.548  ; registerTransfer:rT1|storeA[5]  ; displayMUX:dMUX1|register[5]  ; FSM:fsm1|state.S1                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.013     ; 1.035      ;
; 1.549  ; registerTransfer:rT1|storeB[3]  ; displayMUX:dMUX1|register[3]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.144     ; 0.905      ;
; 1.563  ; ALU:ALU1|answer[1]              ; displayMUX:dMUX1|register[1]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.199      ; 1.762      ;
; 1.590  ; registerTransfer:rT1|storeB[4]  ; displayMUX:dMUX1|register[4]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.146     ; 0.944      ;
; 1.688  ; registerTransfer:rT1|storeB[11] ; displayMUX:dMUX1|register[11] ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.181     ; 1.007      ;
; 1.700  ; ALU:ALU1|answer[3]              ; displayMUX:dMUX1|register[3]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.198      ; 1.898      ;
; 1.718  ; ALU:ALU1|answer[1]              ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.213      ; 1.931      ;
; 1.739  ; registerTransfer:rT1|storeB[6]  ; displayMUX:dMUX1|register[6]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.144     ; 1.095      ;
; 1.742  ; ALU:ALU1|answer[20]             ; displayMUX:dMUX1|register[3]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.172      ; 1.914      ;
; 1.774  ; ALU:ALU1|answer[20]             ; displayMUX:dMUX1|register[2]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.158      ; 1.932      ;
; 1.778  ; registerTransfer:rT1|storeB[12] ; displayMUX:dMUX1|register[28] ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.124     ; 1.154      ;
; 1.794  ; registerTransfer:rT1|storeB[7]  ; displayMUX:dMUX1|register[7]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.170     ; 1.124      ;
; 1.819  ; registerTransfer:rT1|storeB[5]  ; displayMUX:dMUX1|register[5]  ; FSM:fsm1|state.S3                                    ; FSM:fsm1|state.S2 ; -0.500       ; -0.143     ; 1.176      ;
; 1.835  ; ALU:ALU1|answer[2]              ; displayMUX:dMUX1|register[3]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.198      ; 2.033      ;
; 1.838  ; ALU:ALU1|answer[20]             ; displayMUX:dMUX1|register[1]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.173      ; 2.011      ;
; 1.921  ; ALU:ALU1|answer[2]              ; displayMUX:dMUX1|register[1]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.199      ; 2.120      ;
; 1.948  ; ALU:ALU1|answer[1]              ; displayMUX:dMUX1|register[2]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.184      ; 2.132      ;
; 1.954  ; ALU:ALU1|answer[20]             ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.187      ; 2.141      ;
; 1.972  ; ALU:ALU1|answer[1]              ; displayMUX:dMUX1|register[3]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.198      ; 2.170      ;
; 1.975  ; ALU:ALU1|answer[0]              ; displayMUX:dMUX1|register[1]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.199      ; 2.174      ;
; 2.102  ; ALU:ALU1|answer[2]              ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.213      ; 2.315      ;
; 2.208  ; ALU:ALU1|answer[0]              ; displayMUX:dMUX1|register[2]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.184      ; 2.392      ;
; 2.227  ; ALU:ALU1|answer[20]             ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.173      ; 2.400      ;
; 2.252  ; ALU:ALU1|answer[0]              ; displayMUX:dMUX1|register[3]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.198      ; 2.450      ;
; 2.258  ; ALU:ALU1|answer[0]              ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.213      ; 2.471      ;
; 2.302  ; ALU:ALU1|answer[2]              ; displayMUX:dMUX1|register[8]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.199      ; 2.501      ;
; 2.389  ; ALU:ALU1|answer[3]              ; displayMUX:dMUX1|register[4]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.213      ; 2.602      ;
; 2.431  ; ALU:ALU1|answer[3]              ; displayMUX:dMUX1|register[2]  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; 0.000        ; 0.184      ; 2.615      ;
+--------+---------------------------------+-------------------------------+------------------------------------------------------+-------------------+--------------+------------+------------+


+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Hold: 'inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4]'                                                                                                                                                                            ;
+-------+---------------------------------------------------------+------------------------------+---------------------------------------------------+---------------------------------------------------------+--------------+------------+------------+
; Slack ; From Node                                               ; To Node                      ; Launch Clock                                      ; Latch Clock                                             ; Relationship ; Clock Skew ; Data Delay ;
+-------+---------------------------------------------------------+------------------------------+---------------------------------------------------+---------------------------------------------------------+--------------+------------+------------+
; 0.339 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[0] ; storeOperator:sO1|storeOp[0] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; 0.000        ; -0.099     ; 0.392      ;
; 0.358 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[1] ; storeOperator:sO1|storeOp[1] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; 0.000        ; -0.099     ; 0.411      ;
; 0.424 ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[2] ; storeOperator:sO1|storeOp[2] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; 0.000        ; -0.099     ; 0.477      ;
+-------+---------------------------------------------------------+------------------------------+---------------------------------------------------+---------------------------------------------------------+--------------+------------+------------+


+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Hold: 'FSM:fsm1|state.S3'                                                                                                                                                                            ;
+-------+------------------------------------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+
; Slack ; From Node                                            ; To Node                         ; Launch Clock                                      ; Latch Clock       ; Relationship ; Clock Skew ; Data Delay ;
+-------+------------------------------------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+
; 0.587 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[7]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.751      ; 0.838      ;
; 0.667 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.724      ; 0.891      ;
; 0.684 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[11] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.766      ; 0.950      ;
; 0.771 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.726      ; 0.997      ;
; 0.794 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.710      ; 1.004      ;
; 0.804 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[12] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.708      ; 1.012      ;
; 0.804 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.724      ; 1.028      ;
; 0.804 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[10] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.699      ; 1.003      ;
; 0.857 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[9]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.707      ; 1.064      ;
; 0.866 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.707      ; 1.073      ;
; 0.875 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.709      ; 1.084      ;
; 0.931 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.706      ; 1.137      ;
; 0.971 ; memoryManagement:calcultorMemory|bcdOutputMemory[12] ; registerTransfer:rT1|storeB[12] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.104      ; 0.575      ;
; 0.994 ; recall:r1|ld_m                                       ; registerTransfer:rT1|storeB[8]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.708      ; 1.202      ;
; 0.996 ; storeBCD:sB1|register[11]                            ; registerTransfer:rT1|storeB[11] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.147      ; 0.643      ;
; 1.056 ; storeBCD:sB1|register[1]                             ; registerTransfer:rT1|storeB[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.087      ; 0.643      ;
; 1.089 ; memoryManagement:calcultorMemory|bcdOutputMemory[2]  ; registerTransfer:rT1|storeB[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.103      ; 0.692      ;
; 1.102 ; memoryManagement:calcultorMemory|bcdOutputMemory[6]  ; registerTransfer:rT1|storeB[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.101      ; 0.703      ;
; 1.105 ; memoryManagement:calcultorMemory|bcdOutputMemory[10] ; registerTransfer:rT1|storeB[10] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.082      ; 0.687      ;
; 1.105 ; memoryManagement:calcultorMemory|bcdOutputMemory[1]  ; registerTransfer:rT1|storeB[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.087      ; 0.692      ;
; 1.107 ; memoryManagement:calcultorMemory|bcdOutputMemory[5]  ; registerTransfer:rT1|storeB[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.101      ; 0.708      ;
; 1.124 ; storeBCD:sB1|register[0]                             ; registerTransfer:rT1|storeB[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.091      ; 0.715      ;
; 1.131 ; storeBCD:sB1|register[10]                            ; registerTransfer:rT1|storeB[10] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.082      ; 0.713      ;
; 1.132 ; memoryManagement:calcultorMemory|bcdOutputMemory[8]  ; registerTransfer:rT1|storeB[8]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.089      ; 0.721      ;
; 1.154 ; storeBCD:sB1|register[8]                             ; registerTransfer:rT1|storeB[8]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.091      ; 0.745      ;
; 1.156 ; memoryManagement:calcultorMemory|bcdOutputMemory[3]  ; registerTransfer:rT1|storeB[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.090      ; 0.746      ;
; 1.160 ; memoryManagement:calcultorMemory|bcdOutputMemory[9]  ; registerTransfer:rT1|storeB[9]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.090      ; 0.750      ;
; 1.179 ; storeBCD:sB1|register[9]                             ; registerTransfer:rT1|storeB[9]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.090      ; 0.769      ;
; 1.192 ; memoryManagement:calcultorMemory|bcdOutputMemory[11] ; registerTransfer:rT1|storeB[11] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.143      ; 0.835      ;
; 1.197 ; storeBCD:sB1|register[7]                             ; registerTransfer:rT1|storeB[7]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.132      ; 0.829      ;
; 1.203 ; storeBCD:sB1|register[3]                             ; registerTransfer:rT1|storeB[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.090      ; 0.793      ;
; 1.205 ; storeBCD:sB1|register[6]                             ; registerTransfer:rT1|storeB[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.103      ; 0.808      ;
; 1.219 ; memoryManagement:calcultorMemory|bcdOutputMemory[0]  ; registerTransfer:rT1|storeB[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.066      ; 0.785      ;
; 1.224 ; storeBCD:sB1|register[4]                             ; registerTransfer:rT1|storeB[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.105      ; 0.829      ;
; 1.243 ; memoryManagement:calcultorMemory|bcdOutputMemory[7]  ; registerTransfer:rT1|storeB[7]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.128      ; 0.871      ;
; 1.248 ; storeBCD:sB1|register[12]                            ; registerTransfer:rT1|storeB[12] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.100      ; 0.848      ;
; 1.273 ; storeBCD:sB1|register[5]                             ; registerTransfer:rT1|storeB[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.103      ; 0.876      ;
; 1.274 ; storeBCD:sB1|register[2]                             ; registerTransfer:rT1|storeB[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.086      ; 0.860      ;
; 1.333 ; memoryManagement:calcultorMemory|bcdOutputMemory[4]  ; registerTransfer:rT1|storeB[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S3 ; -0.500       ; 0.103      ; 0.936      ;
+-------+------------------------------------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+


+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Hold: 'inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]'                                                                                                                                                 ;
+-------+---------------------------------+---------------------+---------------------------------------------------------+------------------------------------------------------+--------------+------------+------------+
; Slack ; From Node                       ; To Node             ; Launch Clock                                            ; Latch Clock                                          ; Relationship ; Clock Skew ; Data Delay ;
+-------+---------------------------------+---------------------+---------------------------------------------------------+------------------------------------------------------+--------------+------------+------------+
; 0.803 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[20] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.107     ; 0.848      ;
; 0.851 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[14] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 0.870      ;
; 0.886 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[12] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.132     ; 0.906      ;
; 0.911 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[9]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 0.930      ;
; 0.912 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[10] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 0.931      ;
; 0.964 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[11] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 0.983      ;
; 0.968 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[18] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.132     ; 0.988      ;
; 0.971 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[13] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 0.990      ;
; 0.971 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[4]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 0.990      ;
; 0.973 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[6]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 0.992      ;
; 0.979 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[8]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 0.998      ;
; 0.979 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[2]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 0.998      ;
; 0.980 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[3]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 0.999      ;
; 0.980 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[1]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 0.999      ;
; 0.981 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[5]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.000      ;
; 0.981 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[0]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.000      ;
; 0.990 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[17] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.009      ;
; 0.991 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[19] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.010      ;
; 0.992 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[7]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.011      ;
; 0.993 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[15] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.012      ;
; 0.993 ; storeOperator:sO1|storeOp[1]    ; ALU:ALU1|answer[16] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.012      ;
; 1.095 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[12] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.132     ; 1.115      ;
; 1.095 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[18] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.132     ; 1.115      ;
; 1.098 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[20] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.107     ; 1.143      ;
; 1.105 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[8]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.124      ;
; 1.105 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[5]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.124      ;
; 1.105 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[2]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.124      ;
; 1.105 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[3]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.124      ;
; 1.105 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[1]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.124      ;
; 1.105 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[0]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.124      ;
; 1.144 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[12] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.132     ; 1.164      ;
; 1.144 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[18] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.132     ; 1.164      ;
; 1.147 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[20] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.107     ; 1.192      ;
; 1.154 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[8]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.173      ;
; 1.154 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[5]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.173      ;
; 1.154 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[2]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.173      ;
; 1.154 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[3]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.173      ;
; 1.154 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[1]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.173      ;
; 1.154 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[0]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.173      ;
; 1.203 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[17] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.222      ;
; 1.204 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[19] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.223      ;
; 1.205 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[11] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.224      ;
; 1.207 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[13] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.226      ;
; 1.208 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[15] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.227      ;
; 1.208 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[16] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.227      ;
; 1.262 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[4]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.281      ;
; 1.270 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[7]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.289      ;
; 1.270 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[15] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.289      ;
; 1.270 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[16] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.289      ;
; 1.270 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[17] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.289      ;
; 1.270 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[19] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.289      ;
; 1.270 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[14] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.289      ;
; 1.270 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[13] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.289      ;
; 1.270 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[10] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.289      ;
; 1.270 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[9]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.289      ;
; 1.270 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[6]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.289      ;
; 1.270 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[11] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.289      ;
; 1.270 ; storeOperator:sO1|storeOp[2]    ; ALU:ALU1|answer[4]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.289      ;
; 1.293 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[14] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.312      ;
; 1.319 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[7]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.338      ;
; 1.319 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[10] ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.338      ;
; 1.319 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[9]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.338      ;
; 1.319 ; storeOperator:sO1|storeOp[0]    ; ALU:ALU1|answer[6]  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; 0.000        ; -0.133     ; 1.338      ;
; 1.886 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[12] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.201     ; 1.337      ;
; 1.889 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[18] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.201     ; 1.340      ;
; 1.943 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[17] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.202     ; 1.393      ;
; 1.944 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[19] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.202     ; 1.394      ;
; 1.945 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.202     ; 1.395      ;
; 1.947 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[13] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.202     ; 1.397      ;
; 1.948 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[15] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.202     ; 1.398      ;
; 1.948 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[16] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.202     ; 1.398      ;
; 1.965 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[1]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.202     ; 1.415      ;
; 1.970 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[10] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.202     ; 1.420      ;
; 2.006 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[3]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.202     ; 1.456      ;
; 2.013 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[12] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.340     ; 1.325      ;
; 2.016 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[18] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.340     ; 1.328      ;
; 2.033 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.202     ; 1.483      ;
; 2.039 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[4]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.202     ; 1.489      ;
; 2.070 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[17] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.341     ; 1.381      ;
; 2.071 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[19] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.341     ; 1.382      ;
; 2.072 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[11] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.341     ; 1.383      ;
; 2.074 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[13] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.341     ; 1.385      ;
; 2.075 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[15] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.341     ; 1.386      ;
; 2.075 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[16] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.341     ; 1.386      ;
; 2.120 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.176     ; 1.596      ;
; 2.123 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[8]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.202     ; 1.573      ;
; 2.133 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[7]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.202     ; 1.583      ;
; 2.160 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[14] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.341     ; 1.471      ;
; 2.163 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[2]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.202     ; 1.613      ;
; 2.170 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[0]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.202     ; 1.620      ;
; 2.171 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[5]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.202     ; 1.621      ;
; 2.183 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[9]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.202     ; 1.633      ;
; 2.214 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[10] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.341     ; 1.525      ;
; 2.247 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[20] ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.315     ; 1.584      ;
; 2.278 ; registerTransfer:rT1|storeA[12] ; ALU:ALU1|answer[6]  ; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.202     ; 1.728      ;
; 2.314 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[4]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.341     ; 1.625      ;
; 2.369 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[8]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.341     ; 1.680      ;
; 2.420 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[3]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.341     ; 1.731      ;
; 2.425 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[5]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.341     ; 1.736      ;
; 2.427 ; registerTransfer:rT1|storeB[12] ; ALU:ALU1|answer[6]  ; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; -0.500       ; -0.341     ; 1.738      ;
+-------+---------------------------------+---------------------+---------------------------------------------------------+------------------------------------------------------+--------------+------------+------------+


+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Hold: 'FSM:fsm1|state.S1'                                                                                                                                                 ;
+-------+---------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+
; Slack ; From Node                 ; To Node                         ; Launch Clock                                      ; Latch Clock       ; Relationship ; Clock Skew ; Data Delay ;
+-------+---------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+
; 0.874 ; storeBCD:sB1|register[7]  ; registerTransfer:rT1|storeA[7]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; -0.027     ; 0.347      ;
; 0.880 ; storeBCD:sB1|register[9]  ; registerTransfer:rT1|storeA[9]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; -0.027     ; 0.353      ;
; 0.881 ; storeBCD:sB1|register[5]  ; registerTransfer:rT1|storeA[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; -0.027     ; 0.354      ;
; 0.884 ; storeBCD:sB1|register[4]  ; registerTransfer:rT1|storeA[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; -0.027     ; 0.357      ;
; 0.887 ; storeBCD:sB1|register[11] ; registerTransfer:rT1|storeA[11] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; -0.028     ; 0.359      ;
; 0.888 ; storeBCD:sB1|register[8]  ; registerTransfer:rT1|storeA[8]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; -0.024     ; 0.364      ;
; 0.890 ; storeBCD:sB1|register[6]  ; registerTransfer:rT1|storeA[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; -0.029     ; 0.361      ;
; 0.890 ; storeBCD:sB1|register[3]  ; registerTransfer:rT1|storeA[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; -0.027     ; 0.363      ;
; 0.890 ; storeBCD:sB1|register[0]  ; registerTransfer:rT1|storeA[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; -0.028     ; 0.362      ;
; 0.892 ; storeBCD:sB1|register[10] ; registerTransfer:rT1|storeA[10] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; -0.026     ; 0.366      ;
; 0.893 ; storeBCD:sB1|register[2]  ; registerTransfer:rT1|storeA[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; -0.029     ; 0.364      ;
; 0.899 ; storeBCD:sB1|register[12] ; registerTransfer:rT1|storeA[12] ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; -0.039     ; 0.360      ;
; 0.901 ; storeBCD:sB1|register[1]  ; registerTransfer:rT1|storeA[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; FSM:fsm1|state.S1 ; -0.500       ; -0.043     ; 0.358      ;
+-------+---------------------------+---------------------------------+---------------------------------------------------+-------------------+--------------+------------+------------+


+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Recovery: 'inputManager:iM1|clockDivider:clock500Hz|newClock'                                                                                                                                                          ;
+-------+------------------------------------------------------+-------------------+---------------------------------------------------+---------------------------------------------------+--------------+------------+------------+
; Slack ; From Node                                            ; To Node           ; Launch Clock                                      ; Latch Clock                                       ; Relationship ; Clock Skew ; Data Delay ;
+-------+------------------------------------------------------+-------------------+---------------------------------------------------+---------------------------------------------------+--------------+------------+------------+
; 0.295 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4] ; FSM:fsm1|state.S0 ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.000      ; 0.737      ;
; 0.295 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4] ; FSM:fsm1|state.S4 ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.000      ; 0.737      ;
; 0.295 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.000      ; 0.737      ;
; 0.295 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4] ; FSM:fsm1|state.S1 ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.000      ; 0.737      ;
; 0.295 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4] ; FSM:fsm1|state.S3 ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.000        ; 0.000      ; 0.737      ;
+-------+------------------------------------------------------+-------------------+---------------------------------------------------+---------------------------------------------------+--------------+------------+------------+


+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Removal: 'inputManager:iM1|clockDivider:clock500Hz|newClock'                                                                                                                                                           ;
+-------+------------------------------------------------------+-------------------+---------------------------------------------------+---------------------------------------------------+--------------+------------+------------+
; Slack ; From Node                                            ; To Node           ; Launch Clock                                      ; Latch Clock                                       ; Relationship ; Clock Skew ; Data Delay ;
+-------+------------------------------------------------------+-------------------+---------------------------------------------------+---------------------------------------------------+--------------+------------+------------+
; 0.585 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4] ; FSM:fsm1|state.S0 ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 0.000      ; 0.737      ;
; 0.585 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4] ; FSM:fsm1|state.S4 ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 0.000      ; 0.737      ;
; 0.585 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4] ; FSM:fsm1|state.S2 ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 0.000      ; 0.737      ;
; 0.585 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4] ; FSM:fsm1|state.S1 ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 0.000      ; 0.737      ;
; 0.585 ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4] ; FSM:fsm1|state.S3 ; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.000        ; 0.000      ; 0.737      ;
+-------+------------------------------------------------------+-------------------+---------------------------------------------------+---------------------------------------------------+--------------+------------+------------+


+------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Minimum Pulse Width: 'CLOCK_50'                                                                                               ;
+--------+--------------+----------------+------------------+----------+------------+------------------------------------------------------+
; Slack  ; Actual Width ; Required Width ; Type             ; Clock    ; Clock Edge ; Target                                               ;
+--------+--------------+----------------+------------------+----------+------------+------------------------------------------------------+
; -1.380 ; 1.000        ; 2.380          ; Port Rate        ; CLOCK_50 ; Rise       ; CLOCK_50                                             ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[0]  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[10] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[11] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[12] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[13] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[14] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[15] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[16] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[17] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[18] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[19] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[1]  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[20] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[21] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[22] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[23] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[23] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[24] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[24] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[25] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[25] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[2]  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[3]  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[4]  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[5]  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[6]  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[7]  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[8]  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|counter[9]  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock    ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; CLOCK_50|combout                                     ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; CLOCK_50|combout                                     ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; CLOCK_50~clkctrl|inclk[0]                            ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; CLOCK_50~clkctrl|inclk[0]                            ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; CLOCK_50~clkctrl|outclk                              ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; CLOCK_50~clkctrl|outclk                              ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[0]|clk                        ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[0]|clk                        ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[10]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[10]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[11]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[11]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[12]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[12]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[13]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[13]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[14]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[14]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[15]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[15]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[16]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[16]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[17]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[17]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[18]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[18]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[19]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[19]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[1]|clk                        ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[1]|clk                        ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[20]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[20]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[21]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[21]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[22]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[22]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[23]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[23]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[24]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[24]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[25]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[25]|clk                       ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[2]|clk                        ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[2]|clk                        ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; CLOCK_50 ; Rise       ; iM1|clock500Hz|counter[3]|clk                        ;
+--------+--------------+----------------+------------------+----------+------------+------------------------------------------------------+


+-----------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Minimum Pulse Width: 'ROW[0]'                                                                                                ;
+--------+--------------+----------------+------------------+--------+------------+-------------------------------------------------------+
; Slack  ; Actual Width ; Required Width ; Type             ; Clock  ; Clock Edge ; Target                                                ;
+--------+--------------+----------------+------------------+--------+------------+-------------------------------------------------------+
; -1.222 ; 1.000        ; 2.222          ; Port Rate        ; ROW[0] ; Rise       ; ROW[0]                                                ;
; -0.062 ; -0.062       ; 0.000          ; High Pulse Width ; ROW[0] ; Fall       ; iM1|matrixDecoder|WideOr6~6|combout                   ;
; -0.062 ; -0.062       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Fall       ; iM1|matrixDecoder|WideOr6~6|combout                   ;
; -0.062 ; -0.062       ; 0.000          ; High Pulse Width ; ROW[0] ; Fall       ; iM1|matrixDecoder|resetKey[4]|datad                   ;
; -0.062 ; -0.062       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Fall       ; iM1|matrixDecoder|resetKey[4]|datad                   ;
; -0.062 ; -0.062       ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ;
; -0.062 ; -0.062       ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|resetKey[4]    ;
; 0.126  ; 0.126        ; 0.000          ; High Pulse Width ; ROW[0] ; Fall       ; iM1|matrixDecoder|WideOr4~3|combout                   ;
; 0.126  ; 0.126        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Fall       ; iM1|matrixDecoder|WideOr4~3|combout                   ;
; 0.126  ; 0.126        ; 0.000          ; High Pulse Width ; ROW[0] ; Fall       ; iM1|matrixDecoder|equalKey[4]|datad                   ;
; 0.126  ; 0.126        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Fall       ; iM1|matrixDecoder|equalKey[4]|datad                   ;
; 0.126  ; 0.126        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ;
; 0.126  ; 0.126        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|equalKey[4]    ;
; 0.137  ; 0.137        ; 0.000          ; High Pulse Width ; ROW[0] ; Fall       ; iM1|matrixDecoder|WideOr5~5|combout                   ;
; 0.137  ; 0.137        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Fall       ; iM1|matrixDecoder|WideOr5~5|combout                   ;
; 0.137  ; 0.137        ; 0.000          ; High Pulse Width ; ROW[0] ; Fall       ; iM1|matrixDecoder|clearKey[4]|datac                   ;
; 0.137  ; 0.137        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Fall       ; iM1|matrixDecoder|clearKey[4]|datac                   ;
; 0.137  ; 0.137        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ;
; 0.137  ; 0.137        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|clearKey[4]    ;
; 0.148  ; 0.148        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr6~5|combout                   ;
; 0.148  ; 0.148        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr6~5|combout                   ;
; 0.148  ; 0.148        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr6~6|dataa                     ;
; 0.148  ; 0.148        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr6~6|dataa                     ;
; 0.151  ; 0.151        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr4~2|combout                   ;
; 0.151  ; 0.151        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr4~2|combout                   ;
; 0.151  ; 0.151        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr4~3|datac                     ;
; 0.151  ; 0.151        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr4~3|datac                     ;
; 0.280  ; 0.280        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr4~1|combout                   ;
; 0.280  ; 0.280        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr4~1|combout                   ;
; 0.280  ; 0.280        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr4~3|dataa                     ;
; 0.280  ; 0.280        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr4~3|dataa                     ;
; 0.284  ; 0.284        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr6~4|combout                   ;
; 0.284  ; 0.284        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr6~4|combout                   ;
; 0.284  ; 0.284        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr6~6|datad                     ;
; 0.284  ; 0.284        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr6~6|datad                     ;
; 0.294  ; 0.294        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~3clkctrl|inclk[0]           ;
; 0.294  ; 0.294        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~3clkctrl|inclk[0]           ;
; 0.294  ; 0.294        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~3clkctrl|outclk             ;
; 0.294  ; 0.294        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~3clkctrl|outclk             ;
; 0.294  ; 0.294        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~3|combout                   ;
; 0.294  ; 0.294        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~3|combout                   ;
; 0.294  ; 0.294        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|operatorKey[0]|datad                ;
; 0.294  ; 0.294        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|operatorKey[0]|datad                ;
; 0.294  ; 0.294        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|operatorKey[1]|datac                ;
; 0.294  ; 0.294        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|operatorKey[1]|datac                ;
; 0.294  ; 0.294        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|operatorKey[4]|datac                ;
; 0.294  ; 0.294        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|operatorKey[4]|datac                ;
; 0.294  ; 0.294        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ;
; 0.294  ; 0.294        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|operatorKey[0] ;
; 0.294  ; 0.294        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ;
; 0.294  ; 0.294        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|operatorKey[1] ;
; 0.294  ; 0.294        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ;
; 0.294  ; 0.294        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|operatorKey[4] ;
; 0.299  ; 0.299        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr8~4clkctrl|inclk[0]           ;
; 0.299  ; 0.299        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr8~4clkctrl|inclk[0]           ;
; 0.299  ; 0.299        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr8~4clkctrl|outclk             ;
; 0.299  ; 0.299        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr8~4clkctrl|outclk             ;
; 0.299  ; 0.299        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr8~4|combout                   ;
; 0.299  ; 0.299        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr8~4|combout                   ;
; 0.299  ; 0.299        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|numberKey[0]|datad                  ;
; 0.299  ; 0.299        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|numberKey[0]|datad                  ;
; 0.299  ; 0.299        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|numberKey[1]|datad                  ;
; 0.299  ; 0.299        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|numberKey[1]|datad                  ;
; 0.299  ; 0.299        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|numberKey[2]|datad                  ;
; 0.299  ; 0.299        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|numberKey[2]|datad                  ;
; 0.299  ; 0.299        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|numberKey[3]|datad                  ;
; 0.299  ; 0.299        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|numberKey[3]|datad                  ;
; 0.299  ; 0.299        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|numberKey[4]|datad                  ;
; 0.299  ; 0.299        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|numberKey[4]|datad                  ;
; 0.299  ; 0.299        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ;
; 0.299  ; 0.299        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|numberKey[0]   ;
; 0.299  ; 0.299        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ;
; 0.299  ; 0.299        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|numberKey[1]   ;
; 0.299  ; 0.299        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ;
; 0.299  ; 0.299        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|numberKey[2]   ;
; 0.299  ; 0.299        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ;
; 0.299  ; 0.299        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|numberKey[3]   ;
; 0.299  ; 0.299        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ;
; 0.299  ; 0.299        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; inputManager:iM1|decoder:matrixDecoder|numberKey[4]   ;
; 0.421  ; 0.421        ; 0.000          ; High Pulse Width ; ROW[0] ; Fall       ; iM1|matrixDecoder|WideOr5~5|datab                     ;
; 0.421  ; 0.421        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Fall       ; iM1|matrixDecoder|WideOr5~5|datab                     ;
; 0.421  ; 0.421        ; 0.000          ; High Pulse Width ; ROW[0] ; Fall       ; iM1|matrixDecoder|WideOr9~3|combout                   ;
; 0.421  ; 0.421        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Fall       ; iM1|matrixDecoder|WideOr9~3|combout                   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; ROW[0]|combout                                        ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; ROW[0]|combout                                        ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|keypadMatrixRingCounter|always0~1|combout         ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|keypadMatrixRingCounter|always0~1|combout         ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|keypadMatrixRingCounter|always0~1|datad           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|keypadMatrixRingCounter|always0~1|datad           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|Decoder0~0|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|Decoder0~0|combout                  ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|Decoder0~0|datac                    ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|Decoder0~0|datac                    ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~0|combout                   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~0|combout                   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~0|datad                     ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~0|datad                     ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~2|combout                   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~2|combout                   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; ROW[0] ; Rise       ; iM1|matrixDecoder|WideOr0~2|datad                     ;
+--------+--------------+----------------+------------------+--------+------------+-------------------------------------------------------+


+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Minimum Pulse Width: 'inputManager:iM1|clockDivider:clock500Hz|newClock'                                                                                                            ;
+--------+--------------+----------------+------------------+---------------------------------------------------+------------+-------------------------------------------------------------------+
; Slack  ; Actual Width ; Required Width ; Type             ; Clock                                             ; Clock Edge ; Target                                                            ;
+--------+--------------+----------------+------------------+---------------------------------------------------+------------+-------------------------------------------------------------------+
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; FSM:fsm1|state.S0                                                 ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; FSM:fsm1|state.S0                                                 ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; FSM:fsm1|state.S1                                                 ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; FSM:fsm1|state.S1                                                 ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; FSM:fsm1|state.S2                                                 ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; FSM:fsm1|state.S2                                                 ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; FSM:fsm1|state.S3                                                 ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; FSM:fsm1|state.S3                                                 ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; FSM:fsm1|state.S4                                                 ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; FSM:fsm1|state.S4                                                 ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[0] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[1] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[2] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|matrixRingCounter:keypadMatrixRingCounter|COL[3] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:buttonPulser|Q                       ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:buttonPulser|Q                       ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[0]             ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[0]             ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[1]             ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[1]             ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[4]             ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:buttonPulser|keyPulse[4]             ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:clearPulser|Q                        ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:clearPulser|Q                        ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]              ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:clearPulser|keyPulse[4]              ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:equalPulser|Q                        ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:equalPulser|Q                        ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]              ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]              ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:negativePulser|Q                     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:negativePulser|Q                     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:negativePulser|keyPulse[4]           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:negativePulser|keyPulse[4]           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|Q                       ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|Q                       ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[0]             ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[0]             ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[1]             ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[1]             ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[2]             ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[2]             ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[3]             ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[3]             ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4]             ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:numberPulser|keyPulse[4]             ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:operatorPulser|Q                     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:operatorPulser|Q                     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[0]           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[0]           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[1]           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[1]           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[2]           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[2]           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4]           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4]           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:resetPulser|Q                        ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:resetPulser|Q                        ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4]              ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; inputManager:iM1|pulseSignal:resetPulser|keyPulse[4]              ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[0]               ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[0]               ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[10]              ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[10]              ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[11]              ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[11]              ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[12]              ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[12]              ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[1]               ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[1]               ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[2]               ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[2]               ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[3]               ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[3]               ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[4]               ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[4]               ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[5]               ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[5]               ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[6]               ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[6]               ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[7]               ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[7]               ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[8]               ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[8]               ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[9]               ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutputMemory[9]               ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutput[0]                     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutput[0]                     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutput[10]                    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutput[10]                    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutput[11]                    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutput[11]                    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutput[12]                    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutput[12]                    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutput[13]                    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; Rise       ; memoryManagement:calcultorMemory|bcdOutput[13]                    ;
+--------+--------------+----------------+------------------+---------------------------------------------------+------------+-------------------------------------------------------------------+


+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Minimum Pulse Width: 'inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]'                                                                                       ;
+--------+--------------+----------------+------------------+------------------------------------------------------+------------+----------------------------------------------+
; Slack  ; Actual Width ; Required Width ; Type             ; Clock                                                ; Clock Edge ; Target                                       ;
+--------+--------------+----------------+------------------+------------------------------------------------------+------------+----------------------------------------------+
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[0]                           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[0]                           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[10]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[10]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[11]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[11]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[12]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[12]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[13]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[13]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[14]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[14]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[15]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[15]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[16]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[16]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[17]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[17]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[18]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[18]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[19]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[19]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[1]                           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[1]                           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[20]                          ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[20]                          ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[2]                           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[2]                           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[3]                           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[3]                           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[4]                           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[4]                           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[5]                           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[5]                           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[6]                           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[6]                           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[7]                           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[7]                           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[8]                           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[8]                           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[9]                           ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU:ALU1|answer[9]                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[0]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[0]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[10]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[10]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[11]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[11]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[12]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[12]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[13]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[13]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[14]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[14]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[15]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[15]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[16]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[16]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[17]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[17]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[18]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[18]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[19]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[19]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[1]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[1]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[20]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[20]|clk                          ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[2]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[2]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[3]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[3]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[4]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[4]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[5]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[5]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[6]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[6]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[7]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[7]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[8]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[8]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[9]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; ALU1|answer[9]|clk                           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; iM1|equalPulser|keyPulse[4]|regout           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; iM1|equalPulser|keyPulse[4]|regout           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; iM1|equalPulser|keyPulse[4]~clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; iM1|equalPulser|keyPulse[4]~clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; iM1|equalPulser|keyPulse[4]~clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] ; Rise       ; iM1|equalPulser|keyPulse[4]~clkctrl|outclk   ;
+--------+--------------+----------------+------------------+------------------------------------------------------+------------+----------------------------------------------+


+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Minimum Pulse Width: 'inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4]'                                                                                          ;
+--------+--------------+----------------+------------------+---------------------------------------------------------+------------+-------------------------------------------------+
; Slack  ; Actual Width ; Required Width ; Type             ; Clock                                                   ; Clock Edge ; Target                                          ;
+--------+--------------+----------------+------------------+---------------------------------------------------------+------------+-------------------------------------------------+
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; storeOperator:sO1|storeOp[0]                    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; storeOperator:sO1|storeOp[0]                    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; storeOperator:sO1|storeOp[1]                    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; storeOperator:sO1|storeOp[1]                    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; storeOperator:sO1|storeOp[2]                    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; storeOperator:sO1|storeOp[2]                    ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; iM1|operatorPulser|keyPulse[4]|regout           ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; iM1|operatorPulser|keyPulse[4]|regout           ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; iM1|operatorPulser|keyPulse[4]~clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; iM1|operatorPulser|keyPulse[4]~clkctrl|inclk[0] ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; iM1|operatorPulser|keyPulse[4]~clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; iM1|operatorPulser|keyPulse[4]~clkctrl|outclk   ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; sO1|storeOp[0]|clk                              ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; sO1|storeOp[0]|clk                              ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; sO1|storeOp[1]|clk                              ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; sO1|storeOp[1]|clk                              ;
; 0.500  ; 0.500        ; 0.000          ; High Pulse Width ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; sO1|storeOp[2]|clk                              ;
; 0.500  ; 0.500        ; 0.000          ; Low Pulse Width  ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; Rise       ; sO1|storeOp[2]|clk                              ;
+--------+--------------+----------------+------------------+---------------------------------------------------------+------------+-------------------------------------------------+


+-----------------------------------------------------------------------------------------------------------------------------+
; Fast Model Minimum Pulse Width: 'FSM:fsm1|state.S1'                                                                         ;
+-------+--------------+----------------+------------------+-------------------+------------+---------------------------------+
; Slack ; Actual Width ; Required Width ; Type             ; Clock             ; Clock Edge ; Target                          ;
+-------+--------------+----------------+------------------+-------------------+------------+---------------------------------+
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; fsm1|state.S1|regout            ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; fsm1|state.S1|regout            ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; fsm1|state.S1~clkctrl|inclk[0]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; fsm1|state.S1~clkctrl|inclk[0]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; fsm1|state.S1~clkctrl|outclk    ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; fsm1|state.S1~clkctrl|outclk    ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[0]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[0]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[10]|datac            ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[10]|datac            ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[11]|datac            ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[11]|datac            ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[12]|datac            ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[12]|datac            ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[1]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[1]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[2]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[2]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[3]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[3]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[4]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[4]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[5]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[5]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[6]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[6]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[7]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[7]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[8]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[8]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[9]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Rise       ; rT1|storeA[9]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[0]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[0]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[10] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[10] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[11] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[11] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[12] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[12] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[1]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[1]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[2]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[2]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[3]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[3]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[4]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[4]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[5]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[5]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[6]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[6]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[7]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[7]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[8]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[8]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[9]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S1 ; Fall       ; registerTransfer:rT1|storeA[9]  ;
+-------+--------------+----------------+------------------+-------------------+------------+---------------------------------+


+---------------------------------------------------------------------------------------------------------------------------+
; Fast Model Minimum Pulse Width: 'FSM:fsm1|state.S2'                                                                       ;
+-------+--------------+----------------+------------------+-------------------+------------+-------------------------------+
; Slack ; Actual Width ; Required Width ; Type             ; Clock             ; Clock Edge ; Target                        ;
+-------+--------------+----------------+------------------+-------------------+------------+-------------------------------+
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[0]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[0]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[10]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[10]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[11]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[11]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[12]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[12]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[13]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[13]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[14]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[14]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[15]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[15]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[16]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[16]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[17]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[17]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[18]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[18]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[19]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[19]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[1]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[1]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[20]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[20]|datad      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[21]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[21]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[22]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[22]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[23]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[23]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[28]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[28]|datac      ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[2]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[2]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[3]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[3]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[4]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[4]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[5]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[5]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[6]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[6]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[7]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[7]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[8]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[8]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[9]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; dMUX1|register[9]|datac       ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[0]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[0]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[10] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[10] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[11] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[11] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[12] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[12] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[13] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[13] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[14] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[14] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[15] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[15] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[16] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[16] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[17] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[17] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[18] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[18] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[19] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[19] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[1]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[1]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[20] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[20] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[21] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[21] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[22] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[22] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[23] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[23] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[28] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[28] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[2]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[2]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[3]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[3]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[4]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[4]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[5]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[5]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[6]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[6]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[7]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[7]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[8]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[8]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[9]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S2 ; Rise       ; displayMUX:dMUX1|register[9]  ;
+-------+--------------+----------------+------------------+-------------------+------------+-------------------------------+


+------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Minimum Pulse Width: 'FSM:fsm1|state.S3'                                                                          ;
+-------+--------------+----------------+------------------+-------------------+------------+----------------------------------+
; Slack ; Actual Width ; Required Width ; Type             ; Clock             ; Clock Edge ; Target                           ;
+-------+--------------+----------------+------------------+-------------------+------------+----------------------------------+
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; fsm1|state.S3|regout             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; fsm1|state.S3|regout             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[0]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[0]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[10]|datad             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[10]|datad             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[11]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[11]|datac             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[12]|datad             ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[12]|datad             ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[12]~1clkctrl|inclk[0] ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[12]~1clkctrl|inclk[0] ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[12]~1clkctrl|outclk   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[12]~1clkctrl|outclk   ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[12]~1|combout         ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[12]~1|combout         ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[12]~1|datad           ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[12]~1|datad           ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[1]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[1]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[2]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[2]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[3]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[3]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[4]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[4]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[5]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[5]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[6]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[6]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[7]|datac              ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[7]|datac              ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[8]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[8]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[9]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Rise       ; rT1|storeB[9]|datad              ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[0]   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[0]   ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[10]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[10]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[11]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[11]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[12]  ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[12]  ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[1]   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[1]   ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[2]   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[2]   ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[3]   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[3]   ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[4]   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[4]   ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[5]   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[5]   ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[6]   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[6]   ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[7]   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[7]   ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[8]   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[8]   ;
; 0.500 ; 0.500        ; 0.000          ; High Pulse Width ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[9]   ;
; 0.500 ; 0.500        ; 0.000          ; Low Pulse Width  ; FSM:fsm1|state.S3 ; Fall       ; registerTransfer:rT1|storeB[9]   ;
+-------+--------------+----------------+------------------+-------------------+------------+----------------------------------+


+--------------------------------------------------------------------------------------------------------------------------------------------------+
; Setup Times                                                                                                                                      ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+
; Data Port ; Clock Port                                        ; Rise   ; Fall   ; Clock Edge ; Clock Reference                                   ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+
; ROW[*]    ; ROW[0]                                            ; 2.777  ; 2.777  ; Rise       ; ROW[0]                                            ;
;  ROW[0]   ; ROW[0]                                            ; 0.089  ; 0.089  ; Rise       ; ROW[0]                                            ;
;  ROW[1]   ; ROW[0]                                            ; 2.492  ; 2.492  ; Rise       ; ROW[0]                                            ;
;  ROW[2]   ; ROW[0]                                            ; 2.698  ; 2.698  ; Rise       ; ROW[0]                                            ;
;  ROW[3]   ; ROW[0]                                            ; 2.777  ; 2.777  ; Rise       ; ROW[0]                                            ;
; ROW[*]    ; ROW[0]                                            ; 2.348  ; 2.348  ; Fall       ; ROW[0]                                            ;
;  ROW[0]   ; ROW[0]                                            ; -0.340 ; -0.340 ; Fall       ; ROW[0]                                            ;
;  ROW[1]   ; ROW[0]                                            ; 2.063  ; 2.063  ; Fall       ; ROW[0]                                            ;
;  ROW[2]   ; ROW[0]                                            ; 2.269  ; 2.269  ; Fall       ; ROW[0]                                            ;
;  ROW[3]   ; ROW[0]                                            ; 2.348  ; 2.348  ; Fall       ; ROW[0]                                            ;
; KEY[*]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.881  ; 2.881  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.668  ; 2.668  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.544  ; 2.544  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.621  ; 2.621  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.881  ; 2.881  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; ROW[*]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 3.365  ; 3.365  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 0.746  ; 0.746  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 3.166  ; 3.166  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 3.324  ; 3.324  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 3.365  ; 3.365  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; SW[*]     ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.305  ; 2.305  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  SW[17]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.305  ; 2.305  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+


+--------------------------------------------------------------------------------------------------------------------------------------------------+
; Hold Times                                                                                                                                       ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+
; Data Port ; Clock Port                                        ; Rise   ; Fall   ; Clock Edge ; Clock Reference                                   ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+
; ROW[*]    ; ROW[0]                                            ; 1.039  ; 1.039  ; Rise       ; ROW[0]                                            ;
;  ROW[0]   ; ROW[0]                                            ; 1.039  ; 1.039  ; Rise       ; ROW[0]                                            ;
;  ROW[1]   ; ROW[0]                                            ; -1.032 ; -1.032 ; Rise       ; ROW[0]                                            ;
;  ROW[2]   ; ROW[0]                                            ; -1.134 ; -1.134 ; Rise       ; ROW[0]                                            ;
;  ROW[3]   ; ROW[0]                                            ; -0.744 ; -0.744 ; Rise       ; ROW[0]                                            ;
; ROW[*]    ; ROW[0]                                            ; 0.810  ; 0.810  ; Fall       ; ROW[0]                                            ;
;  ROW[0]   ; ROW[0]                                            ; 0.810  ; 0.810  ; Fall       ; ROW[0]                                            ;
;  ROW[1]   ; ROW[0]                                            ; -1.593 ; -1.593 ; Fall       ; ROW[0]                                            ;
;  ROW[2]   ; ROW[0]                                            ; -1.799 ; -1.799 ; Fall       ; ROW[0]                                            ;
;  ROW[3]   ; ROW[0]                                            ; -1.878 ; -1.878 ; Fall       ; ROW[0]                                            ;
; KEY[*]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -2.050 ; -2.050 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -2.174 ; -2.174 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -2.050 ; -2.050 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -2.127 ; -2.127 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -2.387 ; -2.387 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; ROW[*]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.626 ; -0.626 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.626 ; -0.626 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -3.046 ; -3.046 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -3.204 ; -3.204 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -3.245 ; -3.245 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; SW[*]     ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -2.177 ; -2.177 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  SW[17]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -2.177 ; -2.177 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+


+------------------------------------------------------------------------------------------------------------------------------------------------+
; Clock to Output Times                                                                                                                          ;
+-----------+---------------------------------------------------+-------+-------+------------+---------------------------------------------------+
; Data Port ; Clock Port                                        ; Rise  ; Fall  ; Clock Edge ; Clock Reference                                   ;
+-----------+---------------------------------------------------+-------+-------+------------+---------------------------------------------------+
; LEDG[*]   ; FSM:fsm1|state.S1                                 ; 2.810 ;       ; Rise       ; FSM:fsm1|state.S1                                 ;
;  LEDG[1]  ; FSM:fsm1|state.S1                                 ; 2.810 ;       ; Rise       ; FSM:fsm1|state.S1                                 ;
; LEDG[*]   ; FSM:fsm1|state.S1                                 ;       ; 2.810 ; Fall       ; FSM:fsm1|state.S1                                 ;
;  LEDG[1]  ; FSM:fsm1|state.S1                                 ;       ; 2.810 ; Fall       ; FSM:fsm1|state.S1                                 ;
; LEDG[*]   ; FSM:fsm1|state.S2                                 ; 3.239 ;       ; Rise       ; FSM:fsm1|state.S2                                 ;
;  LEDG[2]  ; FSM:fsm1|state.S2                                 ; 3.239 ;       ; Rise       ; FSM:fsm1|state.S2                                 ;
; LEDG[*]   ; FSM:fsm1|state.S2                                 ;       ; 3.239 ; Fall       ; FSM:fsm1|state.S2                                 ;
;  LEDG[2]  ; FSM:fsm1|state.S2                                 ;       ; 3.239 ; Fall       ; FSM:fsm1|state.S2                                 ;
; LEDG[*]   ; FSM:fsm1|state.S3                                 ; 2.837 ;       ; Rise       ; FSM:fsm1|state.S3                                 ;
;  LEDG[3]  ; FSM:fsm1|state.S3                                 ; 2.837 ;       ; Rise       ; FSM:fsm1|state.S3                                 ;
; LEDG[*]   ; FSM:fsm1|state.S3                                 ;       ; 2.837 ; Fall       ; FSM:fsm1|state.S3                                 ;
;  LEDG[3]  ; FSM:fsm1|state.S3                                 ;       ; 2.837 ; Fall       ; FSM:fsm1|state.S3                                 ;
; COL[*]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.881 ; 2.881 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.760 ; 2.760 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.881 ; 2.881 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.840 ; 2.840 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.769 ; 2.769 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX0[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.255 ; 5.255 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.166 ; 5.166 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.255 ; 5.255 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.254 ; 5.254 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.123 ; 5.123 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.141 ; 5.141 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.004 ; 5.004 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.127 ; 5.127 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX1[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.774 ; 5.774 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.670 ; 5.670 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.774 ; 5.774 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.544 ; 5.544 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.515 ; 5.515 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.545 ; 5.545 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.685 ; 5.685 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.554 ; 5.554 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX2[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 6.186 ; 6.186 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.675 ; 5.675 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.666 ; 5.666 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.500 ; 5.500 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 6.018 ; 6.018 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.726 ; 5.726 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.932 ; 5.932 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 6.186 ; 6.186 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX3[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.533 ; 5.533 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.533 ; 5.533 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.398 ; 5.398 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.418 ; 5.418 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.400 ; 5.400 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.422 ; 5.422 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.495 ; 5.495 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.507 ; 5.507 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX4[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.077 ; 5.077 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.008 ; 5.008 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.070 ; 5.070 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.077 ; 5.077 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.932 ; 4.932 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.946 ; 4.946 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.950 ; 4.950 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.024 ; 5.024 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX5[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.904 ; 4.904 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.904 ; 4.904 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.673 ; 4.673 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.715 ; 4.715 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.770 ; 4.770 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.748 ; 4.748 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.758 ; 4.758 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.534 ; 4.534 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX7[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.334 ; 5.334 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.113 ; 5.113 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.978 ; 4.978 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.948 ; 4.948 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.083 ; 5.083 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.083 ; 5.083 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.104 ; 5.104 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.334 ; 5.334 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; LEDG[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.971 ; 4.971 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  LEDG[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.841 ; 4.841 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  LEDG[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.971 ; 4.971 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
+-----------+---------------------------------------------------+-------+-------+------------+---------------------------------------------------+


+------------------------------------------------------------------------------------------------------------------------------------------------+
; Minimum Clock to Output Times                                                                                                                  ;
+-----------+---------------------------------------------------+-------+-------+------------+---------------------------------------------------+
; Data Port ; Clock Port                                        ; Rise  ; Fall  ; Clock Edge ; Clock Reference                                   ;
+-----------+---------------------------------------------------+-------+-------+------------+---------------------------------------------------+
; LEDG[*]   ; FSM:fsm1|state.S1                                 ; 2.810 ;       ; Rise       ; FSM:fsm1|state.S1                                 ;
;  LEDG[1]  ; FSM:fsm1|state.S1                                 ; 2.810 ;       ; Rise       ; FSM:fsm1|state.S1                                 ;
; LEDG[*]   ; FSM:fsm1|state.S1                                 ;       ; 2.810 ; Fall       ; FSM:fsm1|state.S1                                 ;
;  LEDG[1]  ; FSM:fsm1|state.S1                                 ;       ; 2.810 ; Fall       ; FSM:fsm1|state.S1                                 ;
; LEDG[*]   ; FSM:fsm1|state.S2                                 ; 3.239 ;       ; Rise       ; FSM:fsm1|state.S2                                 ;
;  LEDG[2]  ; FSM:fsm1|state.S2                                 ; 3.239 ;       ; Rise       ; FSM:fsm1|state.S2                                 ;
; LEDG[*]   ; FSM:fsm1|state.S2                                 ;       ; 3.239 ; Fall       ; FSM:fsm1|state.S2                                 ;
;  LEDG[2]  ; FSM:fsm1|state.S2                                 ;       ; 3.239 ; Fall       ; FSM:fsm1|state.S2                                 ;
; LEDG[*]   ; FSM:fsm1|state.S3                                 ; 2.837 ;       ; Rise       ; FSM:fsm1|state.S3                                 ;
;  LEDG[3]  ; FSM:fsm1|state.S3                                 ; 2.837 ;       ; Rise       ; FSM:fsm1|state.S3                                 ;
; LEDG[*]   ; FSM:fsm1|state.S3                                 ;       ; 2.837 ; Fall       ; FSM:fsm1|state.S3                                 ;
;  LEDG[3]  ; FSM:fsm1|state.S3                                 ;       ; 2.837 ; Fall       ; FSM:fsm1|state.S3                                 ;
; COL[*]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.760 ; 2.760 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.760 ; 2.760 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.881 ; 2.881 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.840 ; 2.840 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.769 ; 2.769 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX0[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.756 ; 4.756 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.915 ; 4.915 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.992 ; 4.992 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.986 ; 4.986 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.874 ; 4.874 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.886 ; 4.886 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.756 ; 4.756 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.879 ; 4.879 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX1[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.998 ; 4.998 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.152 ; 5.152 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.257 ; 5.257 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.031 ; 5.031 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.998 ; 4.998 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.028 ; 5.028 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.167 ; 5.167 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.036 ; 5.036 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX2[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.090 ; 5.090 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.265 ; 5.265 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.254 ; 5.254 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.090 ; 5.090 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.607 ; 5.607 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.317 ; 5.317 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.523 ; 5.523 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.776 ; 5.776 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX3[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.988 ; 4.988 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.123 ; 5.123 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.988 ; 4.988 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.003 ; 5.003 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.989 ; 4.989 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.008 ; 5.008 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.085 ; 5.085 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.093 ; 5.093 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX4[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.786 ; 4.786 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.870 ; 4.870 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.930 ; 4.930 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.930 ; 4.930 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.786 ; 4.786 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.804 ; 4.804 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.808 ; 4.808 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.874 ; 4.874 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX5[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.411 ; 4.411 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.774 ; 4.774 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.544 ; 4.544 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.598 ; 4.598 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.639 ; 4.639 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.625 ; 4.625 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.624 ; 4.624 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.411 ; 4.411 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX7[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.948 ; 4.948 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.057 ; 5.057 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.978 ; 4.978 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.948 ; 4.948 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.027 ; 5.027 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.027 ; 5.027 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.048 ; 5.048 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.252 ; 5.252 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; LEDG[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.841 ; 4.841 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  LEDG[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.841 ; 4.841 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  LEDG[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.971 ; 4.971 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
+-----------+---------------------------------------------------+-------+-------+------------+---------------------------------------------------+


+---------------------------------------------------------------------------------------------------------------------------+
; Multicorner Timing Analysis Summary                                                                                       ;
+----------------------------------------------------------+-----------+---------+----------+---------+---------------------+
; Clock                                                    ; Setup     ; Hold    ; Recovery ; Removal ; Minimum Pulse Width ;
+----------------------------------------------------------+-----------+---------+----------+---------+---------------------+
; Worst-case Slack                                         ; -46.853   ; -3.156  ; -0.266   ; 0.585   ; -1.380              ;
;  CLOCK_50                                                ; -4.612    ; -2.519  ; N/A      ; N/A     ; -1.380              ;
;  FSM:fsm1|state.S1                                       ; -1.215    ; 0.874   ; N/A      ; N/A     ; 0.500               ;
;  FSM:fsm1|state.S2                                       ; -46.853   ; -1.202  ; N/A      ; N/A     ; 0.500               ;
;  FSM:fsm1|state.S3                                       ; -2.034    ; 0.587   ; N/A      ; N/A     ; 0.500               ;
;  ROW[0]                                                  ; 0.243     ; -2.641  ; N/A      ; N/A     ; -1.222              ;
;  inputManager:iM1|clockDivider:clock500Hz|newClock       ; -3.327    ; -3.156  ; -0.266   ; 0.585   ; -0.500              ;
;  inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; -10.573   ; 0.803   ; N/A      ; N/A     ; -0.500              ;
;  inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; -0.155    ; 0.339   ; N/A      ; N/A     ; -0.500              ;
; Design-wide TNS                                          ; -1337.752 ; -72.798 ; -1.33    ; 0.0     ; -156.92             ;
;  CLOCK_50                                                ; -58.599   ; -2.519  ; N/A      ; N/A     ; -28.380             ;
;  FSM:fsm1|state.S1                                       ; -15.344   ; 0.000   ; N/A      ; N/A     ; 0.000               ;
;  FSM:fsm1|state.S2                                       ; -893.936  ; -11.202 ; N/A      ; N/A     ; 0.000               ;
;  FSM:fsm1|state.S3                                       ; -22.974   ; 0.000   ; N/A      ; N/A     ; 0.000               ;
;  ROW[0]                                                  ; 0.000     ; -24.061 ; N/A      ; N/A     ; -13.540             ;
;  inputManager:iM1|clockDivider:clock500Hz|newClock       ; -140.382  ; -35.016 ; -1.330   ; 0.000   ; -91.000             ;
;  inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; -206.299  ; 0.000   ; N/A      ; N/A     ; -21.000             ;
;  inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; -0.218    ; 0.000   ; N/A      ; N/A     ; -3.000              ;
+----------------------------------------------------------+-----------+---------+----------+---------+---------------------+


+--------------------------------------------------------------------------------------------------------------------------------------------------+
; Setup Times                                                                                                                                      ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+
; Data Port ; Clock Port                                        ; Rise   ; Fall   ; Clock Edge ; Clock Reference                                   ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+
; ROW[*]    ; ROW[0]                                            ; 4.812  ; 4.812  ; Rise       ; ROW[0]                                            ;
;  ROW[0]   ; ROW[0]                                            ; 0.218  ; 0.218  ; Rise       ; ROW[0]                                            ;
;  ROW[1]   ; ROW[0]                                            ; 4.139  ; 4.139  ; Rise       ; ROW[0]                                            ;
;  ROW[2]   ; ROW[0]                                            ; 4.522  ; 4.522  ; Rise       ; ROW[0]                                            ;
;  ROW[3]   ; ROW[0]                                            ; 4.812  ; 4.812  ; Rise       ; ROW[0]                                            ;
; ROW[*]    ; ROW[0]                                            ; 3.746  ; 3.746  ; Fall       ; ROW[0]                                            ;
;  ROW[0]   ; ROW[0]                                            ; -0.340 ; -0.340 ; Fall       ; ROW[0]                                            ;
;  ROW[1]   ; ROW[0]                                            ; 3.073  ; 3.073  ; Fall       ; ROW[0]                                            ;
;  ROW[2]   ; ROW[0]                                            ; 3.456  ; 3.456  ; Fall       ; ROW[0]                                            ;
;  ROW[3]   ; ROW[0]                                            ; 3.746  ; 3.746  ; Fall       ; ROW[0]                                            ;
; KEY[*]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.350  ; 5.350  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.991  ; 4.991  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.821  ; 4.821  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.942  ; 4.942  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.350  ; 5.350  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; ROW[*]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.827  ; 5.827  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 1.470  ; 1.470  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.357  ; 5.357  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.624  ; 5.624  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.827  ; 5.827  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; SW[*]     ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 3.983  ; 3.983  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  SW[17]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 3.983  ; 3.983  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+


+--------------------------------------------------------------------------------------------------------------------------------------------------+
; Hold Times                                                                                                                                       ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+
; Data Port ; Clock Port                                        ; Rise   ; Fall   ; Clock Edge ; Clock Reference                                   ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+
; ROW[*]    ; ROW[0]                                            ; 2.147  ; 2.147  ; Rise       ; ROW[0]                                            ;
;  ROW[0]   ; ROW[0]                                            ; 2.147  ; 2.147  ; Rise       ; ROW[0]                                            ;
;  ROW[1]   ; ROW[0]                                            ; -1.032 ; -1.032 ; Rise       ; ROW[0]                                            ;
;  ROW[2]   ; ROW[0]                                            ; -1.134 ; -1.134 ; Rise       ; ROW[0]                                            ;
;  ROW[3]   ; ROW[0]                                            ; -0.744 ; -0.744 ; Rise       ; ROW[0]                                            ;
; ROW[*]    ; ROW[0]                                            ; 1.966  ; 1.966  ; Fall       ; ROW[0]                                            ;
;  ROW[0]   ; ROW[0]                                            ; 1.966  ; 1.966  ; Fall       ; ROW[0]                                            ;
;  ROW[1]   ; ROW[0]                                            ; -1.593 ; -1.593 ; Fall       ; ROW[0]                                            ;
;  ROW[2]   ; ROW[0]                                            ; -1.799 ; -1.799 ; Fall       ; ROW[0]                                            ;
;  ROW[3]   ; ROW[0]                                            ; -1.878 ; -1.878 ; Fall       ; ROW[0]                                            ;
; KEY[*]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -2.050 ; -2.050 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -2.174 ; -2.174 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -2.050 ; -2.050 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -2.127 ; -2.127 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  KEY[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -2.387 ; -2.387 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; ROW[*]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.626 ; -0.626 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -0.626 ; -0.626 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -3.046 ; -3.046 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -3.204 ; -3.204 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  ROW[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -3.245 ; -3.245 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; SW[*]     ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -2.177 ; -2.177 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  SW[17]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; -2.177 ; -2.177 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+


+--------------------------------------------------------------------------------------------------------------------------------------------------+
; Clock to Output Times                                                                                                                            ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+
; Data Port ; Clock Port                                        ; Rise   ; Fall   ; Clock Edge ; Clock Reference                                   ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+
; LEDG[*]   ; FSM:fsm1|state.S1                                 ; 5.302  ;        ; Rise       ; FSM:fsm1|state.S1                                 ;
;  LEDG[1]  ; FSM:fsm1|state.S1                                 ; 5.302  ;        ; Rise       ; FSM:fsm1|state.S1                                 ;
; LEDG[*]   ; FSM:fsm1|state.S1                                 ;        ; 5.302  ; Fall       ; FSM:fsm1|state.S1                                 ;
;  LEDG[1]  ; FSM:fsm1|state.S1                                 ;        ; 5.302  ; Fall       ; FSM:fsm1|state.S1                                 ;
; LEDG[*]   ; FSM:fsm1|state.S2                                 ; 6.087  ;        ; Rise       ; FSM:fsm1|state.S2                                 ;
;  LEDG[2]  ; FSM:fsm1|state.S2                                 ; 6.087  ;        ; Rise       ; FSM:fsm1|state.S2                                 ;
; LEDG[*]   ; FSM:fsm1|state.S2                                 ;        ; 6.087  ; Fall       ; FSM:fsm1|state.S2                                 ;
;  LEDG[2]  ; FSM:fsm1|state.S2                                 ;        ; 6.087  ; Fall       ; FSM:fsm1|state.S2                                 ;
; LEDG[*]   ; FSM:fsm1|state.S3                                 ; 5.400  ;        ; Rise       ; FSM:fsm1|state.S3                                 ;
;  LEDG[3]  ; FSM:fsm1|state.S3                                 ; 5.400  ;        ; Rise       ; FSM:fsm1|state.S3                                 ;
; LEDG[*]   ; FSM:fsm1|state.S3                                 ;        ; 5.400  ; Fall       ; FSM:fsm1|state.S3                                 ;
;  LEDG[3]  ; FSM:fsm1|state.S3                                 ;        ; 5.400  ; Fall       ; FSM:fsm1|state.S3                                 ;
; COL[*]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.521  ; 5.521  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.261  ; 5.261  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.521  ; 5.521  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.465  ; 5.465  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.277  ; 5.277  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX0[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.963  ; 9.963  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.707  ; 9.707  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.963  ; 9.963  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.944  ; 9.944  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.667  ; 9.667  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.691  ; 9.691  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.416  ; 9.416  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.676  ; 9.676  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX1[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.822 ; 10.822 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.572 ; 10.572 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.822 ; 10.822 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.412 ; 10.412 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.371 ; 10.371 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.400 ; 10.400 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.707 ; 10.707 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.409 ; 10.409 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX2[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 11.846 ; 11.846 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.755 ; 10.755 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.868 ; 10.868 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.382 ; 10.382 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 11.541 ; 11.541 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.979 ; 10.979 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 11.393 ; 11.393 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 11.846 ; 11.846 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX3[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.361 ; 10.361 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.361 ; 10.361 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.072 ; 10.072 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.111 ; 10.111 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.075 ; 10.075 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.116 ; 10.116 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.324 ; 10.324 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.336 ; 10.336 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX4[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.723  ; 9.723  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.585  ; 9.585  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.711  ; 9.711  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.723  ; 9.723  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.426  ; 9.426  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.431  ; 9.431  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.444  ; 9.444  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.603  ; 9.603  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX5[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.393  ; 9.393  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.393  ; 9.393  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 8.859  ; 8.859  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.030  ; 9.030  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.094  ; 9.094  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.074  ; 9.074  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.088  ; 9.088  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 8.587  ; 8.587  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX7[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.052 ; 10.052 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.560  ; 9.560  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.222  ; 9.222  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.192  ; 9.192  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.530  ; 9.530  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.530  ; 9.530  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.549  ; 9.549  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 10.052 ; 10.052 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; LEDG[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.200  ; 9.200  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  LEDG[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 8.882  ; 8.882  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  LEDG[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 9.200  ; 9.200  ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
+-----------+---------------------------------------------------+--------+--------+------------+---------------------------------------------------+


+------------------------------------------------------------------------------------------------------------------------------------------------+
; Minimum Clock to Output Times                                                                                                                  ;
+-----------+---------------------------------------------------+-------+-------+------------+---------------------------------------------------+
; Data Port ; Clock Port                                        ; Rise  ; Fall  ; Clock Edge ; Clock Reference                                   ;
+-----------+---------------------------------------------------+-------+-------+------------+---------------------------------------------------+
; LEDG[*]   ; FSM:fsm1|state.S1                                 ; 2.810 ;       ; Rise       ; FSM:fsm1|state.S1                                 ;
;  LEDG[1]  ; FSM:fsm1|state.S1                                 ; 2.810 ;       ; Rise       ; FSM:fsm1|state.S1                                 ;
; LEDG[*]   ; FSM:fsm1|state.S1                                 ;       ; 2.810 ; Fall       ; FSM:fsm1|state.S1                                 ;
;  LEDG[1]  ; FSM:fsm1|state.S1                                 ;       ; 2.810 ; Fall       ; FSM:fsm1|state.S1                                 ;
; LEDG[*]   ; FSM:fsm1|state.S2                                 ; 3.239 ;       ; Rise       ; FSM:fsm1|state.S2                                 ;
;  LEDG[2]  ; FSM:fsm1|state.S2                                 ; 3.239 ;       ; Rise       ; FSM:fsm1|state.S2                                 ;
; LEDG[*]   ; FSM:fsm1|state.S2                                 ;       ; 3.239 ; Fall       ; FSM:fsm1|state.S2                                 ;
;  LEDG[2]  ; FSM:fsm1|state.S2                                 ;       ; 3.239 ; Fall       ; FSM:fsm1|state.S2                                 ;
; LEDG[*]   ; FSM:fsm1|state.S3                                 ; 2.837 ;       ; Rise       ; FSM:fsm1|state.S3                                 ;
;  LEDG[3]  ; FSM:fsm1|state.S3                                 ; 2.837 ;       ; Rise       ; FSM:fsm1|state.S3                                 ;
; LEDG[*]   ; FSM:fsm1|state.S3                                 ;       ; 2.837 ; Fall       ; FSM:fsm1|state.S3                                 ;
;  LEDG[3]  ; FSM:fsm1|state.S3                                 ;       ; 2.837 ; Fall       ; FSM:fsm1|state.S3                                 ;
; COL[*]    ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.760 ; 2.760 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[0]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.760 ; 2.760 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[1]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.881 ; 2.881 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[2]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.840 ; 2.840 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  COL[3]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 2.769 ; 2.769 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX0[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.756 ; 4.756 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.915 ; 4.915 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.992 ; 4.992 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.986 ; 4.986 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.874 ; 4.874 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.886 ; 4.886 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.756 ; 4.756 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX0[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.879 ; 4.879 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX1[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.998 ; 4.998 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.152 ; 5.152 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.257 ; 5.257 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.031 ; 5.031 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.998 ; 4.998 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.028 ; 5.028 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.167 ; 5.167 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX1[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.036 ; 5.036 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX2[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.090 ; 5.090 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.265 ; 5.265 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.254 ; 5.254 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.090 ; 5.090 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.607 ; 5.607 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.317 ; 5.317 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.523 ; 5.523 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX2[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.776 ; 5.776 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX3[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.988 ; 4.988 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.123 ; 5.123 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.988 ; 4.988 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.003 ; 5.003 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.989 ; 4.989 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.008 ; 5.008 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.085 ; 5.085 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX3[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.093 ; 5.093 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX4[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.786 ; 4.786 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.870 ; 4.870 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.930 ; 4.930 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.930 ; 4.930 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.786 ; 4.786 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.804 ; 4.804 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.808 ; 4.808 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX4[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.874 ; 4.874 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX5[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.411 ; 4.411 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.774 ; 4.774 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.544 ; 4.544 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.598 ; 4.598 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.639 ; 4.639 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.625 ; 4.625 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.624 ; 4.624 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX5[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.411 ; 4.411 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; HEX7[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.948 ; 4.948 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.057 ; 5.057 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[1]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.978 ; 4.978 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[2]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.948 ; 4.948 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[3]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.027 ; 5.027 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.027 ; 5.027 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[5]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.048 ; 5.048 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  HEX7[6]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5.252 ; 5.252 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
; LEDG[*]   ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.841 ; 4.841 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  LEDG[0]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.841 ; 4.841 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
;  LEDG[4]  ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 4.971 ; 4.971 ; Rise       ; inputManager:iM1|clockDivider:clock500Hz|newClock ;
+-----------+---------------------------------------------------+-------+-------+------------+---------------------------------------------------+


+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Setup Transfers                                                                                                                                                   ;
+---------------------------------------------------------+---------------------------------------------------------+--------------+----------+----------+----------+
; From Clock                                              ; To Clock                                                ; RR Paths     ; FR Paths ; RF Paths ; FF Paths ;
+---------------------------------------------------------+---------------------------------------------------------+--------------+----------+----------+----------+
; CLOCK_50                                                ; CLOCK_50                                                ; 3159         ; 0        ; 0        ; 0        ;
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; CLOCK_50                                                ; 1            ; 1        ; 0        ; 0        ;
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; FSM:fsm1|state.S1                                       ; 0            ; 0        ; 13       ; 0        ;
; FSM:fsm1|state.S1                                       ; FSM:fsm1|state.S2                                       ; 0            ; 13       ; 0        ; 0        ;
; FSM:fsm1|state.S3                                       ; FSM:fsm1|state.S2                                       ; 16           ; 29       ; 0        ; 0        ;
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; FSM:fsm1|state.S2                                       ; 38           ; 0        ; 0        ; 0        ;
; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; FSM:fsm1|state.S2                                       ; > 2147483647 ; 0        ; 0        ; 0        ;
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; FSM:fsm1|state.S3                                       ; 0            ; 0        ; 39       ; 0        ;
; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock       ; 36           ; 36       ; 0        ; 0        ;
; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock       ; 73           ; 34       ; 0        ; 0        ;
; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock       ; 35           ; 35       ; 0        ; 0        ;
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; inputManager:iM1|clockDivider:clock500Hz|newClock       ; 406          ; 0        ; 0        ; 0        ;
; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock       ; 22           ; 22       ; 0        ; 0        ;
; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock       ; 22           ; 22       ; 0        ; 0        ;
; ROW[0]                                                  ; inputManager:iM1|clockDivider:clock500Hz|newClock       ; 27           ; 8        ; 0        ; 0        ;
; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; 0            ; 58158    ; 0        ; 0        ;
; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; 0            ; 58158    ; 0        ; 0        ;
; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; 291          ; 0        ; 0        ; 0        ;
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; 3            ; 0        ; 0        ; 0        ;
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; ROW[0]                                                  ; 63           ; 0        ; 16       ; 0        ;
; ROW[0]                                                  ; ROW[0]                                                  ; 17           ; 17       ; 4        ; 4        ;
+---------------------------------------------------------+---------------------------------------------------------+--------------+----------+----------+----------+
Entries labeled "false path" only account for clock-to-clock false paths and not path-based false paths. As a result, actual path counts may be lower than reported.


+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Hold Transfers                                                                                                                                                    ;
+---------------------------------------------------------+---------------------------------------------------------+--------------+----------+----------+----------+
; From Clock                                              ; To Clock                                                ; RR Paths     ; FR Paths ; RF Paths ; FF Paths ;
+---------------------------------------------------------+---------------------------------------------------------+--------------+----------+----------+----------+
; CLOCK_50                                                ; CLOCK_50                                                ; 3159         ; 0        ; 0        ; 0        ;
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; CLOCK_50                                                ; 1            ; 1        ; 0        ; 0        ;
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; FSM:fsm1|state.S1                                       ; 0            ; 0        ; 13       ; 0        ;
; FSM:fsm1|state.S1                                       ; FSM:fsm1|state.S2                                       ; 0            ; 13       ; 0        ; 0        ;
; FSM:fsm1|state.S3                                       ; FSM:fsm1|state.S2                                       ; 16           ; 29       ; 0        ; 0        ;
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; FSM:fsm1|state.S2                                       ; 38           ; 0        ; 0        ; 0        ;
; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; FSM:fsm1|state.S2                                       ; > 2147483647 ; 0        ; 0        ; 0        ;
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; FSM:fsm1|state.S3                                       ; 0            ; 0        ; 39       ; 0        ;
; FSM:fsm1|state.S1                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock       ; 36           ; 36       ; 0        ; 0        ;
; FSM:fsm1|state.S2                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock       ; 73           ; 34       ; 0        ; 0        ;
; FSM:fsm1|state.S3                                       ; inputManager:iM1|clockDivider:clock500Hz|newClock       ; 35           ; 35       ; 0        ; 0        ;
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; inputManager:iM1|clockDivider:clock500Hz|newClock       ; 406          ; 0        ; 0        ; 0        ;
; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; inputManager:iM1|clockDivider:clock500Hz|newClock       ; 22           ; 22       ; 0        ; 0        ;
; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|clockDivider:clock500Hz|newClock       ; 22           ; 22       ; 0        ; 0        ;
; ROW[0]                                                  ; inputManager:iM1|clockDivider:clock500Hz|newClock       ; 27           ; 8        ; 0        ; 0        ;
; FSM:fsm1|state.S1                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; 0            ; 58158    ; 0        ; 0        ;
; FSM:fsm1|state.S3                                       ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; 0            ; 58158    ; 0        ; 0        ;
; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]    ; 291          ; 0        ; 0        ; 0        ;
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] ; 3            ; 0        ; 0        ; 0        ;
; inputManager:iM1|clockDivider:clock500Hz|newClock       ; ROW[0]                                                  ; 63           ; 0        ; 16       ; 0        ;
; ROW[0]                                                  ; ROW[0]                                                  ; 17           ; 17       ; 4        ; 4        ;
+---------------------------------------------------------+---------------------------------------------------------+--------------+----------+----------+----------+
Entries labeled "false path" only account for clock-to-clock false paths and not path-based false paths. As a result, actual path counts may be lower than reported.


+---------------------------------------------------------------------------------------------------------------------------------------------------+
; Recovery Transfers                                                                                                                                ;
+---------------------------------------------------+---------------------------------------------------+----------+----------+----------+----------+
; From Clock                                        ; To Clock                                          ; RR Paths ; FR Paths ; RF Paths ; FF Paths ;
+---------------------------------------------------+---------------------------------------------------+----------+----------+----------+----------+
; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5        ; 0        ; 0        ; 0        ;
+---------------------------------------------------+---------------------------------------------------+----------+----------+----------+----------+
Entries labeled "false path" only account for clock-to-clock false paths and not path-based false paths. As a result, actual path counts may be lower than reported.


+---------------------------------------------------------------------------------------------------------------------------------------------------+
; Removal Transfers                                                                                                                                 ;
+---------------------------------------------------+---------------------------------------------------+----------+----------+----------+----------+
; From Clock                                        ; To Clock                                          ; RR Paths ; FR Paths ; RF Paths ; FF Paths ;
+---------------------------------------------------+---------------------------------------------------+----------+----------+----------+----------+
; inputManager:iM1|clockDivider:clock500Hz|newClock ; inputManager:iM1|clockDivider:clock500Hz|newClock ; 5        ; 0        ; 0        ; 0        ;
+---------------------------------------------------+---------------------------------------------------+----------+----------+----------+----------+
Entries labeled "false path" only account for clock-to-clock false paths and not path-based false paths. As a result, actual path counts may be lower than reported.


---------------
; Report TCCS ;
---------------
No dedicated SERDES Transmitter circuitry present in device or used in design


---------------
; Report RSKM ;
---------------
No dedicated SERDES Receiver circuitry present in device or used in design


+------------------------------------------------+
; Unconstrained Paths                            ;
+---------------------------------+-------+------+
; Property                        ; Setup ; Hold ;
+---------------------------------+-------+------+
; Illegal Clocks                  ; 0     ; 0    ;
; Unconstrained Clocks            ; 0     ; 0    ;
; Unconstrained Input Ports       ; 8     ; 8    ;
; Unconstrained Input Port Paths  ; 63    ; 63   ;
; Unconstrained Output Ports      ; 58    ; 58   ;
; Unconstrained Output Port Paths ; 189   ; 189  ;
+---------------------------------+-------+------+


+------------------------------------+
; TimeQuest Timing Analyzer Messages ;
+------------------------------------+
Info: *******************************************************************
Info: Running Quartus II 64-Bit TimeQuest Timing Analyzer
    Info: Version 12.0 Build 178 05/31/2012 SJ Full Version
    Info: Processing started: Mon Oct 15 09:34:33 2018
Info: Command: quartus_sta Mecheng371P2 -c Mecheng371P2
Info: qsta_default_script.tcl version: #4
Info (20030): Parallel compilation is enabled and will use 4 of the 4 processors detected
Info (21077): Low junction temperature is 0 degrees C
Info (21077): High junction temperature is 85 degrees C
Warning (335093): TimeQuest Timing Analyzer is analyzing 62 combinational loops as latches.
Critical Warning (332012): Synopsys Design Constraints File file not found: 'Mecheng371P2.sdc'. A Synopsys Design Constraints File is required by the TimeQuest Timing Analyzer to get proper timing constraints. Without it, the Compiler will not properly optimize the design.
Info (332142): No user constrained base clocks found in the design. Calling "derive_clocks -period 1.0"
Info (332105): Deriving Clocks
    Info (332105): create_clock -period 1.000 -name CLOCK_50 CLOCK_50
    Info (332105): create_clock -period 1.000 -name inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] inputManager:iM1|pulseSignal:equalPulser|keyPulse[4]
    Info (332105): create_clock -period 1.000 -name inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4]
    Info (332105): create_clock -period 1.000 -name inputManager:iM1|clockDivider:clock500Hz|newClock inputManager:iM1|clockDivider:clock500Hz|newClock
    Info (332105): create_clock -period 1.000 -name ROW[0] ROW[0]
    Info (332105): create_clock -period 1.000 -name FSM:fsm1|state.S3 FSM:fsm1|state.S3
    Info (332105): create_clock -period 1.000 -name FSM:fsm1|state.S2 FSM:fsm1|state.S2
    Info (332105): create_clock -period 1.000 -name FSM:fsm1|state.S1 FSM:fsm1|state.S1
Info (332097): The following timing edges are non-unate.  TimeQuest will assume pos-unate behavior for these edges in the clock network.
    Info (332098): Cell: iM1|matrixDecoder|WideOr0~2  from: datad  to: combout
    Info (332098): Cell: iM1|matrixDecoder|WideOr4~2  from: dataa  to: combout
    Info (332098): Cell: iM1|matrixDecoder|WideOr6~0  from: datac  to: combout
    Info (332098): Cell: iM1|matrixDecoder|WideOr6~2  from: datac  to: combout
    Info (332098): Cell: iM1|matrixDecoder|WideOr6~5  from: datab  to: combout
Info: Found TIMEQUEST_REPORT_SCRIPT_INCLUDE_DEFAULT_ANALYSIS = ON
Info: Analyzing Slow Model
Critical Warning (332148): Timing requirements not met
Info (332146): Worst-case setup slack is -46.853
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):   -46.853      -893.936 FSM:fsm1|state.S2 
    Info (332119):   -10.573      -206.299 inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] 
    Info (332119):    -4.612       -58.599 CLOCK_50 
    Info (332119):    -3.327      -140.382 inputManager:iM1|clockDivider:clock500Hz|newClock 
    Info (332119):    -2.034       -22.974 FSM:fsm1|state.S3 
    Info (332119):    -1.215       -15.344 FSM:fsm1|state.S1 
    Info (332119):    -0.155        -0.218 inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] 
    Info (332119):     0.243         0.000 ROW[0] 
Info (332146): Worst-case hold slack is -3.156
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):    -3.156       -35.016 inputManager:iM1|clockDivider:clock500Hz|newClock 
    Info (332119):    -2.641       -24.061 ROW[0] 
    Info (332119):    -2.519        -2.519 CLOCK_50 
    Info (332119):    -1.202       -11.202 FSM:fsm1|state.S2 
    Info (332119):     0.787         0.000 inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] 
    Info (332119):     0.957         0.000 FSM:fsm1|state.S3 
    Info (332119):     1.179         0.000 FSM:fsm1|state.S1 
    Info (332119):     1.732         0.000 inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] 
Info (332146): Worst-case recovery slack is -0.266
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):    -0.266        -1.330 inputManager:iM1|clockDivider:clock500Hz|newClock 
Info (332146): Worst-case removal slack is 1.036
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):     1.036         0.000 inputManager:iM1|clockDivider:clock500Hz|newClock 
Info (332146): Worst-case minimum pulse width slack is -1.380
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):    -1.380       -28.380 CLOCK_50 
    Info (332119):    -1.222       -13.540 ROW[0] 
    Info (332119):    -0.500       -91.000 inputManager:iM1|clockDivider:clock500Hz|newClock 
    Info (332119):    -0.500       -21.000 inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] 
    Info (332119):    -0.500        -3.000 inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] 
    Info (332119):     0.500         0.000 FSM:fsm1|state.S1 
    Info (332119):     0.500         0.000 FSM:fsm1|state.S2 
    Info (332119):     0.500         0.000 FSM:fsm1|state.S3 
Info (332001): The selected device family is not supported by the report_metastability command.
Info: Analyzing Fast Model
Info (332097): The following timing edges are non-unate.  TimeQuest will assume pos-unate behavior for these edges in the clock network.
    Info (332098): Cell: iM1|matrixDecoder|WideOr0~2  from: datad  to: combout
    Info (332098): Cell: iM1|matrixDecoder|WideOr4~2  from: dataa  to: combout
    Info (332098): Cell: iM1|matrixDecoder|WideOr6~0  from: datac  to: combout
    Info (332098): Cell: iM1|matrixDecoder|WideOr6~2  from: datac  to: combout
    Info (332098): Cell: iM1|matrixDecoder|WideOr6~5  from: datab  to: combout
Critical Warning (332148): Timing requirements not met
Info (332146): Worst-case setup slack is -19.981
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):   -19.981      -380.732 FSM:fsm1|state.S2 
    Info (332119):    -3.589       -67.941 inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] 
    Info (332119):    -1.579       -14.955 CLOCK_50 
    Info (332119):    -0.976       -26.716 inputManager:iM1|clockDivider:clock500Hz|newClock 
    Info (332119):    -0.687        -7.342 FSM:fsm1|state.S3 
    Info (332119):    -0.306        -3.795 FSM:fsm1|state.S1 
    Info (332119):     0.411         0.000 ROW[0] 
    Info (332119):     0.456         0.000 inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] 
Info (332146): Worst-case hold slack is -1.804
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):    -1.804       -23.916 inputManager:iM1|clockDivider:clock500Hz|newClock 
    Info (332119):    -1.563        -1.563 CLOCK_50 
    Info (332119):    -1.474       -12.588 ROW[0] 
    Info (332119):    -0.885        -9.740 FSM:fsm1|state.S2 
    Info (332119):     0.339         0.000 inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] 
    Info (332119):     0.587         0.000 FSM:fsm1|state.S3 
    Info (332119):     0.803         0.000 inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] 
    Info (332119):     0.874         0.000 FSM:fsm1|state.S1 
Info (332146): Worst-case recovery slack is 0.295
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):     0.295         0.000 inputManager:iM1|clockDivider:clock500Hz|newClock 
Info (332146): Worst-case removal slack is 0.585
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):     0.585         0.000 inputManager:iM1|clockDivider:clock500Hz|newClock 
Info (332146): Worst-case minimum pulse width slack is -1.380
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):    -1.380       -28.380 CLOCK_50 
    Info (332119):    -1.222        -1.594 ROW[0] 
    Info (332119):    -0.500       -91.000 inputManager:iM1|clockDivider:clock500Hz|newClock 
    Info (332119):    -0.500       -21.000 inputManager:iM1|pulseSignal:equalPulser|keyPulse[4] 
    Info (332119):    -0.500        -3.000 inputManager:iM1|pulseSignal:operatorPulser|keyPulse[4] 
    Info (332119):     0.500         0.000 FSM:fsm1|state.S1 
    Info (332119):     0.500         0.000 FSM:fsm1|state.S2 
    Info (332119):     0.500         0.000 FSM:fsm1|state.S3 
Info (332001): The selected device family is not supported by the report_metastability command.
Info (332102): Design is not fully constrained for setup requirements
Info (332102): Design is not fully constrained for hold requirements
Info: Quartus II 64-Bit TimeQuest Timing Analyzer was successful. 0 errors, 4 warnings
    Info: Peak virtual memory: 509 megabytes
    Info: Processing ended: Mon Oct 15 09:34:35 2018
    Info: Elapsed time: 00:00:02
    Info: Total CPU time (on all processors): 00:00:02


