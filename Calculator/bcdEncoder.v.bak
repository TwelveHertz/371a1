// This converts a number from a signed bianry number to 6 4-bit BCD's and a sign that can be passed into a display.
// We use the Double Dabble algorithm
// Inspiration for this implementation was taken from Computerphile's explanation of double dabble BCD conversion
// https://www.youtube.com/watch?v=eXIfZ1yKFlA
// and from this code here:
// http://verilogcodes.blogspot.com/2015/10/verilog-code-for-8-bit-binary-to-bcd.html
module bcdEncoder(bigBoi, sign, binary1, binary2, binary3, binary4, binary5, binary6);

	input signed [20:0] bigBoi; // 21 bit signed register representing the value to convert. 

	output reg [3:0] binary1; // This is the LSB for the BCD
	output reg [3:0] binary2; 
	output reg [3:0] binary3; 
	output reg [3:0] binary4; 
	output reg [3:0] binary5; 
	output reg [3:0] binary6; // This is the MSB for the BCD
	// a 1 in sign will indicate that we have a negative number.
	output reg sign;
	
	// This is the register that we will work with the most, we shift into this register.
	// Pray to god that this initializes at 0
	reg [23:0] BCD;
	reg [20:0] binaryValue;
	// Declare i as an integer to use in the for loop
	integer i = 0;
	
	
	always @(bigBoi)
	begin
	
	binaryValue <= bigBoi;
	// If the number is negative we invert and add 1 to convert to standard binary representation
	// we then indicate this by flipping the sign bit, to indicate a negative when we display the number
	if (binaryValue[20] == 1)
	begin
	binaryValue <= ~bigBoi + 1'b1;
	sign <= 1;
	end
	
	
	// For loop that runs 21 times
	for (i = 0; i < 5'b10101; i = i+1)
	begin
		// This is the shifting step which we accomplish through concantation with the extracted bits 
		BCD = {BCD[23:0],binaryValue[20-i]};
		
		// This is the test bit. If we have a value in any of our 4 bit BCD segments that is greater than 3, we need to 
		// add 3 such that the next shift will be correct. We do not do this on the last state as we have no more shifts 
		// left to complete.
		if (i < 5'b10100 && BCD[3:0] > 3'b100) BCD[3:0] = BCD[3:0] + 3;
		if (i < 5'b10100 && BCD[7:4] > 3'b100) BCD[7:4] = BCD[7:4] + 3;
		if (i < 5'b10100 && BCD[11:8] > 3'b100) BCD[11:8] = BCD[11:8] + 3;	
		if (i < 5'b10100 && BCD[15:12] > 3'b100) BCD[15:12] = BCD[15:12] + 3;
		if (i < 5'b10100 && BCD[19:16] > 3'b100) BCD[19:16] = BCD[19:16] + 3;
		if (i < 5'b10100 && BCD[23:20] > 3'b100) BCD[23:20] = BCD[23:20] + 3;
		
		
		// Once we've reached our last shift, then we push all the BCD digits into their corresponding output registers
		if (i == 5'b10100)
		begin
			binary1 <= BCD[3:0];
			binary2 <= BCD[7:4];
			binary3 <= BCD[11:8];
			binary4 <= BCD[15:12];
			binary5 <= BCD[19:16];
			binary6 <= BCD[23:20];
		end

	
		end
	
	end
endmodule